<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Acm-c | 谙忆-人生之旅]]></title>
  <link href="http://chenhaoxiang.github.io/blog/categories/acm-c/atom.xml" rel="self"/>
  <link href="http://chenhaoxiang.github.io/"/>
  <updated>2017-09-17T21:54:45+08:00</updated>
  <id>http://chenhaoxiang.github.io/</id>
  <author>
    <name><![CDATA[陈浩翔]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HDOJ1020 Encoding]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2015/09/07/HDOJ-1020-Encoding/"/>
    <updated>2015-09-07T04:06:28+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2015/09/07/HDOJ-1020-Encoding</id>
    <content type="html"><![CDATA[<p>Problem Description<br/>
Given a string containing only &lsquo;A&rsquo; - &lsquo;Z&rsquo;, we could encode it using the following method:</p>

<ol>
<li><p>Each sub-string containing k same characters should be encoded to &ldquo;kX&rdquo; where &ldquo;X&rdquo; is the only character in this sub-string.</p></li>
<li><p>If the length of the sub-string is 1, &lsquo;1&rsquo; should be ignored.</p></li>
</ol>


<!-- more -->


<hr />

<p>Input<br/>
The first line contains an integer N (1 &lt;= N &lt;= 100) which indicates the number of test cases. The next N lines contain N strings. Each string consists of only &lsquo;A&rsquo; - &lsquo;Z&rsquo; and the length is less than 10000.</p>

<p>Output<br/>
For each test case, output the encoded string in a line.</p>

<p>Sample Input
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2
</span><span class='line'>ABC
</span><span class='line'>ABBCCC&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Sample Output
</span><span class='line'>ABC
</span><span class='line'>A2B3C</span></code></pre></td></tr></table></div></figure></p>

<p>简单的字符串题目<br/>
需要注意的只有<br/>
如果输入:AABBBAAA<br/>
输出的是：2A3B3A<br/>
而不是：5A3B</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
int main()
{
    int s,i,j,n,p,m;
    char a[100000],temp;
    scanf("%d",&amp;s);
    while(s--)
    {
        scanf("%s",a);
        n=strlen(a);
        temp=a[0];
        m=1;
        for(i=1;i&lt;=n;i++)
        {
            p=1;
            if(a[i]==temp)
            {
                m++;
            }
            if(a[i]!=temp)
            {
                p=0;
                temp=a[i];
            }
            if(p==0)
            {
                if(m==1)
                    printf("%c",a[i-1]);
                else
                    printf("%d%c",m,a[i-1]);
                m=1;
            }
        }
        printf("\n");
    }
            return 0;
}
</code></pre>

<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HDOJ 1175 连连看 DFS]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2015/08/27/HDOJ-1175-lianliankan-DFS/"/>
    <updated>2015-08-27T10:40:07+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2015/08/27/HDOJ-1175-lianliankan-DFS</id>
    <content type="html"><![CDATA[<p>连连看<br/>
Problem Description<br/>
“连连看”相信很多人都玩过。没玩过也没关系，下面我给大家介绍一下游戏规则：在一个棋盘中，放了很多的棋子。如果某两个相同的棋子，可以通过一条线连起来（这条线不能经过其它棋子），而且线的转折次数不超过两次，那么这两个棋子就可以在棋盘上消去。不好意思，由于我以前没有玩过连连看，咨询了同学的意见，连线不能从外面绕过去的，但事实上这是错的。现在已经酿成大祸，就只能将错就错了，连线不能从外围绕过。<br/>
玩家鼠标先后点击两块棋子，试图将他们消去，然后游戏的后台判断这两个方格能不能消去。现在你的任务就是写这个后台程序。</p>

<!-- more -->


<hr />

<p>Input<br/>
输入数据有多组。每组数据的第一行有两个正整数n,m
(0 &lt; n&lt;=1000,0&lt; m&lt;1000)，分别表示棋盘的行数与列数。在接下来的n行中，每行有m个非负整数描述棋盘的方格分布。0表示这个位置没有棋子，正整数表示棋子的类型。接下来的一行是一个正整数q(0&lt; q&lt;50)，表示下面有q次询问。在接下来的q行里，每行有四个正整数x1,y1,x2,y2,表示询问第x1行y1列的棋子与第x2行y2列的棋子能不能消去。n=0,m=0时，输入结束。<br/>
注意：询问之间无先后关系，都是针对当前状态的！</p>

<p>Output<br/>
每一组输入数据对应一行输出。如果能消去则输出"YES",不能则输出"NO"。</p>

<p>Sample Input
<code>
3 4
1 2 3 4
0 0 0 0
4 3 2 1
4
1 1 3 4
1 1 2 4
1 1 3 3
2 1 2 4
3 4
0 1 4 3
0 2 4 1
0 0 0 0
2
1 1 2 4
1 3 2 3
0 0
</code></p>

<p>Sample Output
<code>
YES
NO
NO
NO
NO
YES
</code>
必须要有的剪枝就是：<br/>
当转向2次后，来判定当前的点和终点 是否在同一条线路，如果不在同一条线路就直接返回。</p>

<pre><code class="c++">/**判断拐角的:建立两个拐角变量,记录未开始拐角的坐标lastx,lasty,
如果出现拐角的话,条件就是:x!=lastx&amp;&amp;y!=lasty,
这样就可以拐角叠加了,另外更新一下当前的拐角坐标即可.**/
#include &lt;iostream&gt;
#include&lt;stdio.h&gt;
#include&lt;algorithm&gt;
#include&lt;string.h&gt;
#include&lt;stdlib.h&gt;
#include&lt;math.h&gt;
using namespace std;
int n,m;
int mapp[1010][1010];
int flag[1010][1010];
int q;
int s1,t1,s2,t2;
int tk;/**拐角的数量**/
int dir[4][2]={ {-1,0},{1,0},{0,-1},{0,1} };
int lastx,lasty;
int dfs(int a,int b)
{
    if(a==s2&amp;&amp;b==t2&amp;&amp;tk&lt;=2)
        return 1;
    if(tk==2&amp;&amp;a!=s2&amp;&amp;b!=t2)
        return 0;
    for(int i=0;i&lt;4;i++)
    {
        int tx=a+dir[i][0];
        int ty=b+dir[i][1];
        /**路上除了碰到终点和0，其余的都是路障**/
        if(tx&gt;=1&amp;&amp;tx&lt;=n&amp;&amp;ty&gt;=1&amp;&amp;ty&lt;=m&amp;&amp;(mapp[tx][ty]==0||(tx==s2&amp;&amp;ty==t2))&amp;&amp;flag[tx][ty]==0)
        {
            /**开始计算拐角，如果拐角了，修改拐角坐标，并叠加
            超过2的拐角不DFS下去，反之DFS下去
            没有发生拐角的同样可以dfs下去**/
            if(tx!=lastx&amp;&amp;ty!=lasty&amp;&amp;tk&lt;2)
            {
                tk++;
                int tmpx=lastx,tmpy=lasty;
                lastx=tx;lasty=ty;
                flag[tx][ty]=1;
                if(dfs(tx,ty)==1)
                    return 1;
                tk--;
                lastx=tmpx,lasty=tmpy;
                flag[tx][ty]=0;
            }
            else
                if(tx==lastx||ty==lasty)
            {
                flag[tx][ty]=1;
                if(dfs(tx,ty)==1)
                    return 1;
                flag[tx][ty]=0;
            }
        }
    }
    return 0;
}
int main()
{
    while(~scanf("%d%d",&amp;n,&amp;m)&amp;&amp;(n||m))
    {
        for(int i=1;i&lt;=n;i++)
        {
            for(int j=1;j&lt;=m;j++)
            {
                scanf("%d",&amp;mapp[i][j]);
                flag[i][j]=0;
            }
        }
        scanf("%d",&amp;q);
        for(int i=0;i&lt;q;i++)
        {
            scanf("%d%d%d%d",&amp;s1,&amp;t1,&amp;s2,&amp;t2);
            /**判断特殊情况**/
            if(mapp[s1][t1]!=mapp[s2][t2]||(s1==s2&amp;&amp;t1==t2)||mapp[s1][t1]==0&amp;&amp;mapp[s2][t2]==0)
            {
                printf("NO\n");
                continue;
            }
            memset(flag,0,sizeof(flag));
            tk=0;
            lastx=s1,lasty=t1;/**一开始的拐角坐标就是起始坐标**/
            if(dfs(s1,t1)==1)
                printf("YES\n");
            else
                printf("NO\n");
        }
    }
    return 0;
}
</code></pre>

<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HDOJ 1716 排列2（next_permutation函数）]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2015/08/27/HDOJ-1716-Arrange-2-next_permutation-function/"/>
    <updated>2015-08-27T04:33:26+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2015/08/27/HDOJ-1716-Arrange-2-next_permutation-function</id>
    <content type="html"><![CDATA[<p>Problem Description
Ray又对数字的列产生了兴趣：
现有四张卡片，用这四张卡片能排列出很多不同的4位数，要求按从小到大的顺序输出这些4位数。</p>

<!-- more -->


<hr />

<p>Input<br/>
每组数据占一行，代表四张卡片上的数字（0&lt;=数字&lt;=9），如果四张卡片都是0，则输入结束。</p>

<p>Output <br/>
对每组卡片按从小到大的顺序输出所有能由这四张卡片组成的4位数，千位数字相同的在同一行，同一行中每个四位数间用空格分隔。
每组输出数据间空一行，最后一组数据后面没有空行。</p>

<p>Sample Input
<code>
1 2 3 4
1 1 2 3
0 1 2 3
0 0 0 0
</code>
Sample Output
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1234 1243 1324 1342 1423 1432
</span><span class='line'>2134 2143 2314 2341 2413 2431
</span><span class='line'>3124 3142 3214 3241 3412 3421
</span><span class='line'>4123 4132 4213 4231 4312 4321&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;1123 1132 1213 1231 1312 1321
</span><span class='line'>2113 2131 2311
</span><span class='line'>3112 3121 3211&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;1023 1032 1203 1230 1302 1320
</span><span class='line'>2013 2031 2103 2130 2301 2310
</span><span class='line'>3012 3021 3102 3120 3201 3210</span></code></pre></td></tr></table></div></figure></p>

<p>这是一个求一个排序的下一个排列的函数，可以遍历全排列,要包含头文件<br/>
下面是以前的笔记    与之完全相反的函数还有prev_permutation <br/>
(1) int 类型的next_permutation<br/>
<code>
int main()
{
 int a[3];
a[0]=1;a[1]=2;a[2]=3;
 do
{
cout&lt;&lt;a[0]&lt;&lt;" "&lt;&lt;a[1]&lt;&lt;" "&lt;&lt;a[2]&lt;&lt;endl;//输入a[0],a[1],a[2];
} while (next_permutation(a,a+3)); //参数3指的是要进行排列的长度
//如果存在a之后的排列，就返回true。如果a是最后一个排列没有后继，返回false，每执行一次，a就变成它的后继
}
</code>
输出：
<code>
 1 2 3
 1 3 2
 2 1 3
 2 3 1
 3 1 2
 3 2 1
</code>
如果改成 while(next_permutation(a,a+2));<br/>
则输出：
<code>
 1 2 3
 2 1
</code>
只对前两个元素进行字典排序<br/>
显然，如果改成 while(next_permutation(a,a+1)); 则只输出：1 2 3<br/>
若排列本来就是最大的了没有后继，<br/>
则next_permutation执行后，会对排列进行字典升序排序,相当于循环<br/>
<code>
 int list[3]={3,2,1};  
next_permutation(list,list+3);
cout&lt;&lt;list[0]&lt;&lt;" "&lt;&lt;list[1]&lt;&lt;" "&lt;&lt;list[2]&lt;&lt;endl;
//输出: 1 2 3
</code>
例题：<br/>
Problem B</p>

<p>Ray又对数字的列产生了兴趣：<br/>
现有四张卡片，用这四张卡片能排列出很多不同的4位数，<br/>
要求按从小到大的顺序输出这些4位数。</p>

<p>Input<br/>
每组数据占一行，代表四张卡片上的数字（0&lt;=数字&lt;=9），<br/>
如果四张卡片都是0，则输入结束。</p>

<p>Output<br/>
对每组卡片按从小到大的顺序输出所有能由这四张卡片组成的4位数，<br/>
千位数字相同的在同一行，同一行中每个四位数间用空格分隔。<br/>
每组输出数据间空一行，最后一组数据后面没有空行。</p>

<p>Sample Input
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1 2 3 4
</span><span class='line'>1 1 2 3
</span><span class='line'>0 1 2 3
</span><span class='line'>0 0 0 0&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Sample Output
</span><span class='line'>1234 1243 1324 1342 1423 1432
</span><span class='line'>2134 2143 2314 2341 2413 2431
</span><span class='line'>3124 3142 3214 3241 3412 3421
</span><span class='line'>4123 4132 4213 4231 4312 4321&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;1123 1132 1213 1231 1312 1321
</span><span class='line'>2113 2131 2311
</span><span class='line'>3112 3121 3211&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;1023 1032 1203 1230 1302 1320
</span><span class='line'>2013 2031 2103 2130 2301 2310
</span><span class='line'>3012 3021 3102 3120 3201 3210</span></code></pre></td></tr></table></div></figure></p>

<pre><code class="c">#include &lt; iostream &gt;
#include &lt; stdio.h &gt;
#include &lt; algorithm&gt;
#include &lt; string.h&gt;
using namespace std;

int main()
{
    int a[5],i,j,k,m=0;
    while(~scanf("%d%d%d%d",&amp;a[1],&amp;a[2],&amp;a[3],&amp;a[4]))
    {
        if(a[1]==0&amp;&amp;a[2]==0&amp;&amp;a[3]==0&amp;&amp;a[4]==0)
            return 0;
        if(m)
            printf("\n");
        m=1;
        k=1;int h;
        do
        {
            if(a[1]==0)
                continue;
            if(k==1)
            {
                printf("%d%d%d%d",a[1],a[2],a[3],a[4]);
                k=0;
            }
            else
            {
            if(h==a[1])
                printf(" %d%d%d%d",a[1],a[2],a[3],a[4]);
            else
                printf("\n%d%d%d%d",a[1],a[2],a[3],a[4]);
            }
            h=a[1];
        }
        while(next_permutation(a+1,a+5));
        printf("\n");
    }
    return 0;
}
</code></pre>

<p>算法描述：</p>

<p>1、从尾部开始往前寻找 两个相邻 的元素</p>

<p>第1个元素i，第2个元素j（从前往后数的），且i&lt;j</p>

<p>2、再从尾往前找第一个大于i的元素k。将i、k 对调</p>

<p>3、[j,last)范围的元素置逆（ 颠倒排列 ）</p>

<p>这个题目用递归也可以做：</p>

<pre><code class="c">#include &lt; stdio.h&gt;
#include &lt; string.h&gt;
#include &lt; stdlib.h&gt;
int a[6],vis[5],t,sol[5],last;
void dfs(int c)
{
    if(c==5)
    {
        if(sol[1]==0)
            return;    //千位是0的不符合
        if(t!=0 &amp;&amp; sol[1]==last)
            printf(" ");  //一行的最后一个数后面不能输出空格
        if(t!=0 &amp;&amp; sol[1]!=last)
        {
            printf("\n");   //千位不同则换行
        }
        last=sol[1]; //记录上一个的千位
        int j=1;
        for(j ;  j &lt; = 4 ;  j++)
        {
            printf("%d",sol[j]);
        }
        t++;
    }
    int i;
    for(i = 1 ;  i &lt;= 4 ;  i++)
    {
        if(vis[i]==0)
        {
            vis[i]=1;
            sol[c]=a[i];
            dfs(c+1);
            vis[i]=0;
            while(a[i]==a[i+1])    //关键: 去重复
                i++;    //因为题目的输入是从小到大（否则先排序），所以如果在一轮排列结束后
        }     //如果后一个将要被选的数与上一轮这个下标的数相同，则跳过
    }      //比如1 1 1 2，第一轮1 1 1 2，返回上一次dfs后sol[3]=2,sol[4]=1
}    //返回到c=2，此时a[2]==a[3]=1,若再选1则为1 1 1 2，跳过则为1 2 1 1
int main()
{
    int i,T=0;
    while(scanf("%d%d%d%d",&amp;a[1],&amp;a[2],&amp;a[3],&amp;a[4]))
    {
        if(a[1]==0&amp;&amp;a[2]==0&amp;&amp;a[3]==0&amp;&amp;a[4]==0) break;
        if(T!=0) printf("\n");
        T=1;
        memset(vis,0,sizeof(vis));
        t=0;
        dfs(1);
        printf("\n");
    }
    return 0;
}
</code></pre>

<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HDOJ 1253 胜利大逃亡 BFS]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2015/08/27/HDOJ-1253-Great-escape-BFS/"/>
    <updated>2015-08-27T04:12:24+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2015/08/27/HDOJ-1253-Great-escape-BFS</id>
    <content type="html"><![CDATA[<p>Problem Description<br/>
Ignatius被魔王抓走了,有一天魔王出差去了,这可是Ignatius逃亡的好机会.</p>

<p>魔王住在一个城堡里,城堡是一个A<em>B</em>C的立方体,可以被表示成A个B*C的矩阵,刚开始Ignatius被关在(0,0,0)的位置,离开城堡的门在(A-1,B-1,C-1)的位置,现在知道魔王将在T分钟后回到城堡,Ignatius每分钟能从一个坐标走到相邻的六个坐标中的其中一个.现在给你城堡的地图,请你计算出Ignatius能否在魔王回来前离开城堡(只要走到出口就算离开城堡,如果走到出口的时候魔王刚好回来也算逃亡成功),如果可以请输出需要多少分钟才能离开,如果不能则输出-1.</p>

<!-- more -->


<hr />

<p><img src="http://img.blog.csdn.net/20150828102336698" alt="" /></p>

<p>Input<br/>
输入数据的第一行是一个正整数K,表明测试数据的数量.每组测试数据的第一行是四个正整数A,B,C和T(1&lt;=A,B,C&lt;=50,1&lt;=T&lt;=1000),它们分别代表城堡的大小和魔王回来的时间.然后是A块输入数据(先是第0块,然后是第1块,第2块&hellip;&hellip;),每块输入数据有B行,每行有C个正整数,代表迷宫的布局,其中0代表路,1代表墙.(如果对输入描述不清楚,可以参考Sample Input中的迷宫描述,它表示的就是上图中的迷宫)</p>

<p>特别注意:本题的测试数据非常大,请使用scanf输入,我不能保证使用cin能不超时.在本OJ上请使用Visual C++提交.</p>

<p>Output<br/>
对于每组测试数据,如果Ignatius能够在魔王回来前离开城堡,那么请输出他最少需要多少分钟,否则输出-1.</p>

<p>Sample Input
<code>
1
3 3 4 20
0 1 1 1
0 0 1 1
0 1 1 1
1 1 1 1
1 0 0 1
0 1 1 1
0 0 0 0
0 1 1 0
0 1 1 0
</code></p>

<p>Sample Output<br/>
11</p>

<pre><code class="c++">#include &lt;iostream&gt;
#include &lt;stdio.h&gt;
#include&lt;memory.h&gt;
#include &lt;queue&gt;
#include&lt;algorithm&gt;
#include&lt;string.h&gt;
#include&lt;stdio.h&gt;
#define N 50
using namespace std;
struct node
{
    int x,y,z;
    int time;
};
int directions[6][3]={ {1,0,0},{0,1,0},{0,0,1},{-1,0,0},{0,-1,0},{0,0,-1} };
int a,b,c,t;
int map[N][N][N];
node my,cur,nextt;
//用next提交会ce，不能用next的原因是，next可能是其他意思

int BFS(int x,int y,int z)
{

    queue&lt;node&gt;q;/**queue类是为程序员提供了一个队列的功能的容器适配器，
    具体而言，一个FIFO（先入先出）的数据结构**/
    my.x=x;
    my.y=y;
    my.z=z;
    my.time=0;
    q.push(my);/**push()会将一个元素置入queue中。**/
    while(!q.empty())/**empty()判断队列空，当队列空时，返回true。**/
    {
        cur=q.front();/**front()会返回queue内的第一个元素(也就是第一个被置入的元素)。**/
        q.pop();
        /**pop()会从queue中移除一个元素。
注意：pop()虽然会移除下一个元素，但是并不返回它，
front()和back()返回下一个元素但并不移除该元素。**/
        for(int i=0;i&lt;6;i++)
        {
            nextt.x=cur.x+directions[i][0];
            nextt.y=cur.y+directions[i][1];
            nextt.z=cur.z+directions[i][2];
            if(nextt.x&lt;a&amp;&amp;nextt.y&lt;b&amp;&amp;nextt.z&lt;c&amp;&amp;nextt.x&gt;=0&amp;&amp;nextt.y&gt;=0&amp;&amp;nextt.z&gt;=0&amp;&amp;map[nextt.x][nextt.y][nextt.z]!=1&amp;&amp;nextt.time&lt;=t)
            {

                if(nextt.x==a-1&amp;&amp;nextt.y==b-1&amp;&amp;nextt.z==c-1)  /**如果找到了出口 返回当前走的步数**/
                    return cur.time+1;
                nextt.time=cur.time+1;                       /**下一步可以走该方向，将该方向的信息完善后打入队列中**/
                q.push(nextt);/**push()会将一个元素置入queue中。**/
                map[nextt.x][nextt.y][nextt.z]=1;              /**标记一下该方向的节点已经走过**/
            }
        }
    }
    return -1;
}

int main()
{
    int sum,i,j,x,k;
    scanf("%d",&amp;x);
    while(x--)
    {
        scanf("%d%d%d%d",&amp;a,&amp;b,&amp;c,&amp;t);
            for(i=0;i&lt;a;i++)
                {
                    for(k=0;k&lt;b;k++)
                    {
                        for(j=0;j&lt;c;j++)
                        {
                            scanf("%d",&amp;map[i][k][j]);
                        }
                    }
                }
        sum=BFS(0,0,0);
        printf("%d\n",sum);
    }

    return 0;
}
</code></pre>

<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HDOJ1181变形课 深搜回溯]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2015/08/25/HDOJ1181-Backtracking-transfiguration-deep-search/"/>
    <updated>2015-08-25T10:28:06+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2015/08/25/HDOJ1181-Backtracking-transfiguration-deep-search</id>
    <content type="html"><![CDATA[<p>Problem Description
呃&hellip;&hellip;变形课上Harry碰到了一点小麻烦,因为他并不像Hermione那样能够记住所有的咒语而随意的将一个棒球变成刺猬什么的,但是他发现了变形咒语的一个统一规律:如果咒语是以a开头b结尾的一个单词,那么它的作用就恰好是使A物体变成B物体.
Harry已经将他所会的所有咒语都列成了一个表,他想让你帮忙计算一下他是否能完成老师的作业,将一个B(ball)变成一个M(Mouse),你知道,如果他自己不能完成的话,他就只好向Hermione请教,并且被迫听一大堆好好学习的道理.</p>

<!-- more -->


<hr />

<p>Input
测试数据有多组。每组有多行，每行一个单词,仅包括小写字母,是Harry所会的所有咒语.数字0表示一组输入结束.</p>

<p>Output
如果Harry可以完成他的作业,就输出"Yes.&ldquo;,否则就输出"No.&rdquo;(不要忽略了句号)</p>

<pre><code class="`">Sample Input
so
soon
river
goes
them
got
moon
begin
big
0


Sample Output
Yes.
</code></pre>

<p>HintHint
Harry 可以念这个咒语:&ldquo;big-got-them&rdquo;.</p>

<p>这个代码还是很容易理解的，经典的DFS
不过对于没超时，我感到意外哈
我是从m往b搜索的
```c</p>

<h1>include&lt;stdlib.h></h1>

<h1>include&lt;stdio.h></h1>

<h1>include &lt;string.h></h1>

<p>using namespace std;
char a[1000][50];
int len[1000];
int k;int flag;
bool vis[1000];
void dfs(char x)
{
    if(x==&lsquo;b&rsquo;)
        {
            flag=1;
            return ;
        }
    if(flag==1)
    {
        return;
    }
    for(int i=0;i&lt;k;i++)
    {
        //printf(&ldquo;vis[%d]=%d\n&rdquo;,i,vis[i]);
        if(vis[i]==0)
        {
            if(a[i][len[i]]==x)
            {
   // printf(&ldquo;a[%d][%d]=%c\n&rdquo;,i,len[i],a[i][len[i]]);
                vis[i]=1;
               // printf(&ldquo;x=%c\n&rdquo;,x);
                dfs(a[i][0]);
               // printf(&ldquo;x=%c\n&rdquo;,x);
                vis[i]=0;
            }
        }
    }
}
int main()
{
    while(scanf(&ldquo;%s&rdquo;,a[0])!=EOF)
    {
        flag=0;
         int i=0;
        if(a[0][0]==&lsquo;0&rsquo;)
        {
            printf(&ldquo;no.\n&rdquo;);
            continue;
        }
        memset(vis,0,sizeof(vis));
        while(a[i][0]!=&lsquo;0&rsquo;)
        {
            len[i]=strlen(a[i])-1;
            i++;
            scanf(&ldquo;%s&rdquo;,a[i]);
        }
        k=i;
        dfs(&rsquo;m');
        if(flag==1)
            printf(&ldquo;Yes.\n&rdquo;);
        else
            printf(&ldquo;No.\n&rdquo;);</p>

<pre><code>}
</code></pre>

<p>}</p>

<pre><code>下面这段代码是从b往m搜索的，差不多
</code></pre>

<h1>include&lt;stdlib.h></h1>

<h1>include&lt;stdio.h></h1>

<h1>include &lt;string.h></h1>

<p>using namespace std;
char a[1000][50];
int len[1000];
int k;int flag;
bool vis[1000];
void dfs(char x)
{
    if(x==&rsquo;m')
        {
            flag=1;
            return ;
        }
    if(flag==1)
    {
        return;
    }
    for(int i=0;i&lt;k;i++)
    {
        //printf(&ldquo;vis[%d]=%d\n&rdquo;,i,vis[i]);
        if(vis[i]==0)
        {
            if(a[i][0]==x)
            {
               // printf(&ldquo;a[%d][%d]=%c\n&rdquo;,i,len[i],a[i][len[i]]);
                vis[i]=1;
               // printf(&ldquo;x=%c\n&rdquo;,x);
                dfs(a[i][len[i]]);
               // printf(&ldquo;x=%c\n&rdquo;,x);
                vis[i]=0;
            }
        }
    }
}
int main()
{
    while(scanf(&ldquo;%s&rdquo;,a[0])!=EOF)
    {
        flag=0;
         int i=0;
        if(a[0][0]==&lsquo;0&rsquo;)
        {
            printf(&ldquo;no.\n&rdquo;);
            continue;
        }
        memset(vis,0,sizeof(vis));
        while(a[i][0]!=&lsquo;0&rsquo;)
        {
            len[i]=strlen(a[i])-1;
            i++;
            scanf(&ldquo;%s&rdquo;,a[i]);
        }
        k=i;
        dfs(&lsquo;b&rsquo;);
        if(flag==1)
            printf(&ldquo;Yes.\n&rdquo;);
        else
            printf(&ldquo;No.\n&rdquo;);</p>

<pre><code>}
</code></pre>

<p>}</p>

<p>```</p>

<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
</feed>
