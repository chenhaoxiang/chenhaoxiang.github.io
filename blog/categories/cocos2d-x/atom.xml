<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Cocos2d-x | 谙忆-人生之旅]]></title>
  <link href="http://chenhaoxiang.github.io/blog/categories/cocos2d-x/atom.xml" rel="self"/>
  <link href="http://chenhaoxiang.github.io/"/>
  <updated>2017-09-17T21:54:45+08:00</updated>
  <id>http://chenhaoxiang.github.io/</id>
  <author>
    <name><![CDATA[陈浩翔]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[【Cocos2d-x】Cocos2d-x精灵的性能优化]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/08/24/cocos2dx-sprite-sheet-optimize/"/>
    <updated>2017-08-24T13:38:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/08/24/cocos2dx-sprite-sheet-optimize</id>
    <content type="html"><![CDATA[<p>Cocos2d-x精灵的性能优化-使用纹理图集和精灵帧缓存</p>

<!-- more -->


<hr />

<h1>使用纹理图集</h1>

<p>纹理图集(Texture)也称为精灵表(Sprite Sheet)</p>

<p>使用纹理图集的优点:
1、减少文件读取次数，读取一张图片比读取一推小文件要快<br/>
2、减少OpenGL ES绘制调用并且加速渲染<br/>
OpenGL ES 1.1仅仅能够使用2的n次幂大小的图片(即宽度或者高度是2、4、8、64&hellip;)。<br/>
如果采用小图片OpenGL ES1.1会分配给每个图片2的n次幂大小的内存空间，即使这张图片达不到这样的宽度和高度也会分配大于此图片的2的n次幂大小的空间。那么运用这种图片集的方式将会减少内存碎片。<br/>
虽然在Cocos2d-x v2.0后使用OpenGL ES2.0,它不会再分配2的几次幂的内存块了，但是减少读取次数和绘制的优势依然存在。<br/>
3、减少内存消耗。<br/>
4、Cocos2d-x全面支持Zwoptex和TexturePacker，所以创建和使用纹理图集是很容易的</p>

<p><img src="http://i.imgur.com/g2Z6XnO.png" alt="" /><br/>
这样一张大图，可以让美工来完成，但是记得需要记下坐标，图集中小图的左上角坐标是多少，宽和高是多少，这是需要知道的。<br/>
这是很耗时的。实际上这是可以由软件(Zwoptex和TexturePacker)来完成的。<br/>
做出来的纹理图集由两部分构成。一部分是存有纹理的，也就是大图文件。另一部分就是里面精灵/小图的坐标等信息文件</p>

<p><img src="http://i.imgur.com/0CWjIUB.png" alt="" /><br/>
plist文件是属性列表文件，一种xml文件。每一个小图称为帧(frame),每一个frame包含了该帧的名(key)，坐标,高宽。是否旋转等。这是给程序读的<br/>
<figure class='code'><figcaption><span>加载纹理缓存图片/大图</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="kt">bool</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">init</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">Layer</span><span class="o">::</span><span class="n">init</span><span class="p">()</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Size</span> <span class="n">visibleSize</span> <span class="o">=</span> <span class="n">Director</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">getVisibleSize</span><span class="p">();</span>
</span><span class='line'><span class="n">Vec2</span> <span class="n">origin</span> <span class="o">=</span> <span class="n">Director</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">getVisibleOrigin</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">auto</span> <span class="n">background</span> <span class="o">=</span> <span class="n">Sprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;background.png&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">background</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">setAnchorPoint</span><span class="p">(</span><span class="n">Vec2</span><span class="o">::</span><span class="n">ZERO</span><span class="p">);</span>
</span><span class='line'><span class="k">this</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">addChild</span><span class="p">(</span><span class="n">background</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">auto</span> <span class="n">mountain1</span> <span class="o">=</span> <span class="n">Sprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;SpriteSheet.png&quot;</span><span class="p">,</span><span class="n">Rect</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">391</span><span class="p">,</span> <span class="mi">934</span><span class="p">,</span> <span class="mi">388</span><span class="p">));</span><span class="c1">//截取图片</span>
</span><span class='line'><span class="n">mountain1</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">setAnchorPoint</span><span class="p">(</span><span class="n">Vec2</span><span class="o">::</span><span class="n">ZERO</span><span class="p">);</span><span class="c1">//设置锚点</span>
</span><span class='line'><span class="n">mountain1</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="o">-</span><span class="mi">200</span><span class="p">,</span><span class="mi">80</span><span class="p">));</span><span class="c1">//设置坐标</span>
</span><span class='line'><span class="k">this</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">addChild</span><span class="p">(</span><span class="n">mountain1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">Texture2D</span><span class="o">*</span> <span class="n">cache</span> <span class="o">=</span> <span class="n">Director</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">getTextureCache</span><span class="p">()</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">addImage</span><span class="p">(</span><span class="s">&quot;SpriteSheet.png&quot;</span><span class="p">);</span><span class="c1">//加载整个图片到纹理缓存</span>
</span><span class='line'><span class="k">auto</span> <span class="n">hero1</span> <span class="o">=</span> <span class="n">Sprite</span><span class="o">::</span><span class="n">create</span><span class="p">();</span>
</span><span class='line'><span class="n">hero1</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">setTexture</span><span class="p">(</span><span class="n">cache</span><span class="p">);</span>
</span><span class='line'><span class="n">hero1</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">setTextureRect</span><span class="p">(</span><span class="n">Rect</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1706</span><span class="p">,</span><span class="mi">391</span><span class="p">,</span><span class="mi">327</span><span class="p">));</span><span class="c1">//在纹理缓存中截取图片  左上角坐标 以及截取图片的宽高</span>
</span><span class='line'><span class="n">hero1</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="mi">800</span><span class="p">,</span><span class="mi">200</span><span class="p">));</span>
</span><span class='line'><span class="k">this</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">addChild</span><span class="p">(</span><span class="n">hero1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;</span><span class="err">源代码下载地址：</span><span class="o">&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">blockquote</span> <span class="n">cite</span><span class="o">=</span><span class="err">&#39;陈浩翔&#39;</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">GITHUB</span><span class="err">源码下载地址</span><span class="o">:&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="err">【</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="err">&#39;</span><span class="nl">https</span><span class="p">:</span><span class="c1">//github.com/chenhaoxiang/cocos2d-x/tree/master/20170824/code/Cocos2dSpriteSheet&#39; target=&#39;_blank&#39;&gt;点我进行下载&lt;/a&gt;】&lt;/strong&gt;&lt;/p&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="err">精灵帧缓存</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">精灵帧缓存是缓存的一种，缓存有如下几种</span><span class="o">:&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="mi">1</span><span class="err">、纹理缓存</span><span class="p">(</span><span class="n">TextureCache</span><span class="p">)</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="err">使用纹理缓存可以创建纹理对象</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="mi">2</span><span class="err">、精灵帧缓存</span><span class="p">(</span><span class="n">SpriteFrameCache</span><span class="p">)</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="err">和纹理图集相对应，把</span><span class="n">plist</span><span class="err">文件读到内存，到文件里面创建精灵帧缓存，然后再从精灵帧缓存中获得精灵对象，反复使用精灵对象时候，使用精灵帧缓存可以节省内存消耗</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="err">将一个图读到精灵帧缓存中，同时也会加载到纹理缓存中</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="mi">3</span><span class="err">、动画缓存</span><span class="p">(</span><span class="n">AnimationCache</span><span class="p">)</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="err">动画缓存主要用于精灵动画，精灵动画中的每一帧是从动画缓存中获取的</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;c++ 精灵帧缓存&quot;</span><span class="o">&gt;</span><span class="n">SpriteFrameCache</span> <span class="o">*</span><span class="n">frameCache</span> <span class="o">=</span> <span class="n">SpriteFrameCache</span><span class="o">::</span><span class="n">getInstance</span><span class="p">();</span>
</span><span class='line'><span class="n">frameCache</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">addSpriteFramesWithFile</span><span class="p">(</span><span class="s">&quot;SpriteSheet.plist&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//单例-将精灵图集的坐标读进去 根据这个坐标获取图集，这个加载过程是在游戏启动的时候加载，并不是在用的时候加载(肯定会占用很多内存的,不过现在手机一般内存都挺多的)  </span>
</span><span class='line'><span class="k">auto</span> <span class="n">mountain1</span> <span class="o">=</span> <span class="n">Sprite</span><span class="o">::</span><span class="n">createWithSpriteFrameName</span><span class="p">(</span><span class="s">&quot;mountain1.png&quot;</span><span class="p">);</span><span class="c1">//缓存被创建后，可以通过frame名字(**注意名字冲突的问题，名字一样的精灵帧，后面的会覆盖前面的,可以加前缀以区分**)指定精灵帧来创建一个精灵   这个过程并不是通过大图去创建的，而是通过SpriteFrameCache缓存取出来的，这个速度很快  </span>
</span><span class='line'><span class="c1">//还可以通过精灵帧来创建精灵  </span>
</span><span class='line'><span class="n">SpriteFrame</span> <span class="o">*</span><span class="n">heroSpriteFrame</span> <span class="o">=</span> <span class="n">frameCache</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">getSpriteFrameByName</span><span class="p">(</span><span class="s">&quot;hero1.png&quot;</span><span class="p">);</span><span class="c1">//通过精灵帧名字获取精灵帧</span>
</span><span class='line'><span class="n">Sprite</span> <span class="o">*</span><span class="n">hero1</span> <span class="o">=</span> <span class="n">Sprite</span><span class="o">::</span><span class="n">createWithSpriteFrame</span><span class="p">(</span><span class="n">heroSpriteFrame</span><span class="p">);</span><span class="c1">//通过精灵帧创建精灵</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">清空或移除精灵帧的缓存函数</span><span class="o">:</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">C</span><span class="o">++</span>
</span><span class='line'><span class="kt">void</span> <span class="n">removeSpriteFrameByName</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">name</span><span class="p">);</span><span class="c1">//指定具体的精灵帧名将精灵帧从缓存中移除，具体到精灵帧</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">removeSpriteFrames</span><span class="p">();</span><span class="c1">//指定清空所有的精灵帧缓存</span>
</span><span class='line'><span class="kt">void</span> <span class="n">removeSpriteFramesFromFile</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">plist</span><span class="p">);</span><span class="c1">//指定具体的坐标文件(plist文件)移除精灵帧</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">removeUnusedSpriteFrames</span><span class="p">();</span><span class="c1">//移除没有使用的精灵帧</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">建议初学者不要轻易使用清除缓存函数！</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="err">小项目实例</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">现在还做不了太复杂的项目，在目前这个阶段</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="err">项目描述</span><span class="o">:&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="err">我们有这样一个场景，一个背景草地，山，和一个精灵牛仔</span><span class="p">(</span><span class="err">还没学帧动画，先做个静态的</span><span class="p">)</span><span class="err">。</span> <span class="err">把这三个精灵放到一个场景中</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="err">利用精灵帧缓存完成</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">img</span> <span class="n">src</span><span class="o">=</span><span class="s">&quot;http://i.imgur.com/6IbcWnk.png&quot;</span> <span class="n">alt</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="o">/&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">背景没有放到精灵图集中去，这是因为背景是不需要透明的</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>C++
bool HelloWorld::init()
{
    if ( !Layer::init() )
    {
        return false;
    }</p>

<pre><code>Size visibleSize = Director::getInstance()-&gt;getVisibleSize();
Vec2 origin = Director::getInstance()-&gt;getVisibleOrigin();

auto background = Sprite::create("background.png");//加载背景精灵
background-&gt;setAnchorPoint(Vec2::ZERO);
this-&gt;addChild(background,0);

SpriteFrameCache *frameCache = SpriteFrameCache::getInstance();//单例对象
frameCache-&gt;addSpriteFramesWithFile("SpriteSheet.plist");//加载精灵图集

auto mountain1 = Sprite::createWithSpriteFrameName("mountain1.png");//通过精灵帧名创建精灵
mountain1-&gt;setAnchorPoint(Vec2::ZERO);//设置锚点
mountain1-&gt;setPosition(Vec2(-200,80));
this-&gt;addChild(mountain1,0);

SpriteFrame *heroSpriteFrame = frameCache-&gt;getSpriteFrameByName("hero1.png");//通过精灵帧名字获取精灵帧
Sprite *hero1 = Sprite::createWithSpriteFrame(heroSpriteFrame);//通过精灵帧创建精灵
</code></pre>

<p>//上面的两条语句相当于前面一条语句的效果auto mountain1 = Sprite::createWithSpriteFrameName(&ldquo;mountain1.png&rdquo;);
    hero1->setPosition(Vec2(800,200));
    this->addChild(hero1,0);</p>

<pre><code>return true;
</code></pre>

<p>}</p>

<p>```</p>

<h2>源代码下载地址：</h2>

<blockquote cite='陈浩翔'>
GITHUB源码下载地址:<strong>【<a href='https://github.com/chenhaoxiang/cocos2d-x/tree/master/20170824/code/Cocos2dxHero' target='_blank'>点我进行下载</a>】</strong></p>
</blockquote>


<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【Cocos2d-x】Sprite精灵类-创建Sprite精灵对象]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/08/22/cocos2d-x-create-sprite-object/"/>
    <updated>2017-08-22T13:38:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/08/22/cocos2d-x-create-sprite-object</id>
    <content type="html"><![CDATA[<p>精灵在Cocos2d-x中的地位就像一场电影中的主角，男主角/女主角，是一场电影中的灵魂所在。也是我们游戏中的灵魂<br/>
无论我们控制的对象还是电脑控制的对象，我们都称之为精灵，或者背景中的图片，也可以称为精灵、只要在游戏场景中的东西，都是可以用精灵来做的。比如菜单，可以做成精灵菜单。<br/>
还有些精灵是和物理引擎有关的，有一些物理特效。<br/>
本章讲的精灵，只是一般意义上的精灵。</p>

<!-- more -->


<hr />

<h1>创建Sprite精灵对象</h1>

<h2>创建精灵对象</h2>

<p>创建精灵对象有多种方式，其中常用的函数如下:
<code>C++
static Sprite* create(); //创建一个精灵对象，纹理等属性需要在创建后设置
static Sprite* create(const std:string &amp;filename); //指定图片创建精灵  这种方式在实际项目中很少用。我们不会简单的把每个精灵做一个图片，这样会消耗更多的IO读写时间  
//可以放在大图中(合成图)，进行一次读取，在使用中再截取，也就是下面的创建方法(这样内存会消耗多,但是IO操作少)
//如果使用的是iOS系统(苹果)，图片不能超过2048*2048，这是系统的限制
static Sprite* create(const std::string &amp;filename,const Rect &amp;rect); //指定图片和裁剪的矩形区域来创建精灵
static Sprite* createWithTexture(Texture2D *texture);//指定纹理创建精灵  如果已经有纹理对象了，直接把纹理对象拿过来创建精灵对象
static Sprite* createWithTexture(Texture2D *texture,const Rect &amp;rect,bool rotated=false);//指定纹理和裁剪的矩形区域来创建精灵，第三个参数是否旋转纹理，默认不旋转  从纹理缓存区来裁剪矩形区域创建精灵
//旋转就是，可能某些情况下，我们合图时为了节省空间，将小图旋转再合图了，这个时候就需要旋转了
static Sprite* createWithSpriteFrame(SpriteFrame *pSpriteFrame);//通过一个精灵帧对象创建另一个精灵对象 帧缓存
static Sprite* createWithSpriteFrameName(const std::string &amp;spriteFrameName);//通过精灵帧的名字的创建
</code></p>

<h2>Sprite继承关系图:</h2>

<p><img src="http://i.imgur.com/QsLMq4Z.png" alt="" /></p>

<h2>纹理</h2>

<p>无论是计算机中的CPU还是GPU，做运算做处理，它不是对图片进行处理。图片读入到计算机里，需要对图片进行解码。最后，在计算机放的东西，就可以叫做纹理！ <br/>
实际上，纹理就是由图片或者计算机本身用绘图工具绘画出来的对象。这个东西本身最后的目的是为了放在图片上面，这个过程叫纹理贴图。<br/>
在实际中，我们有时候是把纹理叫成图片的。或者图片叫成纹理。一般而言，在游戏里叫纹理或纹理图片，这是没问题的</p>

<h1>使用纹理对象创建Sprite对象</h1>

<p>场景设计: <br/>
<img src="http://i.imgur.com/kSgYBRI.png" alt="" /></p>

<p>两个精灵(具体几个，看美工给几张图咯):<br/>
草地图片:
<img src="http://i.imgur.com/UCauNT0.png" alt="" /></p>

<hr />

<p>树图片:
<img src="http://i.imgur.com/NtzBfko.png" alt="" /><br/>
这张图上有三棵树，实际上我们不需要全部用到，所以不能简单的把树图片放到草地图片上面。<br/>
而且摆放位置也不同。对于第二种图片，我们可以先读到内存里，形成一个纹理对象，然后从这个纹理对象中截图<br/>
从里面裁剪出来来创建精灵对象。<br/>
裁剪有两种方式，一是通过它的纹理缓存来裁剪。也可以从大图文件直接进行裁剪。</p>

<p>不管是哪种方式，我们都需要去量树的坐标，Rect的参数是一样的！
去画图工具中量坐标:<br/>
我们需要的参数是:左上角坐标，还有宽和高 <br/>
<img src="http://i.imgur.com/TEzpJkp.png" alt="" /></p>

<p>从纹理中创建tree精灵:
<code>C++ tree1精灵
auto tree1 = Sprite::create("tree1.png", Rect(608, 36, 300, 298));//左上角的坐标，宽，高
//指定大图，指定Rect获取树的截图
tree1-&gt;setPosition(Vec2(200,230));
this-&gt;addChild(tree1,0)
</code>
<code>C++ tree2精灵
Texture2D* cache = Director::getInstance()-&gt;getTextureCache()-&gt;addImage("tree1.png");
auto tree2 = Sprite::create();
tree2-&gt;setTexture(cache);
tree2-&gt;setTextureRect(Rect(70,72,187,267));
tree2-&gt;setPosition(Vec2(500,200));//设置精灵位置
this-&gt;addChild(tree2,0);
//通过纹理缓存截取树
</code>
平时我们玩游戏的时候，遇到游戏中loading的画面时，基本上就是在缓存纹理，经过这个步骤后，我们玩游戏会快很多。因为不会去临时加载图片</p>

<h2>实例：</h2>

<pre><code class="C++">
bool HelloWorld::init()
{
    if ( !Layer::init() )
    {
        return false;
    }

    Size visibleSize = Director::getInstance()-&gt;getVisibleSize();
    Vec2 origin = Director::getInstance()-&gt;getVisibleOrigin();

    //背景精灵
    auto background = Sprite::create("background.png");//背景图
    //background-&gt;setAnchorPoint(Vec2::ZERO);//指定锚点(默认坐标为0，0)或者:
    background-&gt;setPosition(Vec2(visibleSize.width/2,visibleSize.height/2));//指定位置(默认锚点为0.5，0.5)
    this-&gt;addChild(background,0);

    auto tree1 = Sprite::create("tree1.png", Rect(608, 36, 300, 298));//左上角的坐标，宽，高
    //指定大图，指定Rect获取树的截图
    tree1-&gt;setPosition(Vec2(200,230));
    this-&gt;addChild(tree1,0);

    Texture2D* cache = Director::getInstance()-&gt;getTextureCache()-&gt;addImage("tree1.png");
    auto tree2 = Sprite::create();
    tree2-&gt;setTexture(cache);
    tree2-&gt;setTextureRect(Rect(70, 72, 187, 267));
    tree2-&gt;setPosition(Vec2(500, 200));//设置精灵位置
    this-&gt;addChild(tree2, 0);
    //通过纹理缓存截取树

    return true;
}
</code></pre>

<h1>源代码下载地址：</h1>

<blockquote cite='陈浩翔'>
GITHUB源码下载地址:<strong>【<a href='https://github.com/chenhaoxiang/cocos2d-x/tree/master/20170822/code/Cocos2dxSprite' target='_blank'>点我进行下载</a>】</strong></p>
</blockquote>


<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【Cocos2d-x】开发实战-Cococs2d-x中的菜单]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/07/01/Cococs2d-x-MenuItem/"/>
    <updated>2017-07-01T13:38:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/07/01/Cococs2d-x-MenuItem</id>
    <content type="html"><![CDATA[<p>本篇博客讲解:  <br/>
1.使用菜单<br/>
2.文本菜单<br/>
3.精灵菜单和图片菜单<br/>
4.开关菜单</p>

<!-- more -->


<hr />

<h1>使用菜单</h1>

<p>Menu - 菜单<br/>
MenuItem - 菜单项</p>

<p>菜单分类实际上是按照菜单项分类的<br/>
菜单和菜单项的继承关系图:<br/>
<img src="http://i.imgur.com/OYKnEka.png" alt="" /></p>

<p>文本菜单,精灵菜单，图片菜单和开关菜单其实准确来讲，应该是:<br/>
文本菜单项,精灵菜单项，图片菜单项和开关菜单项</p>

<p>继承MenuItemLabel的菜单其实都是文本菜单  <br/>
精灵菜单:MenuItemSprite的子类是图片菜单MenuItemImage<br/>
开关菜单:MenuItemToggle</p>

<h1>文本菜单</h1>

<p>文本菜单是菜单项只是显示文本<br/>
文本菜单类包括了MenuItemLabel、MenuItemFont和MenuItemAtlasFont。MenuItemLabel是个抽象类，具体使用的时候是使用MenuItemFont和MenuItemAtlasFont两个类。
文本菜单类MenuItemFont，它的其中一个创建函数create定义如下:</p>

<pre><code class="C++">static MenuItemFont* create(const std::string &amp;value, //要显示的文本
const ccMenuCallback &amp; callback  //菜单操作的回调函数指针,菜单项被点击之后回调的函数
);
</code></pre>

<p>cocos2d帮我们做了一个宏来帮助我们传递回调函数的参数,CC_CALLBACK_n,n为回调的参数个数<br/>
<img src="http://i.imgur.com/6JjL3zZ.png" alt="" /><br/>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="c1">// new callbacks based on C++11&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">CC_CALLBACK_0</span><span class="p">(</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">selector</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">,</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">target</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;)</span> <span class="n">std</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">selector</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">,</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">target</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">,</span> <span class="err">##</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">VA_ARGS</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">CC_CALLBACK_1</span><span class="p">(</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">selector</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">,</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">target</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;)</span> <span class="n">std</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">selector</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">,</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">target</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">placeholders</span><span class="o">::</span><span class="n">_1</span><span class="p">,</span> <span class="err">##</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">VA_ARGS</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">CC_CALLBACK_2</span><span class="p">(</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">selector</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">,</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">target</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;)</span> <span class="n">std</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">selector</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">,</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">target</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">placeholders</span><span class="o">::&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">placeholders</span><span class="o">::&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">2</span><span class="p">,</span> <span class="err">##</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">VA_ARGS</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">CC_CALLBACK_3</span><span class="p">(</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">selector</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">,</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">target</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;)</span> <span class="n">std</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">selector</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">,</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">target</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">placeholders</span><span class="o">::&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">placeholders</span><span class="o">::&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">2</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">placeholders</span><span class="o">::</span><span class="n">_3</span><span class="p">,</span> <span class="err">##</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">VA_ARGS</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">文本菜单类</span><span class="n">MenuItemAtlasFont</span><span class="err">是基于图片集的文本菜单项，它的其中一个创建函数</span><span class="n">create</span><span class="err">定义如下</span><span class="o">:</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">static</span> <span class="n">MenuItemAtlasFont</span><span class="o">*</span> <span class="n">create</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">value</span><span class="p">,</span><span class="c1">//要显示的文本</span>
</span><span class='line'> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">charMapFile</span><span class="p">,</span> <span class="c1">//图片集文件</span>
</span><span class='line'><span class="kt">int</span> <span class="n">itemWidth</span><span class="p">,</span> <span class="c1">//要截取的文字在图片中的宽度</span>
</span><span class='line'><span class="kt">int</span> <span class="n">itemHeight</span><span class="p">,</span> <span class="c1">//要截取的文字在图片中的高度</span>
</span><span class='line'><span class="kt">char</span> <span class="n">startCharMap</span><span class="p">,</span><span class="c1">//文字之间的间隔符</span>
</span><span class='line'> <span class="k">const</span> <span class="n">ccMenuCallback</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">callback</span><span class="c1">//菜单操作的回调函数指针</span>
</span><span class='line'><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">实例</span><span class="o">:</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">bool</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">init</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">Layer</span><span class="o">::</span><span class="n">init</span><span class="p">())</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Size</span> <span class="n">visibleSize</span> <span class="o">=</span> <span class="n">Director</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getVisibleSize</span><span class="p">();</span>
</span><span class='line'><span class="n">Vec2</span> <span class="n">origin</span> <span class="o">=</span> <span class="n">Director</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getVisibleOrigin</span><span class="p">();</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Sprite</span> <span class="o">*</span><span class="n">bg</span> <span class="o">=</span> <span class="n">Sprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">menu</span><span class="o">/</span><span class="n">background</span><span class="p">.</span><span class="n">png</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span> <span class="c1">//背景图片精灵</span>
</span><span class='line'><span class="n">bg</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">visibleSize</span><span class="p">.</span><span class="n">width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'><span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">visibleSize</span><span class="p">.</span><span class="n">height</span> <span class="o">/</span> <span class="mi">2</span><span class="p">));</span>
</span><span class='line'><span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">bg</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">MenuItemFont</span><span class="o">::</span><span class="n">setFontName</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Times</span> <span class="n">New</span> <span class="n">Roman</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span><span class="c1">//使用系统字体，设置系统字体的名字</span>
</span><span class='line'><span class="n">MenuItemFont</span><span class="o">::</span><span class="n">setFontSize</span><span class="p">(</span><span class="mi">86</span><span class="p">);</span><span class="c1">//设置系统字体的大小</span>
</span><span class='line'><span class="n">MenuItemFont</span> <span class="o">*</span><span class="n">item1</span> <span class="o">=</span> <span class="n">MenuItemFont</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Start</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span>
</span><span class='line'><span class="n">CC_CALLBACK_1</span><span class="p">(</span><span class="n">HelloWorld</span><span class="o">::</span><span class="n">menuItem1Callback</span><span class="p">,</span> <span class="k">this</span><span class="p">));</span> <span class="c1">//创建基于系统字体的MenuItemFont&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">MenuItemAtlasFont</span> <span class="o">*</span><span class="n">item2</span> <span class="o">=</span> <span class="n">MenuItemAtlasFont</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Help</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">menu</span><span class="o">/</span><span class="n">tuffy_bold_italic</span><span class="o">-</span><span class="n">charmap</span><span class="p">.</span><span class="n">png</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">65</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span>
</span><span class='line'><span class="n">CC_CALLBACK_1</span><span class="p">(</span><span class="n">HelloWorld</span><span class="o">::</span><span class="n">menuItem2Callback</span><span class="p">,</span> <span class="k">this</span><span class="p">));</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Menu</span><span class="o">*</span> <span class="n">mn</span> <span class="o">=</span> <span class="n">Menu</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">item1</span><span class="p">,</span> <span class="n">item2</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span><span class="c1">//把MenuItem放到Menu里，不能直接把MenuItem放到层里</span>
</span><span class='line'><span class="n">mn</span><span class="o">-&gt;</span><span class="n">alignItemsVertically</span><span class="p">();</span><span class="c1">//设置菜单位置，垂直对齐</span>
</span><span class='line'><span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">mn</span><span class="p">);</span><span class="c1">//把菜单放到层里&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">menuItem1Callback</span><span class="p">(</span><span class="n">Ref</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">pSender</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="c1">//实际上这里传进来的参数是MenuItem类型，所以在这里可以强转，也可以直接把形参类型写成MenuItem，不写成Ref</span>
</span><span class='line'><span class="n">MenuItem</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">item</span> <span class="o">=</span> <span class="p">(</span><span class="n">MenuItem</span><span class="o">*</span><span class="p">)</span><span class="n">pSender</span><span class="p">;</span>
</span><span class='line'><span class="c1">//一般情况下，我们不需要这个参数，只有在需要一些特定的信息的情况下，我们才需要进行转换拿值</span>
</span><span class='line'><span class="n">log</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Touch</span> <span class="n">Start</span> <span class="n">Menu</span> <span class="n">Item</span> <span class="o">%</span><span class="n">p</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">item</span><span class="p">);</span> <span class="c1">//这个输出是输出指针的地址，没有意义,在这里只是掩饰回调函数起作用了！且对象传过来了</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">menuItem2Callback</span><span class="p">(</span><span class="n">Ref</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">pSender</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="n">MenuItem</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">item</span> <span class="o">=</span> <span class="p">(</span><span class="n">MenuItem</span><span class="o">*</span><span class="p">)</span><span class="n">pSender</span><span class="p">;</span>
</span><span class='line'><span class="n">log</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Touch</span> <span class="n">Help</span> <span class="n">Menu</span> <span class="n">Item</span> <span class="o">%</span><span class="n">p</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">item</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="cp">##显示效果:  </span>
</span><span class='line'><span class="o">!</span><span class="p">[](</span><span class="nl">http</span><span class="p">:</span><span class="c1">//i.imgur.com/LyozJx3.gif)   </span>
</span><span class='line'>
</span><span class='line'><span class="cp">##源代码下载地址：</span>
</span><span class='line'>
</span><span class='line'><span class="n">GITHUB</span><span class="err">源码下载地址</span><span class="o">:&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">strong</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="err">【</span><span class="p">[</span><span class="err">点我进行下载</span><span class="p">](</span><span class="nl">https</span><span class="p">:</span><span class="c1">//github.com/chenhaoxiang/cocos2d-x/tree/master/20170701/code/Cocos2dTextMenu)】&amp;lt;/strong&amp;gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#精灵菜单和图片菜单</span>
</span><span class='line'>
</span><span class='line'><span class="cp">##精灵菜单项类MenuItemSprite</span>
</span><span class='line'><span class="err">创建函数</span><span class="n">create</span><span class="err">定义</span><span class="o">:</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">static</span> <span class="n">MenuItemSprite</span> <span class="o">*</span> <span class="n">create</span><span class="p">(</span><span class="n">Node</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">normalSprite</span><span class="p">,</span> <span class="n">Node</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">selectedSprite</span><span class="p">,</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">disabledSprite</span> <span class="o">=</span> <span class="k">nullptr</span><span class="p">);</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="k">static</span> <span class="n">MenuItemSprite</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">create</span><span class="p">(</span><span class="n">Node</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">normalSprite</span><span class="p">,</span><span class="c1">//菜单项正常显示时候的精灵</span>
</span><span class='line'><span class="n">Node</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">selectedSprite</span><span class="p">,</span><span class="c1">//选择菜单项时候的精灵</span>
</span><span class='line'><span class="n">Node</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">disableSprite</span><span class="p">,</span><span class="c1">//菜单项禁用时候的精灵</span>
</span><span class='line'><span class="k">const</span> <span class="n">ccMenuCallback</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">callback</span> <span class="c1">//菜单操作的回调函数指针</span>
</span><span class='line'><span class="p">)</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="k">static</span> <span class="n">MenuItemSprite</span> <span class="o">*</span> <span class="n">create</span><span class="p">(</span><span class="n">Node</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">normalSprite</span><span class="p">,</span> <span class="n">Node</span><span class="o">*</span> <span class="n">selectedSprite</span><span class="p">,</span> <span class="k">const</span> <span class="n">ccMenuCallback</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">callback</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>图片菜单项类MenuIemImage</h2>

<p>创建函数create定义:
<code>C++
static MenuItemImage* create(const std::string&amp; normallmage,//菜单项正常显示时候的图片
const std::string&amp; selectedImage,//选择菜单项时候的图片
const std::string&amp; disabledImage,//菜单项禁用时候的图片
const ccMenuCallback&amp; callback//菜单操作的回调函数指针
)
</code>
精灵菜单和图片菜单都有三种状态，也就是正常状态，选中状态，还有禁用状态。</p>

<h2>实例</h2>

<pre><code class="C++">bool HelloWorld::init()
{
if ( !Layer::init() )
{
    return false;
}

Size visibleSize = Director::getInstance()-&gt;getVisibleSize();
Vec2 origin = Director::getInstance()-&gt;getVisibleOrigin();

Sprite *bg = Sprite::create("menu/background.png");

bg-&gt;setPosition(Vec2(origin.x + visibleSize.width/2,
                         origin.y + visibleSize.height /2));
this-&gt;addChild(bg);

//开始精灵
Sprite *startSpriteNormal = Sprite::create("menu/start-up.png");
Sprite *startSpriteSelected = Sprite::create("menu/start-down.png");
//创建精灵菜单  添加精灵以及回调函数
MenuItemSprite *startMenuItem = MenuItemSprite::create(startSpriteNormal, 
                                                startSpriteSelected,
                                               CC_CALLBACK_1(HelloWorld::menuItemStartCallback, this));
startMenuItem-&gt;setPosition(Director::getInstance()-&gt;convertToGL(Vec2(700, 170)));
//指定坐标    convertToGL转换-将左上角为原点的UI坐标转换为OpenGL坐标，cocos2d默认坐标为OpenGL坐标
//700, 170为UI坐标

// 设置 图片菜单 图片菜单的好处就是直接使用图片就好了
MenuItemImage *settingMenuItem = MenuItemImage::create(
                         "menu/setting-up.png",
                         "menu/setting-down.png",
                         CC_CALLBACK_1(HelloWorld::menuItemSettingCallback, this)); 

settingMenuItem-&gt;setPosition(Director::getInstance()-&gt;convertToGL(Vec2(480, 400))); 

// 帮助 图片菜单
MenuItemImage *helpMenuItem = MenuItemImage::create(
                         "menu/help-up.png",
                         "menu/help-down.png",
                         CC_CALLBACK_1(HelloWorld::menuItemHelpCallback, this));    

helpMenuItem-&gt;setPosition(Director::getInstance()-&gt;convertToGL(Vec2(860, 480)));
//在这里，精灵菜单和图片菜单没什么区别，视觉效果一样，也一样有回调函数

Menu* mu = Menu::create(startMenuItem, settingMenuItem, helpMenuItem, NULL);//指定菜单  NULL指定菜单列表的结束
mu-&gt;setPosition(Vec2::ZERO);//菜单处于坐标原点 - 因为菜单项已经都指定位置了
this-&gt;addChild(mu);

return true;
}

//回调函数
void HelloWorld::menuItemHelpCallback(Ref* pSender)
{
MenuItem* item = (MenuItem*)pSender;
log("Touch Help %p", item);
}

void HelloWorld::menuItemStartCallback(Ref* pSender)
{
MenuItem* item = (MenuItem*)pSender;
log("Touch Start %p", item);
}

void HelloWorld::menuItemSettingCallback(Ref* pSender)
{
MenuItem* item = (MenuItem*)pSender;
log("Touch Setting %p", item);
}
</code></pre>

<p>小提示:这里图片的UI坐标可以通过画图工具或者PhotoShop获得坐标</p>

<h2>显示效果</h2>

<p><img src="http://i.imgur.com/cAgqpC1.gif" alt="" /></p>

<h2>源代码下载地址：</h2>

<blockquote cite='陈浩翔'>
GITHUB源码下载地址:<strong>【<a href='https://github.com/chenhaoxiang/cocos2d-x/tree/master/20170701/code/Cocos2dSpiritMenu' target='_blank'>点我进行下载</a>】</strong>
</blockquote>


<h1>开关菜单MenulItemToggle</h1>

<p>开关菜单有两种状态，这两种状态可以用任何的图片来替代(比如精灵-只要是菜单项就可以)<br/>
函数创建:(也是菜单项)
<code>C++
static MenulItemToggle* createWithCallback(
const ccMenuCallback&amp; callback,//菜单操作的回调函数指针 - 状态切换时调用的函数,菜单的事件处理
MenuItem* item,//进行切换的菜单项 MenuItem的集合，将其他菜单项放在开关菜单中
...
)
</code></p>

<p>简单形式的文本类型的开关菜单:<br/>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="k">auto</span> <span class="n">toggleMenuItem</span> <span class="o">=</span> <span class="n">MenuItemToggle</span><span class="o">::</span><span class="n">createWithCallback</span><span class="p">(</span>
</span><span class='line'><span class="n">CC_CALLBACK_1</span><span class="p">(</span><span class="n">HelloWorld</span><span class="o">::</span><span class="n">menuItem1Callback</span><span class="p">,</span><span class="k">this</span><span class="p">),</span>
</span><span class='line'><span class="n">MenuItemFont</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">On</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;),</span>
</span><span class='line'><span class="n">MenuItemFont</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Off</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;),</span>
</span><span class='line'><span class="nb">NULL</span><span class="p">);</span><span class="c1">//最后记得加NULL(Object-c中区分元素集合的结束)，在开关菜单中，其实只能放两个子菜单项，多菜单项没意义，因为只是两个状态的切换&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Menu</span><span class="o">*</span> <span class="n">mn</span><span class="o">=</span><span class="n">Menu</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">toggleMenuItem</span><span class="p">,</span><span class="nb">NULL</span><span class="p">);</span><span class="c1">//把菜单项放入菜单中</span>
</span><span class='line'><span class="k">this</span><span class="o">-&gt;</span><span class="n">addChhild</span><span class="p">(</span><span class="n">mn</span><span class="p">);</span><span class="c1">//把菜单放入层中</span>
</span></code></pre></td></tr></table></div></figure><br/>
这里只是简单的文本菜单，当然也可以是精灵菜单，也可以是图片菜单&hellip;</p>

<h2>实例</h2>

<pre><code class="C++">bool HelloWorld::init()
{

if (!Layer::init()){
return false;
}

Size visibleSize = Director::getInstance()-&gt;getVisibleSize();//大小
Vec2 origin = Director::getInstance()-&gt;getVisibleOrigin();//锚点 默认为0.5  0.5

//Sprite* bg = Sprite::create("menu/setting-back.png");
auto bg = Sprite::create("menu/setting-back.png");// auto-自动推断类型
bg-&gt;setPosition(Vec2(origin.x+visibleSize.width/2,origin.y+visibleSize.height/2));
this-&gt;addChild(bg);

//音效菜单项
auto soundOnMenuItem = MenuItemImage::create("menu/on.png", "menu/on.png");//正常和按下是同一张图片 - 开
auto soundOffMenuItem = MenuItemImage::create("menu/off.png", "menu/off.png");//关
//音效开关菜单项
auto soundToggleMenuItem = MenuItemToggle::createWithCallback(CC_CALLBACK_1(HelloWorld::menuSoundToggleCallback,this),//函数指针
    soundOnMenuItem,soundOffMenuItem,//菜单项集合
    NULL//集合结束
    );
//设置坐标 - UI坐标(原点为左上角)转换为OpenGL坐标(原点为左下角)
soundToggleMenuItem-&gt;setPosition(Director::getInstance()-&gt;convertToGL(Vec2(818, 220)));

//音乐菜单项 
auto musicOnMenuItem = MenuItemImage::create(
    "menu/on.png",
    "menu/on.png");
auto musicOffMenuItem = MenuItemImage::create(
    "menu/off.png",
    "menu/off.png");
//音乐开关菜单项
auto musicToggleMenuItem = MenuItemToggle::createWithCallback(CC_CALLBACK_1(HelloWorld::menuMusicToggleCallback, this),
    musicOnMenuItem,
    musicOffMenuItem,
    NULL);
musicToggleMenuItem-&gt;setPosition(Director::getInstance()-&gt;convertToGL(Vec2(818, 362)));

//OK按钮
auto okMenuItem = MenuItemImage::create("menu/ok-up.png", "menu/ok-down.png");
okMenuItem-&gt;setPosition(Director::getInstance()-&gt;convertToGL(Vec2(600, 510)));

Menu* mn = Menu::create(soundToggleMenuItem, musicToggleMenuItem, okMenuItem, NULL);
mn-&gt;setPosition(Vec2::ZERO);
this-&gt;addChild(mn);

return true;
}


void HelloWorld::menuSoundToggleCallback(Ref* pSender)
{
log("menuSoundToggleCallback");
}


void HelloWorld::menuMusicToggleCallback(Ref* pSender)
{
log("menuMusicToggleCallback");
}
</code></pre>

<p>先是创建On和Off图片惨淡项->创建开关菜单->Menu<br/>
Menu 放入 Layer</p>

<h2>显示效果</h2>

<p><img src="http://i.imgur.com/lWaN1iT.gif" alt="" /></p>

<h1>源代码下载地址：</h1>

<blockquote cite='陈浩翔'>
GITHUB源码下载地址:<strong>【<a href='https://github.com/chenhaoxiang/cocos2d-x/tree/master/20170701/code/Cocos2dToggleMenuItem' target='_blank'>点我进行下载</a>】</strong>
</blockquote>


<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【Cocos2d-x】开发实战-Cocos中的字符串、标签和中文乱码]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/06/27/cocos2d-string-label-mojibake/"/>
    <updated>2017-06-27T13:38:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/06/27/cocos2d-string-label-mojibake</id>
    <content type="html"><![CDATA[<p>本篇博客讲解:<br/>
1.Ccocos2d-x中的字符串
2.使用标签
3.中文乱码问题</p>

<!-- more -->


<hr />

<p>[TOC]</p>

<h1>Ccocos2d-x中的字符串</h1>

<h2>使用const char*和std::string</h2>

<p>const char<em>是C风格的字符串<br/>
std::string是C++风格的字符串，它封装了const char</em><br/>
初始化std::string对象:
<figure class='code'><figcaption><span>初始化std::string对象</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">jack</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;;</span><span class="c1">//直接赋值</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">jack</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span><span class="c1">//通过构造函数初始化&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//创建对象通过静态方法创建，也就是在程序结束的时候，或者超过作用域的时候，自动释放，这就不需要我们来关心对象的释放</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="err">指针类型</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">C</span><span class="o">++</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="err">指针类型</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">namep</span> <span class="o">=</span> <span class="k">new</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">jack</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'><span class="c1">//new 代表创建这个对象是动态创建的，是在程序运行过程中创建的，使用完成之后需要delete删除。</span>
</span><span class='line'><span class="c1">//返回值不是对象本身，而是指向对象的指针</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span><span class='line'><span class="k">delete</span> <span class="n">namep</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">把</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="err">转化为</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span><span class="err">类型</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">C</span><span class="o">++</span> <span class="err">把</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="err">转化为</span><span class="k">const</span> <span class="kt">char</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="err">类型</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">cstring</span> <span class="o">=</span> <span class="n">name</span><span class="p">.</span><span class="n">c_str</span><span class="p">();</span><span class="c1">//静态方法创建</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">cstring</span> <span class="o">=</span> <span class="n">namep</span><span class="o">-&gt;</span><span class="n">c_str</span><span class="p">();</span><span class="c1">//namep为指针</span>
</span></code></pre></td></tr></table></div></figure></p>

<pre><code class="C++">std::string name = "jack";//直接赋值

log("name = %s",name);//直接这样会出现乱码问题，因为log用的不对
//我们可以去看log函数:void CC_DLL log(const char * format, ...) CC_FORMAT_PRINTF(1, 2);类型是const char*

log("name = %s", name.c_str());

std::string *name1 = new std::string("jack");//直接赋值    
log("name1 = %s", name1-&gt;c_str());
</code></pre>

<h2>使用cocos2d::__String</h2>

<p>(注意是两个英文下划线)
源自于Objective-C的NSString<br/>
在coco2d-x里面，凡是有两个下划线开头的，都是过渡Objective-C过来的(内存管理采用引用计数管理)<br/>
现在Cocos2d-x在慢慢去除Objective-C化</p>

<p><img src="http://i.imgur.com/3wvkHJl.png" alt="" /></p>

<p>创建它的主要的静态create函数如下(工厂设计模式)
<code>C++
static __String *create(const std::string &amp;str)
static __String *createWithFormat(const char *format,...)
//createWithFormat-通过创建模板来创建字符串，所以可以通过这个方法把其他类型的转换为字符串
</code></p>

<h3>数据类型之间的转换</h3>

<p>cocos2d::__String 转换为const cahr*类型，这种转换还是用的比较多的<br/>
<code>C++ cocos2d::__String 转换为const cahr*类型
__String *name = __String::create("Hi,Tony");//得到对象指针，因为是通过静态create函数获取的，不需要我们delete
const char *cstring = name-&gt;getCString();
</code></p>

<p>const cahr* 转换为cocos2d::__Stirng类型
<code>C++ const cahr* 转换为cocos2d::__Stirng类型
const char* cstring ="Hi,Tonny";
__String *ns = __String::createWithFormat("%s",cstring);
</code></p>

<p>std::string转换为cocos2d::__String类型
<code>C++ std::string转换为cocos2d::__String类型
std::string string = "Hi,Tonny";
__String *name4 = __String::createWithFormat("%s", string.c_str());//将std::string转换为__String
</code></p>

<p>cocos2d::__String转换为int类型
<code>C++ cocos2d::__String转换为int类型
int num = 123;
__String *ns = __String::createWithFormat("%d",num);//这种方式可以转换很多其他类型
int num2 = ns-&gt;intValue();
</code></p>

<h2>Win32平台下中文乱码问题</h2>

<p>默认情况下Windows中文环境是采用GBK编码，源程序文件HelloWorldScene.cpp编码默认也是GBK，如果源程序代码中有中文，它的字符集是GBK，我们需要将中文符GBK编码转换为UTF-8编码。</p>

<h3>解决方法一</h3>

<p>源文件保存为UTF-8(不带签名的)<br/>
文件->高级保存选项<br/>
<img src="http://i.imgur.com/qS3JBYL.png" alt="" /></p>

<p>存储完之后编译，会出现这样的问题<br/>
<img src="http://i.imgur.com/D7akxGK.png" alt="" /><br/>
这是由于Visual Studio对于Unicode(UTF-8无签名)识别有误，我们一般在后面添加一些英文字符，或者“啊”等特殊的中文字符。</p>

<p>建议不要用这种解决方式</p>

<h3>解决方法二</h3>

<p>转码GBK->UTF-8<br/>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">String</span> <span class="o">*</span><span class="n">cns</span> <span class="o">=</span> <span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">String</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="err">大家好啊</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">nsc</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="n">CC_TARGET_PLATFORM</span> <span class="o">==</span> <span class="n">CC_PLATFORM_WIN32</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">sns</span> <span class="o">=</span> <span class="n">MyUtility</span><span class="o">::</span><span class="n">gbk_2_utf8</span><span class="p">(</span><span class="n">ns</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">getCString</span><span class="p">());</span>
</span><span class='line'><span class="n">cns</span> <span class="o">=</span> <span class="n">sns</span><span class="p">.</span><span class="n">c_str</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="k">else</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">cns</span> <span class="o">=</span> <span class="n">ns</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">getCString</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">endif</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">log</span><span class="p">(</span><span class="s">&quot;%s&quot;</span><span class="p">,</span> <span class="n">cns</span><span class="p">);</span>
</span><span class='line'><span class="k">auto</span> <span class="n">label</span> <span class="o">=</span> <span class="n">LabelTTF</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">cns</span><span class="p">,</span> <span class="s">&quot;Arial&quot;</span><span class="p">,</span> <span class="mi">24</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//在Win32平台下，将GBK编码转换为UTF-8</span>
</span><span class='line'><span class="n">string</span> <span class="n">MyUtility</span><span class="o">::</span><span class="n">gbk_2_utf8</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span> <span class="n">text</span><span class="p">){</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="n">CC_TARGET_PLATFORM</span> <span class="o">==</span> <span class="n">CC_PLATFORM_WIN32</span><span class="p">)</span> <span class="c1">//条件编译&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">//这里面用的一些库只有win32平台才有的一些类库</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//采用Lambda表达式，将string转换成wstring</span>
</span><span class='line'><span class="n">wstring</span> <span class="n">tes</span> <span class="o">=</span> <span class="p">[</span><span class="o">=</span><span class="p">](){</span>
</span><span class='line'><span class="n">setlocale</span><span class="p">(</span><span class="n">LC_ALL</span><span class="p">,</span> <span class="s">&quot;chs&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">_Source</span> <span class="o">=</span> <span class="n">text</span><span class="p">.</span><span class="n">c_str</span><span class="p">();</span>
</span><span class='line'><span class="kt">size_t</span> <span class="n">_Dsize</span> <span class="o">=</span> <span class="n">text</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="kt">wchar_t</span> <span class="o">*</span><span class="n">_Dest</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">wchar_t</span><span class="p">[</span><span class="n">_Dsize</span><span class="p">];</span>
</span><span class='line'><span class="n">mbstowcs</span><span class="p">(</span><span class="n">_Dest</span><span class="p">,</span> <span class="n">_Source</span><span class="p">,</span> <span class="n">_Dsize</span><span class="p">);</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">wstring</span> <span class="n">result</span> <span class="o">=</span> <span class="n">_Dest</span><span class="p">;</span>
</span><span class='line'><span class="k">delete</span><span class="p">[]</span><span class="n">_Dest</span><span class="p">;</span>
</span><span class='line'><span class="n">setlocale</span><span class="p">(</span><span class="n">LC_ALL</span><span class="p">,</span> <span class="s">&quot;C&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}();</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">asciSize</span> <span class="o">=</span> <span class="n">WideCharToMultiByte</span><span class="p">(</span><span class="n">CP_UTF8</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">tes</span><span class="p">.</span><span class="n">c_str</span><span class="p">(),</span> <span class="n">tes</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">asciSize</span> <span class="o">==</span> <span class="n">ERROR_NO_UNICODE_TRANSLATION</span> <span class="o">||</span> <span class="n">asciSize</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'><span class="k">return</span> <span class="n">string</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span><span class="n">resultString</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="p">[</span><span class="n">asciSize</span><span class="p">];</span>
</span><span class='line'><span class="kt">int</span> <span class="n">conveResult</span> <span class="o">=</span> <span class="n">WideCharToMultiByte</span><span class="p">(</span><span class="n">CP_UTF8</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">tes</span><span class="p">.</span><span class="n">c_str</span><span class="p">(),</span> <span class="n">tes</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="n">resultString</span><span class="p">,</span> <span class="n">asciSize</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">conveResult</span> <span class="o">!=</span> <span class="n">asciSize</span><span class="p">){</span>
</span><span class='line'><span class="k">return</span> <span class="n">string</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">string</span> <span class="n">buffer</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">buffer</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">resultString</span><span class="p">,</span><span class="n">asciSize</span><span class="p">);</span>
</span><span class='line'><span class="k">delete</span><span class="p">[]</span> <span class="n">resultString</span><span class="p">;</span>
</span><span class='line'><span class="k">return</span> <span class="n">buffer</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="k">else</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="n">text</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">endif</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="cp">###解决方法三</span>
</span><span class='line'><span class="err">其实还可以用文本文件来解决中文乱码，就是字符串从</span><span class="n">xml</span><span class="err">文件或者</span><span class="n">json</span><span class="err">中读取</span><span class="p">(</span><span class="err">注意，文本需要是</span><span class="n">UTF</span><span class="o">-</span><span class="mi">8</span><span class="err">编码</span><span class="p">)</span><span class="err">，然后传值，这样不会出现乱码问题</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cp">#使用标签</span>
</span><span class='line'><span class="err">可以把标签理解为一个控件</span>
</span><span class='line'>
</span><span class='line'><span class="o">!</span><span class="p">[](</span><span class="nl">http</span><span class="p">:</span><span class="c1">//i.imgur.com/nDlGfb0.png)  </span>
</span><span class='line'>
</span><span class='line'><span class="err">此处的大家好和中间的</span><span class="n">COCOS2DX</span><span class="err">图片就是标签</span>
</span><span class='line'>
</span><span class='line'><span class="err">一种是</span><span class="n">COCOS2DX</span><span class="err">这样的，可以叫美工做张图片然后放上去就可以了，静态的</span>
</span><span class='line'><span class="err">另外一种是</span><span class="s">&quot;大家好&quot;</span><span class="err">这样的动态文字</span>
</span><span class='line'>
</span><span class='line'><span class="cp">##LabelTTF</span>
</span><span class='line'><span class="n">TTF</span><span class="err">基于系统字库</span>
</span><span class='line'>
</span><span class='line'><span class="o">!</span><span class="p">[](</span><span class="nl">http</span><span class="p">:</span><span class="c1">//i.imgur.com/khRSKgT.png)  </span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//静态create函数创建</span>
</span><span class='line'><span class="k">auto</span> <span class="n">label</span> <span class="o">=</span> <span class="n">LabelTTF</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="err">大家好</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Arial</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="mi">24</span><span class="p">);</span><span class="c1">//如乱码请参照前面的解决</span>
</span><span class='line'><span class="c1">//在不同的平台中都是去找Arial这个系统库，然后去显示出来,24为字号&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//指定标签的位置</span>
</span><span class='line'><span class="n">label</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">visibleSize</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">visibleSize</span><span class="p">.</span><span class="n">height</span> <span class="o">-</span> <span class="n">label</span><span class="o">-&gt;</span><span class="n">getContentSize</span><span class="p">().</span><span class="n">height</span><span class="p">));</span>
</span><span class='line'><span class="c1">//记住设置位置和锚点，锚点没写就是默认的0.5,0.5</span>
</span><span class='line'><span class="c1">//把标签加入到层中</span>
</span><span class='line'><span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">label</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span><span class="mi">123</span><span class="p">);</span><span class="c1">//设置tag为123，方便后面获取</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>create函数的完整定义:
<code>C++
/** creates a Label from a fontname, alignment, dimension in points and font size in points
     @since v2.0.1
*/
static LabelTTF * create(const std::string&amp; string, const std::string&amp; fontName, float fontSize,
                    const Size&amp; dimensions = Size::ZERO, TextHAlignment hAlignment = TextHAlignment::CENTER,
                    TextVAlignment vAlignment = TextVAlignment::TOP);
</code>
const std::string&amp; string   要显示的字符串<br/>
const std::string&amp; fontName   字体的名字<br/>
 float fontSize   字体的大小<br/>
const Size&amp; dimensions = Size::ZERO  尺寸-放在这个所定义的矩形的大小里面
TextHAlignment hAlignment = TextHAlignment::CENTER  水平方向的中心对齐<br/>
TextVAlignment vAlignment = TextVAlignment::TOP  垂直方向的顶对齐<br/>
后面三个参数可省略，都会有默认值</p>

<p>在cocos2d X3.01时，认为create已经过时了，但是这种用法还是能用,可能以后会去掉</p>

<h2>LabelAtlas</h2>

<p>基于图集的标签<br/>
<img src="http://i.imgur.com/3q7Fl2d.png" alt="" /></p>

<p>继承了：LabelProtocol-纯虚函数，相当于Java中的接口</p>

<p>显示的abcd的那些字母，放在一张图中了<br/>
<img src="http://i.imgur.com/UVGSL4n.png" alt="" /></p>

<pre><code class="C++ 创建并初始化标签">auto label1 = LabelAtlas::create("HelloWorld", "fonts/tuffy_bold_italic-charmap.png", 48, 66, ' ');
//(字符串，字体文件图集，宽，高，) 路径是 Resources/下  宽高不能随便设置！需要和图片对应的
label1-&gt;setPosition(Vec2(visibleSize.width / 2 - label1-&gt;getContentSize().width / 2, visibleSize.height - label1-getContentSize().height));
this-&gt;addChild(label1, 1);
</code></pre>

<h2>LabelBMFont</h2>

<p>位图字体标签，需要添加字体文件：包括一个图片集(.png)和一个字体坐标文件(.fnt)<br/>
LabelBMFont比LabelTTF快很多。LabelBMFont中的每个字符的宽度是可变的</p>

<p><img src="http://i.imgur.com/FHkqIqZ.png" alt="" /><br/>
.png很容易，叫美工做好图片就行<br/>
.fnt:<br/>
<img src="http://i.imgur.com/XtY5Ixb.png" alt="" /><br/>
这个就不是自己能手写出来的了~~ 那么我们就需要借助工具了<br/>
(大家可以简单的学习一下工具)</p>

<p>创建并初始化标签
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="k">auto</span> <span class="n">label2</span> <span class="o">=</span> <span class="n">LabelBMFont</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">HelloWord</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">fonts</span><span class="o">/</span><span class="n">BMFont</span><span class="p">.</span><span class="n">fnt</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'><span class="n">label2</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="n">visibleSize</span><span class="p">.</span><span class="n">width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="n">visibleSize</span><span class="p">.</span><span class="n">height</span> <span class="o">-</span> <span class="n">label2</span><span class="o">-&gt;</span><span class="n">getContentSize</span><span class="p">().</span><span class="n">height</span><span class="p">));</span>
</span><span class='line'><span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">label2</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">效果：</span>
</span><span class='line'><span class="o">!</span><span class="p">[](</span><span class="nl">http</span><span class="p">:</span><span class="c1">//i.imgur.com/Sf2epLr.png)  </span>
</span><span class='line'>
</span><span class='line'><span class="cp">##Cocos2d-x 3.x标签类Label</span>
</span><span class='line'><span class="n">Cocos2d</span><span class="o">-</span><span class="n">x</span> <span class="mf">3.</span><span class="n">x</span><span class="err">后推出了新的标签类</span><span class="n">Label</span><span class="err">，这种标签通过使用</span><span class="n">FreeType</span><span class="p">(</span><span class="err">开源字体引擎</span><span class="p">)</span><span class="err">来使它在不同的平台上有相同的视觉效果。</span>
</span><span class='line'><span class="err">由于使用更快的缓存代理，它的渲染也将更加快速。</span><span class="n">Label</span><span class="err">还提供了描边和阴影等特效。</span>
</span><span class='line'><span class="o">!</span><span class="p">[](</span><span class="nl">http</span><span class="p">:</span><span class="c1">//i.imgur.com/HKQ3iDb.png)  </span>
</span><span class='line'>
</span><span class='line'><span class="err">前面三个标签在</span><span class="mf">3.0</span><span class="err">或者说</span><span class="mf">3.1</span><span class="err">之后已经过时了，但是还可以用</span><span class="p">(</span><span class="err">不推荐使用了</span><span class="p">)</span><span class="err">。</span>
</span><span class='line'><span class="err">推荐使用该标签类</span><span class="n">Label</span><span class="err">，该类替换了前面的三个标签类</span>
</span><span class='line'>
</span><span class='line'><span class="err">创建</span><span class="n">Label</span><span class="err">类静态</span><span class="n">create</span><span class="err">函数常用的有如下几个：</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">static</span> <span class="n">Label</span><span class="o">*</span> <span class="n">createWithSystemFont</span><span class="p">(</span><span class="n">conststd</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">text</span><span class="p">,</span>   <span class="c1">//是要显示的文字                           &lt;br/&gt;</span>
</span><span class='line'><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">font</span><span class="p">,</span>                                     <span class="c1">//系统字体名&lt;br/&gt;</span>
</span><span class='line'><span class="kt">float</span> <span class="n">fontSize</span><span class="p">,</span>                                             <span class="c1">//字体的大小&lt;br/&gt;</span>
</span><span class='line'><span class="k">const</span> <span class="n">Size</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">dimensions</span> <span class="o">=</span> <span class="n">Size</span><span class="o">::</span><span class="n">ZERO</span><span class="p">,</span>                        <span class="c1">//在屏幕上占用的区域大小,可省略&lt;br/&gt;</span>
</span><span class='line'><span class="n">TextHAlignment</span>  <span class="n">hAlignment</span> <span class="o">=</span> <span class="n">TextHAlignment</span><span class="o">::</span><span class="n">LEFT</span><span class="p">,</span>          <span class="c1">//文字横向对齐方式,可省略&lt;br/&gt;</span>
</span><span class='line'><span class="n">TextVAlignment</span>  <span class="n">vAlignment</span> <span class="o">=</span> <span class="n">TextVAlignment</span><span class="o">::</span><span class="n">TOP</span><span class="p">)</span>           <span class="c1">//文字纵向对齐方式,可省略&lt;br/&gt;</span>
</span><span class='line'><span class="err">显示的是系统字体，指的是运行环境下的系统，而不是编译系统，相当于原来的</span><span class="n">LabelTTF</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">static</span> <span class="n">Label</span><span class="o">*</span> <span class="n">createWithTTF</span><span class="p">(</span><span class="n">conststd</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">text</span><span class="p">,</span>
</span><span class='line'><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>  <span class="n">fontFile</span><span class="p">,</span>                <span class="c1">//字体文件&lt;br/&gt;</span>
</span><span class='line'><span class="kt">float</span> <span class="n">fontSize</span><span class="p">,</span>                                  <span class="c1">//字体的大小&lt;br/&gt;</span>
</span><span class='line'><span class="k">const</span> <span class="n">Size</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>  <span class="n">dimensions</span> <span class="o">=</span> <span class="n">Size</span><span class="o">::</span><span class="n">ZERO</span><span class="p">,</span>                 <span class="c1">//可省略&lt;br/&gt;</span>
</span><span class='line'><span class="n">TextHAlignment</span>          <span class="n">hAlignment</span> <span class="o">=</span> <span class="n">TextHAlignment</span><span class="o">::</span><span class="n">LEFT</span><span class="p">,</span>    <span class="c1">//可省略&lt;br/&gt;</span>
</span><span class='line'><span class="n">TextVAlignment</span>           <span class="n">vAlignment</span> <span class="o">=</span> <span class="n">TextVAlignment</span><span class="o">::</span><span class="n">TOP</span><span class="p">)</span>      <span class="c1">//可省略&lt;br/&gt;</span>
</span><span class='line'><span class="n">createWithTTF</span><span class="err">和</span><span class="n">LabelTTF</span><span class="err">不一样了，也就是</span><span class="n">fontFile</span><span class="err">指定的不是系统字体，而是字体文件，也就是字体文件路径</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">static</span> <span class="n">Label</span><span class="o">*</span> <span class="n">createWithTTF</span><span class="p">(</span><span class="n">constTTFConfig</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">ttfConfig</span><span class="p">,</span> <span class="c1">//配置参数 constTTFConfig-结构体</span>
</span><span class='line'><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">text</span><span class="p">,</span>
</span><span class='line'><span class="n">TextHAlignment</span> <span class="n">alignment</span> <span class="o">=</span> <span class="n">TextHAlignment</span><span class="o">::</span><span class="n">LEFT</span><span class="p">,</span>
</span><span class='line'><span class="kt">int</span> <span class="n">maxLineWidth</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">static</span> <span class="n">Label</span><span class="o">*</span> <span class="n">createWithBMFont</span><span class="p">(</span><span class="n">conststd</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">bmfontFilePath</span><span class="p">,</span>      <span class="c1">//位图字体文件&lt;br/&gt;</span>
</span><span class='line'><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>  <span class="n">text</span><span class="p">,</span>                                         <span class="c1">//是要显示的文字      &lt;br/&gt;</span>
</span><span class='line'><span class="k">const</span> <span class="n">TextHAlignment</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">alignment</span> <span class="o">=</span> <span class="n">TextHAlignment</span><span class="o">::</span><span class="n">LEFT</span><span class="p">,</span>          <span class="c1">//可省略&lt;br/&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">maxLineWidth</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>                                              <span class="c1">//可省略&lt;br/&gt;</span>
</span><span class='line'><span class="k">const</span> <span class="n">Point</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>  <span class="n">imageOffset</span> <span class="o">=</span> <span class="n">Point</span><span class="o">::</span><span class="n">ZERO</span> <span class="p">)</span>                               <span class="c1">//可省略&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">使用实例</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">auto</span> <span class="n">label1</span> <span class="o">=</span> <span class="n">Label</span><span class="o">::</span><span class="n">createWithSystemFont</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Hello</span> <span class="n">World1</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Arial</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="mi">36</span><span class="p">);</span>
</span><span class='line'><span class="n">label1</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">visibleSize</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">visibleSize</span><span class="p">.</span><span class="n">height</span> <span class="o">-</span> <span class="mi">100</span><span class="p">));</span>
</span><span class='line'><span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">label1</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span><span class="c1">//Win32的字体库可以在控制面板中找到&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">auto</span> <span class="n">label2</span> <span class="o">=</span> <span class="n">Label</span><span class="o">::</span><span class="n">createWithTTF</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Hello</span> <span class="n">World2</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">fonts</span><span class="o">/</span><span class="n">Marker</span> <span class="n">Felt</span><span class="p">.</span><span class="n">ttf</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="mi">36</span><span class="p">);</span>
</span><span class='line'><span class="n">label2</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">visibleSize</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">visibleSize</span><span class="p">.</span><span class="n">height</span> <span class="o">-</span> <span class="mi">200</span><span class="p">));</span>
</span><span class='line'><span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">label2</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">auto</span> <span class="n">label3</span> <span class="o">=</span> <span class="n">Label</span><span class="o">::</span><span class="n">createWithBMFont</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">fonts</span><span class="o">/</span><span class="n">BMFont</span><span class="p">.</span><span class="n">fnt</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Hello</span> <span class="n">World3</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'><span class="n">label3</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">visibleSize</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">visibleSize</span><span class="p">.</span><span class="n">height</span> <span class="o">-</span> <span class="mi">300</span><span class="p">));</span>
</span><span class='line'><span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">label3</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">TTFConfig</span> <span class="n">ttfConfig</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">fonts</span><span class="o">/</span><span class="n">Marker</span> <span class="n">Felt</span><span class="p">.</span><span class="n">ttf</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="mi">36</span><span class="p">,</span><span class="n">GlyphCollection</span><span class="o">::</span><span class="n">DYNAMIC</span><span class="p">);</span>
</span><span class='line'><span class="k">auto</span> <span class="n">label4</span> <span class="o">=</span> <span class="n">Label</span><span class="o">::</span><span class="n">createWithTTF</span><span class="p">(</span><span class="n">ttfConfig</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Hello</span> <span class="n">World4</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'><span class="n">label4</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">visibleSize</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">visibleSize</span><span class="p">.</span><span class="n">height</span> <span class="o">-</span> <span class="mi">400</span><span class="p">));</span>
</span><span class='line'><span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">label4</span> <span class="p">,</span> <span class="mi">1</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">ttfConfig</span><span class="p">.</span><span class="n">outlineSize</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'><span class="k">auto</span> <span class="n">label5</span> <span class="o">=</span> <span class="n">Label</span><span class="o">::</span><span class="n">createWithTTF</span><span class="p">(</span><span class="n">ttfConfig</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Hello</span> <span class="n">World5</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'><span class="c1">//ttfConfig-结构体配置，能配置更多的特效，比如描边，阴影，闪烁的文字等</span>
</span><span class='line'><span class="c1">//只能是TTF文件的，才能使用这些特效</span>
</span><span class='line'><span class="n">label5</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">visibleSize</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">visibleSize</span><span class="p">.</span><span class="n">height</span> <span class="o">-</span> <span class="mi">500</span><span class="p">));</span>
</span><span class='line'><span class="n">label5</span><span class="o">-&gt;</span><span class="n">enableShadow</span><span class="p">(</span><span class="n">Color4B</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span><span class="mi">255</span><span class="p">,</span><span class="mi">255</span><span class="p">,</span><span class="mi">128</span><span class="p">),</span> <span class="n">Size</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="o">-</span><span class="mi">4</span><span class="p">));</span><span class="c1">//设置阴影，阴影的颜色，阴影的大小</span>
</span><span class='line'><span class="n">label5</span><span class="o">-&gt;</span><span class="n">setColor</span><span class="p">(</span><span class="n">Color3B</span><span class="o">::</span><span class="n">RED</span><span class="p">);</span><span class="c1">//设置颜色</span>
</span><span class='line'><span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">label5</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>标签中文乱码问题</h2>

<p>解决方法一:保存文件为Unicode(UTF-8无签名)<br/>
(不推荐使用)</p>

<p>解决方法二:写工具类，将字符串编码转换为UTF-8<br/>
参考前面的Win32平台下中文乱码问题 <br/>
<img src="http://i.imgur.com/fGs4T2L.png" alt="" /></p>

<h1>源代码下载地址：</h1>

<blockquote cite='陈浩翔'>
GITHUB源码下载地址:<strong>【<a href='https://github.com/chenhaoxiang/cocos2d-x/tree/master/20170627/code' target='_blank'>点我进行下载</a>】</strong>
</blockquote>


<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【Cocos2d-x】开发基础-Cocos2d-x坐标系]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/06/14/cocos2dx-coordinate-system/"/>
    <updated>2017-06-14T13:38:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/06/14/cocos2dx-coordinate-system</id>
    <content type="html"><![CDATA[<p>本篇博客讲解:<br/>
1.UI坐标<br/>
2.OpenGL坐标<br/>
3.世界坐标和模型坐标<br/>
4.实例：世界坐标转换为模型坐标<br/>
5.实例：模型坐标转换为世界坐标</p>

<!-- more -->


<hr />

<h1>UI坐标和OpenGL坐标</h1>

<p><img src="http://i.imgur.com/tXyhhzQ.png" alt="" /><br/>
UI坐标就是Android和iOS等应用开发的时候使用的二维坐标系。它的坐标原点是在左上角的。<br/>
UI坐标也叫视图坐标，它是和我们的OpenGL坐标是不一样的。OpenGL坐标是基于左下角的
<img src="http://i.imgur.com/698Z9ws.png" alt="" /> <br/>
OpenGL坐标是一种3D坐标，OpenGL是一个渲染的标准，渲染标准的坐标系是一种3D坐标系。<br/>
所以OpenGL主要是给3D世界来做渲染，但是cocos2d觉得OpenGL速度快，所以就把OpenGL拿过来了做为一个引擎，这样的话，cocos2d就使用OpenGL坐标作为默认坐标<br/>
OpenGL坐标在二维世界里，并没有什么太大的问题，不过就是Z轴基本不用。但是有时候也会用到，就是在绘制的顺序的时候，就需要Z轴了。</p>

<p>比如绘制两个精灵在一个位置，精灵之间会有遮挡的问题，这个就和z轴的绘制顺序有关了。</p>

<h2>从UI坐标到OpenGL坐标的转换</h2>

<p>其实就是左上角，左下角之间的转换。<br/>
屏幕的高度 - OpenGL坐标 = UI坐标<br/>
屏幕的高度 - UI坐标 = OpenGL坐标<br/>
<code>
Vec2 touchLocation = touch-&gt;getLocationInView(); //获取触摸点的位置，UI坐标系里的坐标
Vec2 touchLocation2 = Director::getInstance()-&gt;convertToGL(touchLocation);
</code>
touch是触摸点(Touch)对象</p>

<h2>右手坐标系和左手坐标系</h2>

<p><img src="http://i.imgur.com/kCbPAIl.png" alt="" /><br/>
在3D坐标系里，有两种坐标。一种是Z轴指向外面的坐标，一种是Z轴指向内部的坐标，如上图</p>

<p><img src="http://i.imgur.com/GQ9rtZL.png" alt="" /><br/>
指向外面的坐标称为右手坐标系<br/>
指向内部的坐标称为左手坐标系<br/>
大家用左右手演示一下就明白了。
注意大拇指指向X轴正方向，食指向上，中指弯曲<br/>
OpenGL属于右手坐标！<br/>
微软平台的Direct3D是左手坐标！<br/>
这两个是类似的技术</p>

<h1>世界坐标和模型坐标</h1>

<p>由于OpenGL坐标有可以分为：世界坐标和模型坐标，所以Cocos2d-x的坐标也有世界坐标和模型坐标。</p>

<p>举一个例子：<br/>
比如你去问路，可能有人会告诉你先向南走1000米，再向东走500米、<br/>
也可能会有人告诉你，先向右走1000米，再向左走500米、</p>

<p>世界坐标:<br/>
先向南走1000米，再向东走500米、也就是说以地球为参照物<br/>
模型坐标(也叫本地坐标):<br/>
先向右走1000米，再向左走500米、这里是以自身为参照物</p>

<p>所谓模型是什么，就是这个物体，这个精灵，也就是称为模型。<br/>
虽然cocos2d画的是2D对象，但是实际上是以3D技术来绘制的，因此还是叫模型坐标</p>

<p>世界坐标的整个坐标的参考系在第三方！也就是不是本身</p>

<p>比如：<br/>
<img src="http://i.imgur.com/5q7jsI6.png" alt="" /><br/>
看上图，坐标系上有ABC三个点，C是坐标原点，A参考C，B也参考C，那么，C的坐标就是A和B坐标的坐标系<br/>
所以我们把以C为参考的坐标(也就是以第三方为参考系的坐标)称为世界坐标<br/>
所以A的坐标是(5,5),B的坐标是(6,4)</p>

<p>采用A的模型坐标来描述B的位置:<br/>
我们也可以这么说，B相对于A的坐标是(1,-1),这样B就把A作为它的参考系，A就是模型坐标了！<br/>
也就是B在A这个模型坐标里所在的位置是(1,-1)</p>

<h2>世界坐标与模型坐标互相转换</h2>

<p>通过Node对象如下函数实现：<br/>
<figure class='code'><figcaption><span>世界坐标与模型坐标互相转换</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">Vec2</span> <span class="n">convertToNodeSpace</span> <span class="p">(</span> <span class="k">const</span> <span class="n">Vec2</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">worldPoint</span> <span class="p">)</span> <span class="c1">//将世界坐标转换为模型坐标。坐标原点看成模型(对象，精灵)的左下角所在</span>
</span><span class='line'><span class="n">Vec2</span> <span class="n">convertToNodeSpaceAR</span> <span class="p">(</span> <span class="k">const</span> <span class="n">Vec2</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">worldPoint</span> <span class="p">)</span> <span class="c1">//将世界坐标转换为模型坐标。AR表示相对于锚点。&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Vec2</span> <span class="n">convertTouchToNodeSpace</span> <span class="p">(</span> <span class="n">Touch</span> <span class="o">*</span> <span class="n">touch</span> <span class="p">)</span> <span class="c1">//将世界坐标中触摸点转换为模型坐标。</span>
</span><span class='line'><span class="n">Vec2</span> <span class="n">convertTouchToNodeSpaceAR</span> <span class="p">(</span> <span class="n">Touch</span> <span class="o">*</span> <span class="n">touch</span> <span class="p">)</span> <span class="c1">//将世界坐标中触摸点转换为模型坐标。AR表示相对于锚点。</span>
</span><span class='line'><span class="c1">//凡是后面是ToNodeSpace的这个函数，是从世界坐标到模型坐标的转换  Node就是节点，也就是我们说的模型</span>
</span><span class='line'><span class="c1">//所有带有AR的，表示相对于锚点，也就是坐标原点看成模型(对象，精灵)的锚点所在&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Vec2</span> <span class="n">convertToWorldSpace</span> <span class="p">(</span> <span class="k">const</span> <span class="n">Vec2</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">nodePoint</span> <span class="p">)</span> <span class="c1">//将模型坐标中触摸点转换为世界坐标。</span>
</span><span class='line'><span class="n">Vec2</span> <span class="n">convertToWorldSpaceAR</span> <span class="p">(</span> <span class="k">const</span> <span class="n">Vec2</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">nodePoint</span> <span class="p">)</span> <span class="c1">//将模型坐标中触摸点转换为世界坐标。AR表示相对于锚点。</span>
</span></code></pre></td></tr></table></div></figure></p>

<h1>实例：世界坐标转换为模型坐标</h1>

<p><img src="http://i.imgur.com/3yIjKwO.png" alt="" />  <br/>
Node1和Node2的像素是(300,100)<br/>
所以很容易得出:<br/>
A(100,400)<br/>
C(200,300)
C相对于A:(100,-100)</p>

<p>B(400,500)
C相对于B:(-200,-200)</p>

<p>Node2的世界坐标转换为相对于Node1的模型坐标:
<figure class='code'><figcaption><span>世界坐标与模型坐标互相转换</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="c1">//将Node2的位置转换为相对于Node1的模型坐标，不带AR的，表示相对于Node1的坐标原点,也就是A点</span>
</span><span class='line'><span class="n">Vec2</span> <span class="n">point1</span> <span class="o">=</span> <span class="n">node1</span><span class="o">-&gt;</span><span class="n">convertToNodeSpace</span><span class="p">(</span><span class="n">node2</span><span class="o">-&gt;</span><span class="n">getPosition</span><span class="p">());</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//将Node2的位置转换为相对于Node1的模型坐标，不带AR的，表示相对于Node1的锚点,也就是B点</span>
</span><span class='line'><span class="n">Vec2</span> <span class="n">point2</span> <span class="o">=</span> <span class="n">node1</span><span class="o">-&gt;</span><span class="n">convertToNodeSpaceAR</span><span class="p">(</span><span class="n">node2</span><span class="o">-&gt;</span><span class="n">getPosition</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>所以得出的结果就是:
<figure class='code'><figcaption><span>世界坐标与模型坐标互相转换</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">log</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Node2</span> <span class="n">NodeSpace</span> <span class="o">=</span> <span class="p">(</span><span class="o">%</span><span class="n">f</span><span class="p">,</span><span class="o">%</span><span class="n">f</span><span class="p">)</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="n">point1</span><span class="p">.</span><span class="n">x</span><span class="p">,</span><span class="n">point1</span><span class="p">.</span><span class="n">y</span><span class="p">);</span>
</span><span class='line'><span class="c1">//Node2 NodeSpace = (100.000000,-100.000000)&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">log</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Node2</span> <span class="n">NodeSpaceAR</span> <span class="o">=</span> <span class="p">(</span><span class="o">%</span><span class="n">f</span><span class="p">,</span><span class="o">%</span><span class="n">f</span><span class="p">)</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">point2</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">point2</span><span class="p">.</span><span class="n">y</span><span class="p">);</span>
</span><span class='line'><span class="c1">//Node2 NodeSpaceAR = (-200.000000,-200.000000)</span>
</span></code></pre></td></tr></table></div></figure></p>

<pre><code>bool HelloWorld::init()
{
    // 1. super init first
    if ( !Layer::init() )
    {
        return false;
    }

    auto node1 = Sprite::create("Node1.png");//Sprite是精灵
    node1-&gt;setPosition(Vec2(400,500));//设置位置
    node1-&gt;setAnchorPoint(Vec2(1.0, 1.0));//设置锚点

    this-&gt;addChild(node1,0);//层添加精灵

    auto node2 = Sprite::create("Node2.png");//Sprite是精灵
    node2-&gt;setPosition(Vec2(200, 300));//设置位置
    node2-&gt;setAnchorPoint(Vec2(0.5, 0.5));//设置锚点
    this-&gt;addChild(node2, 0);

    Vec2 point1 = node1-&gt;convertToNodeSpace(node2-&gt;getPosition());//将Node2的位置转换为相对于Node1的模型坐标，不带AR的，表示相对于Node1的坐标原点

    Vec2 point2 = node1-&gt;convertToNodeSpaceAR(node2-&gt;getPosition());

    log("Node2 NodeSpace = (%f,%f)",point1.x,point1.y);//Node2 NodeSpace = (100.000000,-100.000000)
    log("Node2 NodeSpaceAR = (%f,%f)", point2.x, point2.y);//Node2 NodeSpaceAR = (-200.000000,-200.000000)

    return true;
}
</code></pre>

<p><img src="http://i.imgur.com/IDhDV2w.png" alt="" /></p>

<h1>源代码下载地址：</h1>

<blockquote cite='陈浩翔'>
GITHUB源码下载地址:<strong>【<a href='https://github.com/chenhaoxiang/cocos2d-x/tree/master/20170614/code/OpenGLcoordinates' target='_blank'>点我进行下载</a>】</strong></p>
</blockquote>


<h1>实例：模型坐标转换为世界坐标</h1>

<p><img src="http://i.imgur.com/SOqOMNO.png" alt="" /></p>

<p>在游戏场景中有两个Node对象，其中Node1的坐标是(400,500),大小是300<em>100像素<br/>
Node2是放置在Node1中的，它对于Node1的模型坐标是(0,0),大小是150</em>150像素</p>

<p>Node2相对于Node1的模型坐标转换的世界坐标:<br/>
<figure class='code'><figcaption><span>世界坐标与模型坐标互相转换</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">Vec2</span> <span class="n">point1</span> <span class="o">=</span> <span class="n">node1</span><span class="o">-&gt;</span><span class="n">convertToWorldSpace</span><span class="p">(</span><span class="n">node2</span><span class="o">-&gt;</span><span class="n">getPosition</span><span class="p">());</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">blockquote</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//node2-&gt;getPosition()为Node2在Node1中的模型坐标(相对于Node1的坐标原点得到的坐标) -&gt;(convertToWorldSpace)-&gt;转换为世界坐标，Node2在Node1中的坐标实际上是(0,0),在世界坐标中，Node2的坐标其实就是A点的坐标</span>
</span></code></pre></td></tr></table></div></figure>
(150,50)为Node2的宽高<br/>
A点的坐标 = (400,500) - (150,50) = (250,450)</p></blockquote>

<p>上面的是没加上锚点的，如果加上锚点，是相对于锚点的坐标<br/>
加上锚点之后，Node1的锚点是B点，所以Node2相对于Node1的锚点的坐标是:</p>

<pre><code>Vec2 point2 = node1-&gt;convertToWorldSpaceAR(node2-&gt;getPosition());
&gt;//node2-&gt;getPosition()为Node2在Node1中的模型坐标(相对于再加上Node1的锚点的坐标得到的坐标) -&gt;(convertToWorldSpaceAR)-&gt;转换为世界坐标
</code></pre>

<p>Vec2 point2 得到的其实就是B点的坐标，也就是A点坐标，加上Node1锚点的坐标相对于A点的坐标。也就是(250,450)+(150,50) = (400,500)<br/>
也就是我们说的Node2的世界坐标！</p>

<pre><code>bool HelloWorld::init()
{
    // 1. super init first
    if (!Layer::init())
    {
        return false;
    }

    auto node1 = Sprite::create("Node1.png");//Sprite是精灵
    node1-&gt;setPosition(Vec2(400, 500));//设置位置
    node1-&gt;setAnchorPoint(Vec2(0.5, 0.5));//设置锚点

    this-&gt;addChild(node1, 0);//层添加精灵

    auto node2 = Sprite::create("Node2.png");//Sprite是精灵
    node2-&gt;setPosition(Vec2(0.0, 0.0));//设置位置
    node2-&gt;setAnchorPoint(Vec2(0.0, 0.0));//设置锚点
    node1-&gt;addChild(node2, 0);//把Node2放到Node1

    //将Node2的位置转换为相对于Node1的模型坐标，不带AR的，表示相对于Node1的坐标原点
    Vec2 point1 = node1-&gt;convertToWorldSpace(node2-&gt;getPosition());
    Vec2 point2 = node1-&gt;convertToWorldSpaceAR(node2-&gt;getPosition());

    log("Node2 WorldSpace = (%f,%f)", point1.x, point1.y);//Node2 WorldSpace = (250.000000,450.000000)
    log("Node2 WorldSpaceAR = (%f,%f)", point2.x, point2.y);//Node2 WorldSpaceAR = (400.000000,500.000000)

    return true;
}
</code></pre>

<pre><code class="C++ node1模型坐标来设置位置">node2-&gt;setPosition(Vec2(0.0, 0.0));//设置位置
node2-&gt;setAnchorPoint(Vec2(0.0, 0.0));//设置锚点
node1-&gt;addChild(node2, 0);//把Node2放到Node1
</code></pre>

<p>上面代码是使用node1模型坐标来设置位置的<br/>
也可以用世界坐标描述
<code>C++ 世界坐标描述
node2-&gt;setPosition(Vec2(250, 450));
node2-&gt;setAnchorPoint(Vec2(0.0, 0.0));
this-&gt;addChild(node2, 0);
</code></p>

<h1>源代码下载地址：</h1>

<blockquote cite='陈浩翔'>
GITHUB源码下载地址:<strong>【<a href='https://github.com/chenhaoxiang/cocos2d-x/tree/master/20170614/code/OpenGLcoordinates2' target='_blank'>点我进行下载</a>】</strong></p>
</blockquote>


<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
</feed>
