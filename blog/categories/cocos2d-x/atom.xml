<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Cocos2d-x | 谙忆-人生之旅]]></title>
  <link href="http://chenhaoxiang.github.io/blog/categories/cocos2d-x/atom.xml" rel="self"/>
  <link href="http://chenhaoxiang.github.io/"/>
  <updated>2017-06-30T22:12:34+08:00</updated>
  <id>http://chenhaoxiang.github.io/</id>
  <author>
    <name><![CDATA[陈浩翔]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[【Cocos2d-x】开发基础-Node与Node层级架构]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/06/11/node-hierarchical-structure/"/>
    <updated>2017-06-11T13:38:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/06/11/node-hierarchical-structure</id>
    <content type="html"><![CDATA[<p>本篇博客讲解:<br/>
1.Node与Node层级架构<br/>
2.Node中重要的操作<br/>
3.Node中重要的属性<br/>
4.游戏循环与调度</p>

<!-- more -->


<hr />

<h1>Node与Node层级架构</h1>

<p>首先来看一张图<br/>
<img src="http://i.imgur.com/kGQ1oxN.png" alt="" /><br/>
这个图反应了Node与Node的层级架构<br/>
所谓层级架构其实就是树形结构/层次结构，从图上可以看出来，树的根是Scene(场景)，然后是层，层里面又包含了精灵，菜单，粒子系统，瓦片地图<br/>
所有这些元素，都有一个共同的父类，就是Node</p>

<p>这个树形结构，其实就是一种包含关系<br/>
<img src="http://i.imgur.com/wFK51kL.png" alt="" /><br/>
这2个文件共同定义了一个HelloWorld的层<br/>
class HelloWorld : public cocos2d::Layer<br/>
我们自己自定义了一个类HelloWorld继承了Layer，层最后要放到场景里去<br/>
<code>c++
Scene* HelloWorld::createScene()
{
    // 创建场景对象
    auto scene = Scene::create();
    // 创建层对象
    auto layer = HelloWorld::create();
    // 把层放到场景里
    scene-&gt;addChild(layer);
    // 返回这个场景
    return scene;
}
</code>
创建场景以及HelloWord这个层，然后把层放到场景里<br/>
通过addChild这个方法，把子节点加到父节点里面去<br/>
以此类推，可以把Layer添加到Scene里，也可以这样把精灵，菜单等添加到层里<br/>
<code>c++
this-&gt;addChild(menu, 1);//把菜单放到当前层
//把标签加入到层中
this-&gt;addChild(label, 1);
//把图片精灵加入到层中
this-&gt;addChild(sprite, 0);
</code>
代码在HelloWord.cpp中可以看到<br/>
所以，最开始的图上的层次结构，是通过add的这个方法添加上来的<br/>
既然有添加，那么就有移除方法，后面再介绍。<br/>
主要是树形结构，需要注意的就是添加的顺序和个数<br/>
一般来说，一个场景会有多个层，我们建立的HelloWord实例中，场景和层是一对一的关系<br/>
也就是场景中只放了一个层。实际上场景与层是一对多的关系<br/>
为了减少绘制的次数，不要建立太多的层，那样很消耗cpu</p>

<p>层与精灵也是一对多的关系，然后层与菜单，粒子系统，瓦片地图都是一对多的关系<br/>
菜单与菜单项是一对多的关系，一个菜单里会有多个菜单项<br/>
当cocos2d启动一个场景的时候，场景就会加载层，层会加载菜单等等，菜单会加载菜单项。就是这样一种树形结构</p>

<h1>Node中重要的操作</h1>

<p>由于场景、层、菜单、精灵&hellip;都是继承的Node，所以它们有一些共同的属性和方法</p>

<h2>创建节点</h2>

<pre><code class="c++ 创建节点">Node* childNode = Node::create()
</code></pre>

<h2>增加新的子节点</h2>

<pre><code class="c++ 增加新的子节点">node-&gt;addChild(childNode,0,123)
</code></pre>

<p>第一个参数是添加的节点；第二个参数是添加的Node的z轴的顺序(添加节点的时候会有顺序的，相当于绘制的时候的先后顺序)；第三个参数是Tag/标签，可以理解成id，通过这个tag来操作node对象    <br/>
<img src="http://i.imgur.com/eae63yS.png" alt="" /><br/>
附带第二个参数的英文介绍：<br/>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>LocalZOrder is the &lsquo;key&rsquo; used to sort the node relative to its siblings.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;The Node&rsquo;s parent will sort all its children based on the LocalZOrder value. If two nodes have the same LocalZOrder, then the node that was added first to the children&rsquo;s array will be in front of the other node in the array.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Also, the Scene Graph is traversed using the &ldquo;In-Order&rdquo; tree traversal algorithm ( &lt;a href="http://en.wikipedia.org/wiki/Tree_traversal#In-order"&gt;http://en.wikipedia.org/wiki/Tree_traversal#In-order&lt;/a&gt; ) And Nodes that have LocalZOrder values &lt; 0 are the &ldquo;left&rdquo; subtree While Nodes with LocalZOrder &gt;=0 are the &ldquo;right&rdquo; subtree.
</span><span class='line'>&lt;code&gt;
</span><span class='line'>addChild有4个方法
</span><span class='line'>&lt;/code&gt;c++
</span><span class='line'>virtual void addChild   ( Node * child)   &lt;br/&gt;
</span><span class='line'>virtual void addChild   ( Node * child,int localZOrder)   &lt;br/&gt;
</span><span class='line'>virtual void addChild   ( Node * child,int localZOrder,int tag)
</span><span class='line'>virtual void addChild   ( Node * child,int localZOrder,const std::string &amp; name)  &lt;br/&gt;</span></code></pre></td></tr></table></div></figure></p>

<h2>查找子节点</h2>

<pre><code class="c++ 通过Tag查找子节点">Node* node = node-&gt;getChildByTag(123)
</code></pre>

<h2>删除子节点</h2>

<pre><code class="c++ 删除子节点，并停止所有该节点上的一切动作">node-&gt;removeChildByTag(123,true)//第二个参数表示是否在内存中清除这个对象
</code></pre>

<pre><code class="c++ 通过Node指针删除节点">node-&gt;removeChild(childNode)//直接删除节点
</code></pre>

<pre><code class="c++ 删除所有子节点，并停止这些子节点上的一切动作">node-&gt;removeAllChildrenWithCleanup(true) //true-清除内存
</code></pre>

<pre><code class="c++ 从父节点Node中删除当前的节点对象，并停止所有该节点上的一切动作">node-&gt;removeFromParentAndCleanup(true) //true-清除内存
</code></pre>

<h1>Node中重要的属性</h1>

<p>Node两个非常重要的属性:<br/>
position和anchorPoint<br/>
position是指的位置，anchorPoint是指的锚点<br/>
位置(坐标)很好理解，就是比如放在(5,5),x=5,y=5.但是精灵图片是有大小的，这个时候就需要锚点了。  <br/>
我们用图来理解吧
1.anchorPoint为(0.5,0.5)，这个是默认值<br/>
<img src="http://i.imgur.com/P68puku.png" alt="" /><br/>
第一个参数0.5，是锚点距离左边边线的距离和图片整个的宽度的比例，也就是1/2<br/>
第二个参数0.5，是锚点距离底边高度和整个高度的比值，也就是1/2</p>

<p>2.anchorPoint为(0,0)，也就是精灵图片的左下角<br/>
<img src="http://i.imgur.com/DqOBDal.png" alt="" /></p>

<p>3.anchorPoint为(1.0,1.0)，也就是精灵图片的右上角  <br/>
<img src="http://i.imgur.com/hHux4IT.png" alt="" /></p>

<p>4.anchorPoint为(0.66,0.5)，这个具有普遍性<br/>
<img src="http://i.imgur.com/4ZzjNcC.png" alt="" /></p>

<h1>游戏循环与调度</h1>

<p>每一个游戏程序都有一个循环在不断运行，它是有导演对象来管理和维护。<br/>
如果需要场景中的精灵运动起来，我们可以在游戏循环中使用定时器（Scheduler）对精灵等对象的运行进行调度。<br/>
因为Node类封装了Scheduler类，所以我们也可以直接使用Node中调用函数。<br/>
Node中调用函数主要有：<br/>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void scheduleUpdate ( void )//开始游戏调度，每个Node对象只要调用该函数，那么这个Node对象就会定时地每帧回调用一次自己的update(float dt)函数，每帧调用一次update函数！这是固定的时间和函数&lt;br/&gt;
</span><span class='line'>//下面这个函数更加个性化，可以自定义回调函数和时间
</span><span class='line'>void schedule ( SEL_SCHEDULE selector,  float  interval )//与scheduleUpdate函数功能一样，不同的是我们可以指定回调函数（通过selector指定），也可以根据需要指定回调时间间隔
</span><span class='line'>//一旦调度开始，就会不断循环&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;void unscheduleUpdate ( void )//停止update(float dt)函数调度  和scheduleUpdate对应
</span><span class='line'>void unschedule ( SEL_SCHEDULE selector )//可以指定具体函数停止调度  和schedule对应&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;void unscheduleAllSelectors ( void )//可以停止所有调度</span></code></pre></td></tr></table></div></figure></p>

<h1>源代码下载地址：</h1>

<blockquote cite='陈浩翔'>
GITHUB源码下载地址:<strong>【<a href='https://github.com/chenhaoxiang/cocos2d-x/tree/master/20170611/HelloWorld' target='_blank'>点我进行下载</a>】</strong></p>
</blockquote>


<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【Cocos2d-x】开发基础-Cocos2d-x核心概念]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/06/10/core-concept/"/>
    <updated>2017-06-10T13:38:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/06/10/core-concept</id>
    <content type="html"><![CDATA[<p>本篇博客讲解:<br/>
1.Cocos2d-x的核心概念</p>

<!-- more -->


<hr />

<h1>导演</h1>

<p>导演类Director(v3.0之前是CCDirector)用于管理场景对象。<br/>
(所以3.0版本和以前的最大区别(我们看到的最大区别)就是类前面的CC，3.0版本是把所以的类前缀CC都去掉了)</p>

<p>采用单例设计模式！(不多解释啦，不知道的朋友请搜索)
<code>c++ 获得导演类Director实例语句
auto director = Director::getInstance();//获取唯一的导演  单例模式
</code></p>

<h2>导演对象的职责/作用</h2>

<p>访问和改变场景<br/>
访问Cocos2d-x的配置信息<br/>
暂停、继续和停止游戏<br/>
转换坐标</p>

<p>上面只是导演对象的职责其中一部分，还有其他很多，但我们不需要让导演做很多事情(其他的事被隐藏了)，我们用的最多的应该就是访问和改变场景、暂停、继续和停止游戏和转换坐标</p>

<h1>场景</h1>

<p>场景类Scene(v3.0之前是CCScene)是构成游戏的界面，类似于电影中的场景。</p>

<p>像导演、场景、包括层，精灵等这些游戏的概念，其实都是从电影行业中过渡过来的。<br/>
那么，电影行业，我们知道有场景，有导演。<br/>
场景就是我们拍这场戏，我们布置的景  比如打斗的场景等<br/>
场景中会有男主角，女主角，那么男女主角就相当于我们这里的精灵了，包括道具什么的(精灵)，这些东西在一起，就构成了层</p>

<p>所以场景里面也会放一些层</p>

<h2>场景大致可以分为以下几类</h2>

<p>展示类场景。播放视频或简单的在图像上输出文字，来实现游戏的开场介绍、胜利和失败提示、帮助介绍<br/>
选项类场景。主菜单，设置游戏参数等(比如开始，暂停，继续菜单)<br/>
游戏场景。这是游戏的主要内容</p>

<p>Scene类图:继承图
<img src="http://i.imgur.com/2S6h9PZ.png" alt="" /></p>

<h1>层</h1>

<p>层是我们写游戏的重点，我们大约99%以上的时间是在层上实现我们游戏内容。<br/>
层的管理类似于Photoshop中的图层，它也是一层一层叠在一起</p>

<p>我们一般写的很多类都是层，然后在层上面添加精灵等.然后把层放到场景里<br/>
场景包含层，层包含精灵,菜单等对象</p>

<p>理论上来说，层的层数越多(层与层之间有覆盖的问题，后面的层会覆盖先绘制的层)，需要绘制的深度越深，越耗CPU<br/>
大家可以打开Photoshop，用里面的图层来理解，这样更加直观<br/>
<img src="http://i.imgur.com/4XUGFsE.png" alt="" /></p>

<h1>精灵</h1>

<p>精灵类Sprite(v3.0之前是CCSprite)是游戏中非常重要的概念，它包括了敌人、玩家控制的对象、静态物体、地图和背景等<br/>
通常情况它会进行运动，运动方式包括了：移动、旋转、放大、缩小和动画等</p>

<h1>菜单</h1>

<p>菜单在游戏中时非常重要的概念，它提供操作的集合，在Cococ2d-x中菜单类是Menu</p>

<p>Menu中包含菜单项<br/>
MenuItem，它有三个子类：<br/>
MenuItemLabel、MenuItemSprite和MenuItemToggle</p>

<p>之前的HelloWord中的关闭按钮其实就是一个菜单项<br/>
我们也可以用精灵来实现，但是菜单项封装了一些触摸事件，你不需要关心它事件处理的细节问题</p>

<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【Cocos2d-x】开发基础-第一个Cocos2d-x游戏]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/06/07/cocos2dx-hello/"/>
    <updated>2017-06-07T13:38:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/06/07/cocos2dx-hello</id>
    <content type="html"><![CDATA[<p>本篇博客讲解:<br/>
1.第一个Cocos2d-x游戏</p>

<!-- more -->


<hr />

<h1>第一个Cocos2d-x游戏</h1>

<h2>创建工程</h2>

<p>cocos工具：<br/>
就是这个，看图
<img src="http://i.imgur.com/WHlXrKy.png" alt="" />
命令工具cocos实现，cocos工具其实是cocos2d团队自己开发的。是使用Python脚本编写的，cocos工具的运行需要安装Python环境<br/>
(还会用到ant,eclipse等工具哦，后面介绍)<br/>
Python下载地址
<a href="https://www.python.org/">https://www.python.org/</a>
需要注意的是它目前有Python3和Python2可以下载，我们选择Python 2，不要下载3，因为2和3语法有很大差别，cocos这个工具是使用2编写的，如果你使用了3，会在脚本编译就出问题  <br/>
(我的源代码中有window的Python安装包)<br/>
下载->安装->配置环境变量(Path中添加Python根目录)<br/>
<img src="http://i.imgur.com/n5L6JbI.png" alt="" /></p>

<p>点击确定设置好。</p>

<p>因为你还没有设置其他环境变量，所以你需要到此目录下：<br/>
cocos2d-x-3.13.1\tools\cocos2d-console\bin<br/>
直接输入cmd回车
<img src="http://i.imgur.com/pMcZqEi.png" alt="" />
或者shift鼠标右键打开命令窗口，都行</p>

<p>如果你不知道怎么用，直接输入cocos会有帮助
<img src="http://i.imgur.com/r1BMr1e.png" alt="" /></p>

<p>终端中执行如下指令：</p>

<pre><code>cocos new -p com.uifuture -l cpp -d E://chxCocosWork HelloWord
</code></pre>

<p>com.uifuture是包名，最好是写上(可以不写)，因为在安卓发布打包需要<br/>
cpp是语言，表示生成c++语言，还有lua,js<br/>
E://chxCocosWork 为生成目录<br/>
HelloWord为工程名<br/>
<img src="http://i.imgur.com/atnBoCF.png" alt="" />
如果你生成过程有问题，或者无法找到cocos命令，有可能是你的Path没有加进去，或者你使用的Python版本是3.X。</p>

<p>也可以用这种写法
<code>
cocos new HelloWord -p
com.uifuture -l cpp -d E://chxCocosWork
</code></p>

<h2>工程文件结构</h2>

<p>生成的目录结构是这样的：
<img src="http://i.imgur.com/iK0PwUP.png" alt="" /></p>

<p>Resources文件夹是资源文件夹。<br/>
图片，声音，字体，字库等都在这个目录</p>

<p>Class目录是我们开发重点关注的文件夹，这里面都是cpp文件<br/>
其他的文件夹，基本都是和平台有关的</p>

<p>现在刚刚入门，我们不考虑平台移植的问题，现在只关心Class目录中文件的编写</p>

<p>打开目录proj.win32，使用VS打开项目。 (使用VS打开HelloWorld.sln即可)<br/>
<img src="http://i.imgur.com/8hfsLDh.png" alt="" /></p>

<p>还有一些其他的工程：
<img src="http://i.imgur.com/p4cogHU.png" alt="" /></p>

<p>也就是说，HelloWord这个工程需要运行，需要依赖这些工程！<br/>
libcocos2d就是所有cocos2d的源码都是放在这个工程里面的，这个是和项目根目录cocos2d这个文件夹对应的</p>

<p>运行工程：(第一次编译可能需要较长时间)
<img src="http://i.imgur.com/pmlDOeB.png" alt="" /></p>

<p>左下角的一些数字，就是输出的帧;GL vwets就是绘制图形需要的顶点;GL calls 就是绘制的精灵的个数。右下角的按钮是菜单，你可以选择退出游戏</p>

<h2>代码解释</h2>

<p>我们看HelloWordScene.h<br/>
<figure class='code'><figcaption><span>HelloWordScene.h</p></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">ifndef</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">HELLOWORLD_SCENE_H</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">HELLOWORLD_SCENE_H</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">cocos2d</span><span class="p">.</span><span class="n">h</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">HelloWorld</span> <span class="o">:</span> <span class="k">public</span> <span class="n">cocos2d</span><span class="o">::</span><span class="n">Layer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">cocos2d</span><span class="o">::</span><span class="n">Scene</span><span class="o">*</span> <span class="n">createScene</span><span class="p">();</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">virtual</span> <span class="kt">bool</span> <span class="n">init</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// a selector callback</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">menuCloseCallback</span><span class="p">(</span><span class="n">cocos2d</span><span class="o">::</span><span class="n">Ref</span><span class="o">*</span> <span class="n">pSender</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// implement the &quot;static create()&quot; method manually</span>
</span><span class='line'><span class="n">CREATE_FUNC</span><span class="p">(</span><span class="n">HelloWorld</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">endif</span> <span class="c1">// &lt;strong&gt;HELLOWORLD_SCENE_H&lt;/strong&gt;&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">里面定义了一个类</span><span class="n">HelloWorld</span><span class="p">,</span><span class="err">继承了</span><span class="n">cocos2d</span><span class="o">::</span><span class="n">Layer</span><span class="p">(</span><span class="err">层</span><span class="p">)</span>
</span><span class='line'><span class="err">虽然文件名叫</span><span class="n">HelloWordScene</span><span class="p">,</span><span class="n">Scene</span><span class="err">是场景，但是实际上里面的类是</span><span class="n">HelloWorld</span><span class="err">，实际上是层</span>
</span><span class='line'><span class="err">创建层的同时会先创建层所在的场景，层是要放在场景里面的。</span>
</span><span class='line'>
</span><span class='line'><span class="n">AppDelegate</span><span class="err">是一个应用程序委托对象，如果懂</span><span class="n">ios</span><span class="err">开发的，应该会对这个比较熟悉。</span>
</span><span class='line'><span class="err">它的作用就是，应用程序启动的时候会调用它。</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">ifndef</span>  <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">APP_DELEGATE_H</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span>  <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">APP_DELEGATE_H</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">cocos2d</span><span class="p">.</span><span class="n">h</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/**</span>
</span><span class='line'><span class="cm">@brief    The cocos2d Application.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">&lt;p&gt;Private inheritance here hides part of interface from Director.</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="k">class</span>  <span class="nc">AppDelegate</span> <span class="o">:</span> <span class="k">private</span> <span class="n">cocos2d</span><span class="o">::</span><span class="n">Application</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">AppDelegate</span><span class="p">();</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="o">~</span><span class="n">AppDelegate</span><span class="p">();</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">virtual</span> <span class="kt">void</span> <span class="n">initGLContextAttrs</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">@brief    Implement Director and Scene init code here.</span>
</span><span class='line'><span class="cm">@return true    Initialize success, app continue.</span>
</span><span class='line'><span class="cm">@return false   Initialize failed, app terminate.</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="k">virtual</span> <span class="kt">bool</span> <span class="nf">applicationDidFinishLaunching</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">@brief  Called when the application moves to the background</span>
</span><span class='line'><span class="cm">@param  the pointer of the application</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="k">virtual</span> <span class="kt">void</span> <span class="nf">applicationDidEnterBackground</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">@brief  Called when the application reenters the foreground</span>
</span><span class='line'><span class="cm">@param  the pointer of the application</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="k">virtual</span> <span class="kt">void</span> <span class="nf">applicationWillEnterForeground</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">endif</span> <span class="c1">// &lt;em&gt;APP_DELEGATE_H&lt;/em&gt;&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">applicationDidFinishLaunching</span> <span class="err">这个函数是在程序启动的时候会调用它，也就是在游戏启动的时候调用，一般进行游戏的初始化，比如游戏的导演啊，场景啊等在这里进行初始化。</span>
</span><span class='line'><span class="n">applicationDidEnterBackground</span> <span class="err">是退到后台，就是点击</span><span class="n">home</span><span class="err">键，回到桌面。接电话或者跳到另一个应用程序去，都会调用这个函数。</span>
</span><span class='line'><span class="n">applicationWillEnterForeground</span> <span class="err">是从后台重新回到前台，也就是从手机任务栏重新回到游戏，会调用这个函数</span>
</span><span class='line'><span class="err">以上三个函数是和游戏的生命周期有关系的。</span>
</span><span class='line'><span class="n">HelloWorldScene</span><span class="p">.</span><span class="n">cpp</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">HelloWorldScene</span><span class="p">.</span><span class="n">h</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">SimpleAudioEngine</span><span class="p">.</span><span class="n">h</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">USING_NS_CC</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Scene</span><span class="o">*</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">createScene</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// 创建场景对象</span>
</span><span class='line'>    <span class="k">auto</span> <span class="n">scene</span> <span class="o">=</span> <span class="n">Scene</span><span class="o">::</span><span class="n">create</span><span class="p">();</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// 创建层对象</span>
</span><span class='line'><span class="k">auto</span> <span class="n">layer</span> <span class="o">=</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">create</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 把层放到场景里</span>
</span><span class='line'><span class="n">scene</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">addChild</span><span class="p">(</span><span class="n">layer</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 返回这个场景</span>
</span><span class='line'><span class="k">return</span> <span class="n">scene</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// on &amp;ldquo;init&amp;rdquo; you need to initialize your instance</span>
</span><span class='line'><span class="c1">// 初始化当前这个层</span>
</span><span class='line'><span class="kt">bool</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">init</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//////////////////////////////</span>
</span><span class='line'>    <span class="c1">// 1. super init first</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">Layer</span><span class="o">::</span><span class="n">init</span><span class="p">()</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">auto</span> <span class="n">visibleSize</span> <span class="o">=</span> <span class="n">Director</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">getVisibleSize</span><span class="p">();</span><span class="c1">//得到屏幕的大小(可见区域大小)</span>
</span><span class='line'><span class="n">Vec2</span> <span class="n">origin</span> <span class="o">=</span> <span class="n">Director</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">getVisibleOrigin</span><span class="p">();</span><span class="c1">//得到可见区域大小的左下角坐标</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/////////////////////////////</span>
</span><span class='line'><span class="c1">// 2. add a menu item with &quot;X&quot; image, which is clicked to quit the program</span>
</span><span class='line'><span class="c1">//    you may modify it.</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// add a &quot;close&quot; icon to exit the progress. it&#39;s an autorelease object</span>
</span><span class='line'><span class="c1">// 得到图片菜单 以及设置回调函数</span>
</span><span class='line'><span class="k">auto</span> <span class="n">closeItem</span> <span class="o">=</span> <span class="n">MenuItemImage</span><span class="o">::</span><span class="n">create</span><span class="p">(</span>
</span><span class='line'>                                       <span class="s">&quot;CloseNormal.png&quot;</span><span class="p">,</span>
</span><span class='line'>                                       <span class="s">&quot;CloseSelected.png&quot;</span><span class="p">,</span>
</span><span class='line'>                                       <span class="n">CC_CALLBACK_1</span><span class="p">(</span><span class="n">HelloWorld</span><span class="o">::</span><span class="n">menuCloseCallback</span><span class="p">,</span> <span class="k">this</span><span class="p">));</span>
</span><span class='line'><span class="c1">//关闭的按钮 </span>
</span><span class='line'><span class="n">closeItem</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">visibleSize</span><span class="p">.</span><span class="n">width</span> <span class="o">-</span> <span class="n">closeItem</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">getContentSize</span><span class="p">().</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span> <span class="p">,</span>
</span><span class='line'>                            <span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">closeItem</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">getContentSize</span><span class="p">().</span><span class="n">height</span><span class="o">/</span><span class="mi">2</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// create menu, it&#39;s an autorelease object</span>
</span><span class='line'><span class="c1">//把菜单项放到菜单里</span>
</span><span class='line'><span class="k">auto</span> <span class="n">menu</span> <span class="o">=</span> <span class="n">Menu</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">closeItem</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'><span class="c1">//指定菜单的位置 设置显示的坐标位置</span>
</span><span class='line'><span class="n">menu</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="o">::</span><span class="n">ZERO</span><span class="p">);</span>
</span><span class='line'><span class="k">this</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">addChild</span><span class="p">(</span><span class="n">menu</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span><span class="c1">//把菜单放到当前层</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/////////////////////////////</span>
</span><span class='line'><span class="c1">// 3. add your codes below...</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//标签 也就是中间显示的那个文字  以及加载字体</span>
</span><span class='line'><span class="k">auto</span> <span class="n">label</span> <span class="o">=</span> <span class="n">Label</span><span class="o">::</span><span class="n">createWithTTF</span><span class="p">(</span><span class="s">&quot;Hello World&quot;</span><span class="p">,</span> <span class="s">&quot;fonts/Marker Felt.ttf&quot;</span><span class="p">,</span> <span class="mi">24</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//指定标签的位置</span>
</span><span class='line'><span class="n">label</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">visibleSize</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">visibleSize</span><span class="p">.</span><span class="n">height</span> <span class="o">-</span> <span class="n">label</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">getContentSize</span><span class="p">().</span><span class="n">height</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//把标签加入到层中</span>
</span><span class='line'><span class="k">this</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">addChild</span><span class="p">(</span><span class="n">label</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//指定一个图片的精灵</span>
</span><span class='line'><span class="k">auto</span> <span class="n">sprite</span> <span class="o">=</span> <span class="n">Sprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;HelloWorld.png&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 设置图片精灵的位置</span>
</span><span class='line'><span class="n">sprite</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="n">visibleSize</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span> <span class="o">+</span> <span class="n">origin</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">visibleSize</span><span class="p">.</span><span class="n">height</span><span class="o">/</span><span class="mi">2</span> <span class="o">+</span> <span class="n">origin</span><span class="p">.</span><span class="n">y</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//把图片精灵加入到层中</span>
</span><span class='line'><span class="k">this</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">addChild</span><span class="p">(</span><span class="n">sprite</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//点击close菜单项来回调的</span>
</span><span class='line'><span class="kt">void</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">menuCloseCallback</span><span class="p">(</span><span class="n">Ref</span><span class="o">*</span> <span class="n">pSender</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//Close the cocos2d-x game scene and quit the application</span>
</span><span class='line'>    <span class="n">Director</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">end</span><span class="p">();</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">//条件编译 ，也就是满足条件就编译过去，如果不满足，就相当于注释了</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="n">CC_TARGET_PLATFORM</span> <span class="o">==</span> <span class="n">CC_PLATFORM_IOS</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">endif</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="cm">/*To navigate back to native iOS screen(if present) without quitting the application  ,do not use Director::getInstance()-&amp;gt;end() and exit(0) as given above,instead trigger a custom event created in RootViewController.mm as below*/</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//EventCustom customEndEvent(&quot;game_scene_close_event&quot;);</span>
</span><span class='line'><span class="c1">//_eventDispatcher-&amp;gt;dispatchEvent(&amp;amp;customEndEvent);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>这样我们就得到一个能执行的HelloWord程序啦</p>

<p>因为cocos2dx项目工程太大，只上传Classes一些cpp文件啦，你可以手动把代码加入到你的cocos2dx项目工程中。</p>

<h1>源代码下载地址：</h1>

<blockquote cite='陈浩翔'>
GITHUB源码下载地址:<strong>【<a href='https://github.com/chenhaoxiang/cocos2d-x/tree/master/20170607/HelloWorld' target='_blank'>点我进行下载</a>】</strong></p>
</blockquote>


<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【Cocos2d-x】开发基础-Cocos简介与环境搭建]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/06/05/cocos2dx-about/"/>
    <updated>2017-06-05T13:38:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/06/05/cocos2dx-about</id>
    <content type="html"><![CDATA[<p>本篇博客讲解:<br/>
Cocos2d-x介绍与环境搭建<br/>
1.移动平台游戏引擎介绍<br/>
2.Cocos2d家谱介绍<br/>
3.Cocos2d-x设计目标<br/>
4.在Windows平台下开始开发Cocos2d-x游戏</p>

<!-- more -->


<hr />

<p>[TOC]</p>

<h1>1.移动平台游戏引擎介绍</h1>

<h2>游戏引擎的定义</h2>

<p>游戏引擎是指一些已编写好的可编辑游戏系统或者一些互交式图像应用程序的核心组件，游戏软件的主程序。<br/>
通俗一点理解就是：<br/>
游戏引擎其实就是一个半成品，它能帮你做什么，就是开发游戏。就是说，一些基础的工作帮你做好了。<br/>
你拿过来之后，根据你的需求，根据你要开发的游戏的特点加上一些你自己的东西，那么这就是游戏引擎。<br/>
如果没有游戏引擎，你完全可以自己做那些事情，有了游戏引擎之后，很多东西就不用自己去做了。<br/>
游戏引擎你也可以理解成框架或者库！</p>

<h2>游戏引擎包含以下子系统</h2>

<p>渲染引擎:<br/>
把从计算机中0101的代码变成我们能够识别的图像的过程！<br/>
这样理解更好：相当与你拿一个染料桶在墙上刷染料，把染料刷到墙上的过程，这个就是渲染的过程。</p>

<p>物理引擎:<br/>
其实就是模拟现实的物理环境，比如重力等</p>

<p>碰撞检测系统、音效、脚本引擎、电脑动画、人工智能、网络引擎以及场景管理。</p>

<h2>移动平台游戏引擎中主要可以分为</h2>

<p>2D引擎和3D引擎</p>

<h3>2D引擎主要有</h3>

<p>Coco2d-iphone,Cocos2d-x,Corona SDK,Construct 2,WiEngine和Cyclone 2D</p>

<p>Coco2d-iphone和Cocos2d-x看名字就知道有些联系了，Cocos2d-x很多类似管理的东西，比如对象，类的设计就是从Coco2d-iphone过度过来的。<br/>
Corona SDK是用Lua脚本编写的</p>

<h3>3D引擎主要有</h3>

<p>Unity3D,Unreal Development Kit,ShiVa 3D 和Marmalade</p>

<p>现在很火的就是Unity3D</p>

<h2>HTML 5的游戏引擎</h2>

<p>Cocos2d-js,X-Canvas和Sphinx等</p>

<h1>2.Cocos2d家谱介绍</h1>

<p><img src="http://i.imgur.com/yeghXaA.png" alt="" /></p>

<p>其实这个家谱已经过时了，不过可以看到Cocos2d的发展路线<br/>
有兴趣的大家可以自行搜索了解</p>

<h1>3.Cocos2d-x设计目标</h1>

<h2>Cocos2d-x目标</h2>

<p><img src="http://i.imgur.com/ORpTwbq.png" alt="" /></p>

<p>为什么Cocos2d这么优秀，为什么这么多人接受和推广它。<br/>
我们看上面的图，首先，从横向来讲，cocos2d可以用很多平台开发，基于不同平台开发，很方便！<br/>
还有发布平台，写一个程序，发布到多个平台！(节省大量时间和成本)</p>

<p>从纵向往上来看，可以绑定Javascript和Lua脚本<br/>
从纵向往下来看，就是和硬件有关了</p>

<h2>Cocos2d-x绑定Javascript和Lua脚本</h2>

<p>解释性的语言，结构非常严谨，编译速度很快！</p>

<p>也就是在开发过程中，我们不止能使用c++开发，也能使用javascript和lua脚本开发！</p>

<p><img src="http://i.imgur.com/40Xt1bX.png" alt="" /></p>

<p>可以看到，我们有4条线路来开发游戏<br/>
1、C线路：通过c++<br/>
2、D线路：通过Lua(我们不需要管和c++的绑定)<br/>
3、B线路：JS绑定的引擎 cocos2d-js如果想开发本地游戏，需要调用cocos2d-x(我们不需要管怎么绑定的，只要会JS，就能开发本地游戏)<br/>
4、A线路：开发网页游戏</p>

<h1>4.在Windows平台下开始开发Cocos2d-x游戏</h1>

<p>为什么选择在Window下开发游戏，因为对硬件设备要求没那么高<br/>
而且先从window先学习cocos2dx是最容易学习的</p>

<h2>使用Visual Studio开发工具</h2>

<p>在这里我使用的是Visual Studio 2013<br/>
操作系统是使用的Windows 7</p>

<h2>下载和使用Cocos2d-x案例</h2>

<p>网址：<a href="http://www.cocos2d-x.org/">http://www.cocos2d-x.org/</a>
<img src="http://i.imgur.com/2GQ3y9p.png" alt="" />
下载:
<img src="http://i.imgur.com/vnnItnl.png" alt="" /></p>

<p>下载解压之后：
<img src="http://i.imgur.com/aZAgVPh.png" alt="" /></p>

<h3>build目录</h3>

<p>我们要学习的话，先进入build目录里面，这个里面很多是工程文件
.sln是基于微软的VS工具的解决方案<br/>
 cocos2d_tests.xcodeproj和cocos2d_libs.xcodeproj在window下看起来是文件夹<br/>
但是如果拿到mac系统里，但是其实就是mac xcode的工程文件，在xcode就可以运行cocos2d_tests.xcodeproj这个文件，运行之后，就会启动相关的案例代码<br/>
在window就是启动cocos2d-win32.sln这个启动相关的案例代码<br/>
<img src="http://i.imgur.com/kxLbiVg.png" alt="" /></p>

<p>我们主要运行的就cpp-tests，cpp-tests就是我们看到的大部分帮助例子在这里！<br/>
要想运行的，需要把这个设置为启动项目！然后就会看到这个是加粗的字体<br/>
<img src="http://i.imgur.com/vHP1ovd.png" alt="" />
然后运行它，第一次编译时间会比较长<br/>
<img src="http://i.imgur.com/N6iotba.png" alt="" />
运行之后，里面都是一些演示实例，大家可以看看<br/>
看源代码的话，就搜索数字后面的名字，找源代码进行学习</p>

<p>在window下开发选择win32，因为实际上在window下用VS开发出来，需要有模拟器来运行游戏场景，但是由于我们没有真机，所以把游戏场景在window的一个小窗口显示出来的，所以叫win32程序。
win32程序在最后发布的时候其实是没有用的，win32其实只是开发，模拟测试，还有学习的环境</p>

<p>install-deps-linux.sh就是基于Linux的安装开发的文件</p>

<h3>cocos目录</h3>

<p>cocos2d引擎的源代码，全部放在这里</p>

<h3>docs目录</h3>

<p><img src="http://i.imgur.com/Wsl7Xmr.png" alt="" />
文档目录，一开始是空的，只有上面的文件</p>

<h3>extensions目录</h3>

<p>扩展的内库 - 一般也都是cocos2d团队开发的，但是它是扩展的</p>

<h3>external目录</h3>

<p>第三方的扩展库，比如使用其他的物理引擎等</p>

<h3>plugin目录</h3>

<p>插件什么的</p>

<h3>templates目录</h3>

<p>这是模板，我们使用指令生成cocos2dx的模板，都是从这个模板里面生成的工程代码的</p>

<h3>tests目录</h3>

<p>就是刚刚的项目的cpp-tests的源码</p>

<h3>tools目录</h3>

<p>工具目录
<img src="http://i.imgur.com/0gjch9N.png" alt="" />
通过cocos的工具，python脚本编写的，可以帮助我们创建一个工程出来</p>

<h2>生成API文档</h2>

<p>看文件夹docs，里面没有帮助文档
<img src="http://i.imgur.com/kGgdSMr.png" alt="" />
现在里面的内容是帮助我们生成帮助API文档的<br/>
类似Java的网页式的帮助文档<br/>
使用Doxygen(无法生成图片)和Graphviz工具，结合使用<br/>
Doxygen:<br/>
<a href="http://www.stack.nl/~dimitri/doxygen/download.html#latestsrc">http://www.stack.nl/~dimitri/doxygen/download.html#latestsrc</a><br/>
Graphviz:<br/>
<a href="http://www.graphviz.org/Download_windows.php">http://www.graphviz.org/Download_windows.php</a><br/>
下载然后都安装就好了。<br/>
启动Doxygen
<img src="http://i.imgur.com/4DEtFRw.png" alt="" />
然后File->open<br/>
打开cocos2d-x-3.13.1\docs下的doxygen.config文件<br/>
我们不需要做其他事情，然后直接Run
<img src="http://i.imgur.com/Kdr1MRs.png" alt="" />
会在docs目录下生成html目录，找到index.html文件
<img src="http://i.imgur.com/NmTwVH6.png" alt="" />
然后直接用浏览器打开就行了<br/>
<img src="http://i.imgur.com/8m5aul3.png" alt="" />
这就是我们刚刚生成的cocos2dx的文档</p>

<p>在此感谢CSDN学院关东升老师的教学视频！</p>

<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
</feed>
