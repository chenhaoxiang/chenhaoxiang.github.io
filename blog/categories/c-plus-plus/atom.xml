<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C-plus-plus | 谙忆-人生之旅]]></title>
  <link href="http://chenhaoxiang.github.io/blog/categories/c-plus-plus/atom.xml" rel="self"/>
  <link href="http://chenhaoxiang.github.io/"/>
  <updated>2017-09-17T21:54:45+08:00</updated>
  <id>http://chenhaoxiang.github.io/</id>
  <author>
    <name><![CDATA[陈浩翔]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[【C++】流插入、提取运算符和类型转换]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/09/05/Flow-insert-extract-operator-and-type-conversion/"/>
    <updated>2017-09-05T17:28:34+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/09/05/Flow-insert-extract-operator-and-type-conversion</id>
    <content type="html"><![CDATA[<p>流插入,流提取运算符重载和类型转换的讲解和实例</p>

<p>重载流插入和提取运算符的运算符函数，不能作为类的成员函数，只能作为普通函数</p>

<!-- more -->


<hr />

<h1>流插入,流提取运算符重载</h1>

<p>流插入运算符"&lt;&lt;&ldquo;和流提取运算符&rdquo;>>&ldquo;也可以被用来重载。</p>

<p>我们可以使用cout对一个int，string等等类型的数据进行输出，我们却不可以对我们自己定义的一个类的对象进行直接输出，因为我们这个类是没有"&lt;&lt;&ldquo;运算符的。</p>

<p>&ldquo;&lt;&lt;"运算符是有两个操作数的，它是一个双目运算符，平时貌似只给了它一个操作数,形如cout&lt;&lt;a;我们只知道a是一个变量，是它的一个操作数，还有一个操作数其实是cout！</p>

<p>cout也是它的一个操作数，cout是一个在ostream类里面已经定义好了的对象，ostream类还为我们定义好了系统中已经存在的类型的输出，如int，double…..这个对象作为了它的左操作数。显然cout这个对象是不属于我们新声明的类的，但是它又需要作为第一个参数，它是没有办法调用我们这个类的成员函数的，所以只能将"&lt;&lt;&ldquo;运算符的重载声明为友元函数。</p>

<p>可以为CTime类定义重载的流插入和流提取运算符。</p>

<p>重载之后就可以直接对CTime对象进行输入和输出：<br/>
<code>c++
cout&lt;&lt;time;
cin&gt;&gt;time;
</code>
<strong>重载流插入和提取运算符的运算符函数，不能作为类的成员函数，只能作为普通函数</strong> 这是一个规定，没有为什么</p>

<p>&ldquo;&lt;&lt;"和&rdquo;>>&ldquo;重载的函数声明如下：<br/>
<code>C++
istream&amp; operator&gt;&gt; (istream&amp; input, CTime&amp; time);//输入流
ostream&amp; operator&lt;&lt;(ostream&amp; output, CTime&amp; time);//输出流
</code>
istream和ostream分别是输入流类和输出流类。cin和cout就分别是istream和ostream的对象。<br/>
注意:<br/>
<strong>重载&rdquo;&lt;&lt;&ldquo;流插入运算符的函数第一个参数和返回类型必须是ostream&amp;类型。<br/>
重载&rdquo;>>&ldquo;流提取运算符的函数第一个参数和返回类型必须是istream&amp;类型。</strong><br/>
第二个参数是用户自定义的类</p>

<h2>流提取运算符"&lt;&lt;&ldquo;重载</h2>

<pre><code class="C++ 流提取运算符重载">ostream&amp; operator&lt;&lt;(ostream&amp; output, CTime&amp; time) //返回ostream类的对象output的引用是为了实现连续输出，如cout&lt;&lt;a&lt;&lt;b;
{
cout&lt;&lt;time.getHour()&lt;&lt;time.getMinute()&lt;&lt;time.getSecond()&lt;&lt;endl;
return output;
}
</code></pre>

<h2>流输入运算符">>&ldquo;重载</h2>

<pre><code class="C++ 流输入运算符">>"重载">//因为要用到CTime类的成员，所以把流提取运算符作为CTime类的友元
istream&amp; operator&gt;&gt;(istream&amp; input, CTime&amp; time)
{
    //可以直接使用CTIme类的数据成员了
    cin &gt;&gt; time.m_nHour &gt;&gt; time.m_nMinute &gt;&gt; time.m_nSecond;
    return input;
}
</code></pre>

<pre><code class="C++ Time.h声明友元">friend istream&amp; operator&gt;&gt;(istream&amp; input, CTime&amp; time);
</code></pre>

<p>在重载完流插入和提取运算符后，我们就可以对该类使用&lt;&lt;输出数据，使用>>输入数据。这样是非常直观的。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">CTime</span> <span class="nf">time</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">20</span><span class="p">);</span>
</span><span class='line'><span class="n">CTime</span> <span class="nf">time2</span><span class="p">(</span><span class="mi">12</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">time</span><span class="p">;</span>  <span class="c1">//在我们重载了输入输出运算符之后，我们也可以像C++里面预定义好的数据类型一样对这个类的对象进行输入输出&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">time</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">time2</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">operator</span><span class="o">&gt;&gt;</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">time</span><span class="p">);</span>
</span><span class='line'><span class="k">operator</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;(</span><span class="n">cout</span><span class="p">,</span> <span class="n">time</span><span class="p">);</span>
</span><span class='line'><span class="k">operator</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;(</span><span class="n">cout</span><span class="p">,</span> <span class="n">time2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>结果</h3>

<p><img src="https://i.imgur.com/umGMKFJ.png" alt="" /></p>

<h1>类型转换</h1>

<h2>使用构造函数进行类型转换</h2>

<p>在为CTime类重载+运算符后，我们就可以对两个CTime对象使用+运算符进行操作。<br/>
但仍然不能使用+运算符将一个CTime对象和一个int类型相加。为了实现它，我们可以先将int类型转换为一个CTime的临时对象，然后在进行相加。<br/>
如下：  <code>time + CTime(3)</code></p>

<p>CTime(3)这种形式很类似于强制类型转换，将int类型转换为CTime类型。之所以可以进行此种转换，是因为已经为CTime对象定义了具有一个int类型参数的构造函数。因此具有一个参数的构造函数可以用来做类型转换，称之为<strong>转换构造函数</strong></p>

<p>有了类型转换函数，在需要CTime类型参数的地方可以使用int类型代替<br/>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">CTime</span> <span class="nf">time3</span><span class="p">(</span><span class="mi">20</span><span class="p">);</span>
</span><span class='line'><span class="n">CTime</span> <span class="n">time4</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span><span class="c1">//和下面那句效果一样的,自动类型转换</span>
</span><span class='line'><span class="n">CTime</span> <span class="n">time5</span> <span class="o">=</span> <span class="n">CTime</span><span class="p">(</span><span class="mi">20</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">func</span><span class="p">(</span><span class="n">time</span><span class="p">);</span>
</span><span class='line'><span class="n">func</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span><span class="c1">//编译器会自动构造一个CTime的临时对象</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>如果我们期望避免这种转换，我们可以在含有一个参数的构造函数前面加上声明explicit<br/>
如:
<code>c++ Time.h文件
explicit CTime(int value);
</code><br/>
这样，我们使用前面的func(10),CTime time4 = 20;的时候，编译器就会报错<br/>
<img src="https://i.imgur.com/PU5wW9T.png" alt="" /></p>

<h2>类型转换函数进行类型转换</h2>

<p>类型转换函数用以将类的对象转换另一种数据类型的函数。<br/>
类型转换函数没有参数，没有返回类型。它是成员函数。</p>

<p>如 可以将CTime类对象转换int类型。<br/>
<code>C++
int nSecond = time;  //执行了将对象转换为int类型的操作，调用类型转换函数
</code>
类型转换函数的声明形式：<br/>
<code>C++ Time.h
operator int();  //int为它的返回类型
</code>
下面定义一个类型转换函数：<br/>
<code>C++
CTime::operator int() //将一个CTime类的对象转换成秒数
{
    return m_nHour * 60 * 60 + m_nMinute * 60 + m_nSecond;
}
</code>
<code>C++
int nSecond = time;
cout &lt;&lt; nSecond;
</code>
<img src="https://i.imgur.com/tBo8bmZ.png" alt="" /><br/>
最后面的那行输出 6:3:3的秒数</p>

<p>类型转换函数在平时比较少见，在这里只介绍了一下如何使用的。</p>

<h1>源代码下载地址：</h1>

<blockquote cite='陈浩翔'>
GITHUB源码下载地址:<strong>【<a href='https://github.com/chenhaoxiang/C-Study/tree/master/20170905/code/FlowInsertExtractOperator' target='_blank'>点我进行下载</a>】</strong>
</blockquote>


<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【C++】成员函数重载二元和一元运算符]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/09/04/Member-functions-overload-binary-and-unary-operators/"/>
    <updated>2017-09-04T15:54:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/09/04/Member-functions-overload-binary-and-unary-operators</id>
    <content type="html"><![CDATA[<p>重载双目运算符时，运算符函数中应该具有两个参数，若运算符函数作为类的成员函数(当运算符重载函数作为类的成员函数时，要求操作数左边必须是一个对象，而函数的参数可以是同类的对象也可以是普通的变量)，则只需要一个参数。</p>

<!-- more -->


<hr />

<h1>双目运算符</h1>

<p>双目运算符就是具有两个操作数的运算符。如 +、-、==等。</p>

<p>对双目运算符而言，成员函数重载运算符的函数参数表中只有一个参数，而用友元函数重载运算符函数参数表中含有两个参数。</p>

<h2>成员函数重载 == 、>运算符:</h2>

<pre><code class="C++ 声明">    bool operator==(CTime&amp; time);
    bool operator&gt;(CTime&amp; time);
</code></pre>

<pre><code class="C++ 实现">//判断对象的每个成员变量是否相等
bool CTime::operator==(CTime&amp; time)
{
    if (m_nHour == time.m_nHour&amp;&amp;m_nMinute == time.m_nMinute&amp;&amp;m_nSecond == time.m_nSecond)
    {
        return true;
    }
    return false;
}

bool CTime::operator&gt;(CTime&amp; time)
{
    if (m_nHour &gt; time.m_nHour) //先判断两个对象的小时数的大小
    {
        return true;
    }
    else if (m_nHour &lt; time.m_nHour)
    {
        return false;
    }
    else //这是两个对象小时数相等的情况，接下来就判断分钟数
    {
        if (m_nMinute&gt; time.m_nMinute) //再判断两个对象的分钟数的大小
        {
            return true;
        }
        else if (m_nMinute &lt; time.m_nMinute)
        {
            return false;
        }
        else //这是两个对象的时钟和分钟相等的情况下
        {
            if (m_nSecond&gt;time.m_nSecond) //最后比较秒钟
            {
                return true;
            }
            else
            {
                return false;
            }
        }

    }

    return false;  //最后就是两个对象相等，也不满足一个对象大于另外一个对象的情况，返回false
}
</code></pre>

<h2>成员函数重载++运算符</h2>

<pre><code class="C++">    CTime operator++();//前置的++
    CTime operator++(int);//后置++，这个int类型的参数只是为了区分，我们并不会使用这个参数，所以我们不需要形参的名字
</code></pre>

<pre><code class="C++">//前置的++
CTime CTime::operator++() //重载++(前置)运算符
{
    CTime time(0,0,1); //定义了一个秒数为1的对象
    *this = *this + time;//由于前面的函数已经重载了加号运算符，里面已经定义好了相关的操作，所以这句代码调用了加号运算符的重载函数，并将对象的秒数加一
    return *this; //前置++的操作顺序就是先加再返回它的值
}

CTime CTime::operator++(int) //重载++(后置)运算符
{
    CTime time = *this;//后置++的操作规则是先返回再加，所以需要创建一个临时变量保存好这个对象的值
    CTime time2(0, 0, 1);//定义了一个秒数为1的对象
    *this = *this + time2;//同上调用了加法运算符的重载函数
    return *this;//返回加法操作之前的对象的值
}
</code></pre>

<pre><code class="C++ 测试">    CTime time(10, 50, 20);

    ++time;
    std::cout &lt;&lt; time.getHour() &lt;&lt; ":" &lt;&lt; time.getMinute() &lt;&lt; ":" &lt;&lt; time.getSecond() &lt;&lt; endl;

    time++;
    std::cout &lt;&lt; time.getHour() &lt;&lt; ":" &lt;&lt; time.getMinute() &lt;&lt; ":" &lt;&lt; time.getSecond() &lt;&lt; endl;
</code></pre>

<h3>结果</h3>

<p><img src="https://i.imgur.com/iUU9UYt.png" alt="" /></p>

<h1>源代码下载地址：</h1>

<blockquote cite='陈浩翔'>
GITHUB源码下载地址:<strong>【<a href='https://github.com/chenhaoxiang/C-Study/tree/master/20170904/code/OverloadOperator' target='_blank'>点我进行下载</a>】</strong>
</blockquote>


<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【C++】C++运算符重载的规则]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/09/02/Rules-for-operator-overloading/"/>
    <updated>2017-09-02T18:40:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/09/02/Rules-for-operator-overloading</id>
    <content type="html"><![CDATA[<p>本篇博客讲解:<br/>
运算符重载的规则，以及实例</p>

<!-- more -->


<hr />

<h1>运算符重载的规则</h1>

<p><strong>被重载的运算符必须是已经存在的C++运算符，不能重载自己创建的运算符</strong>。<br/>
运算符被重载之后，<strong>原有功能仍然保留</strong>。只是扩展了原有功能。<br/>
重载不能改变运算符运算对象的个数。<br/>
+运算符具有两个操作数，在+运算符函数作为类(例如上个例子中的CTime)的成员函数的时候，有一个参数是隐含的，也就是当前的对象，使用this指针来引用。<br/>
另一个参数通过函数参数指定。</p>

<p>可以重载的运算符：<br/>
<code>
1.算术运算符：+，-，*，/，%，   
2.逻辑运算符：&amp;&amp;，||，！  
3.关系运算符：&gt;,&lt;,=,&gt;=,&lt;=,==,!=  
4.位操作符：～，&lt;&lt;(左移)，&gt;&gt;(右移)，&amp;，^），|  
5.自增自减运算符：++，--  
6.复合赋值运算符：+=，-=，*=，/=，%=  
7.其他：&amp;(取地址符)、*、 () 、-&gt;(成员访问运算符) 、[] (下标运算符)、.new/delete、&gt;&gt;、&lt;&lt;  
</code></p>

<p>不能重载的运算符：
<code>
?:(条件运算符)
.(成员访问运算符)
*(成员指针访问运算符)
::(域运算符)
sizeof(sizeof 是运算符,而不是函数)
</code>
不需要重载的运算符
<code>
=（赋值）和&amp;(取地址符)
</code><br/>
因为编译器会为每个类自动实现一个默认的赋值运算符/取地址符的成员函数  <br/>
当然，我们可以重写这个默认的成员函数。<br/>
<code>C++ CTime.h声明
CTime&amp; operator=(CTime&amp; time);//返回的是对象的引用形式
</code>
<figure class='code'><figcaption><span>CTime.cpp定义</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">CTime</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">CTime</span><span class="o">::</span><span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="n">CTime</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">time</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//为了防止同一个对象进行赋值，需要先判断一下,判断地址是不是一样</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">this</span> <span class="o">==</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">time</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">//默认的是各个成员分别赋值</span>
</span><span class='line'><span class="n">m_nHour</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="n">m_nHour</span><span class="p">;</span>
</span><span class='line'><span class="n">m_nMinute</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="n">m_nMinute</span><span class="p">;</span>
</span><span class='line'><span class="n">m_nSecond</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="n">m_nSecond</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span><span class="c1">//返回当前这个对象</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>友元函数的运算符重载<br/>
<code>C++ CTime.h声明
//friend为友元函数的关键字,这个符号运算符重载函数的参数类型至少有一个类类型或者类的引用,也就是说，可以有一个参数不是对象
friend CTime operator+(CTime&amp; time1, CTime&amp; time2);
</code>
<figure class='code'><figcaption><span>main.cpp实现-使用类来实现</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="c1">//友元函数的运算符重载</span>
</span><span class='line'><span class="n">CTime</span> <span class="k">operator</span><span class="o">+</span><span class="p">(</span><span class="n">CTime</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">time1</span><span class="p">,</span> <span class="n">CTime</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">time2</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">hour</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">minute</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">second</span> <span class="o">=</span> <span class="n">time1</span><span class="p">.</span><span class="n">m_nSecond</span> <span class="o">+</span> <span class="n">time2</span><span class="p">.</span><span class="n">m_nSecond</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">second</span> <span class="o">&gt;</span> <span class="mi">60</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">minute</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="n">second</span> <span class="o">-=</span> <span class="mi">60</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">minute</span> <span class="o">+=</span> <span class="p">(</span><span class="n">time1</span><span class="p">.</span><span class="n">m_nMinute</span> <span class="o">+</span> <span class="n">time2</span><span class="p">.</span><span class="n">m_nMinute</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">minute</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">60</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">hour</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="n">minute</span> <span class="o">-=</span> <span class="mi">60</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">hour</span> <span class="o">+=</span> <span class="p">(</span><span class="n">time1</span><span class="p">.</span><span class="n">m_nHour</span> <span class="o">+</span> <span class="n">time2</span><span class="p">.</span><span class="n">m_nHour</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">hour</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">24</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">hour</span> <span class="o">-=</span> <span class="mi">24</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">CTime</span><span class="p">(</span><span class="n">hour</span><span class="p">,</span> <span class="n">minute</span><span class="p">,</span> <span class="n">second</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>赋值函数<br/>
普通函数和类的成员函数都可以作为类的友元，但什么时候应该使用普通函数，什么时候应该使用成员函数方式呢？</p>

<p><strong>普通函数形式的运算符函数一般都声明为类的友元函数</strong>，用以访问类的私有数据成员。<br/>
这样可以减低开销，但破坏封装性。因此建议尽量使用成员函数形式。</p>

<p><strong>一般将单目运算符重载为成员函数，将双目运算符重载为友元函数</strong></p>

<p>成员函数方式要求左侧的参数要与类的类型相同。而普通函数则要求实参顺序与形参类型顺序一致。</p>

<p>如<br/>
有的运算符必须定义为类的成员函数
<code>
=、赋值运算符
[]、下标运算符
() 函数调用运算符
</code></p>

<p>有的运算符不能定义为类的成员函数，只能定义为类的友元<br/>
<code>
&lt;&lt;、&gt;&gt;
</code></p>

<p>运算符重载可以在函数内执行任意的操作，比如可以将+定义成两个对象相减的操作<br/>
但是这样违背我们日常使用的习惯，容易使用误用，减低程序可读性，因此必须保证重载的运算符与该运算符应用于标准数据类型时所具有的功能。 </p>

<h1>源代码下载地址：</h1>

<blockquote cite='陈浩翔'>
GITHUB源码下载地址:<strong>【<a href='https://github.com/chenhaoxiang/C-Study/tree/master/20170902/code/operatorOverloadingBase' target='_blank'>点我进行下载</a>】</strong></p>
</blockquote>


<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【C++】C++运算符重载-基础]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/08/10/operator-overloading-base/"/>
    <updated>2017-08-10T18:40:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/08/10/operator-overloading-base</id>
    <content type="html"><![CDATA[<p>本篇博客讲解:<br/>
运算符重载基础，以及实例</p>

<!-- more -->


<hr />

<h1>运算符重载基础</h1>

<p>运算符重载就是对已有的运算符赋予新的含义，实现新的功能。</p>

<p>运算符重载，如“+”，它可以对int、float、string类型进行加法运算。<br/>
&ldquo;&lt;&lt;"是C++中的左移运算符，但是在输出操作中与cout配合被称为流插入运算符，可以进行输出。<br/>
&rdquo;>>&ldquo;是右移运算符，与cin配合使用被称为流提取运算符。<br/>
它们都被称为运算符重载。</p>

<p>我们也可以根据我们的需要对C++中现有的运算符进行重载，来赋予这些运算符新的含义。<br/>
如CTime类，重载+运算符，实现两个CTime对象的相加。</p>

<p>介绍运算符重载前，我们看下如何来实现两个CTime对象相加。 <br/>
CTime重载+运算符实现两个CTime对象的相加，<br/>
time1 + time2 <br/>
首先需要定义一个重载的运算符函数，此后在执行被重载的运算符时，系统将自动调用该运算符函数。<br/>
<strong>运算符重载实际上是函数的重载</strong>。</p>

<p>运算符重载的格式：返回类型 operator运算符（参数列表）<br/>
<code>
CTime operator+(CTime&amp; time1, CTime&amp; time2)
</code><br/>
 
重载的运算符函数可以作为一般的函数，也可以作为类的成员函数。<br/>
<code>
CTime operator+(CTime&amp; time) 
</code><br/>
下面通过代码来看吧
普通的，通过函数来相加:
<code>C++ Time.h中声明友元函数
friend CTime addTime(CTime&amp; time1, CTime&amp; time2);
</code>
<figure class='code'><figcaption><span>main.cpp中直接实现</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">CTime</span> <span class="n">addTime</span><span class="p">(</span><span class="n">CTime</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">time1</span><span class="p">,</span> <span class="n">CTime</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">time2</span><span class="p">)</span><span class="c1">//这里的相加是时分秒进行相加，满60进1</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">hour</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">minute</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">second</span> <span class="o">=</span> <span class="n">time1</span><span class="p">.</span><span class="n">m_nSecond</span> <span class="o">+</span> <span class="n">time2</span><span class="p">.</span><span class="n">m_nSecond</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">second</span> <span class="o">&gt;</span> <span class="mi">60</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">minute</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="n">second</span> <span class="o">-=</span> <span class="mi">60</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">minute</span> <span class="o">+=</span> <span class="p">(</span><span class="n">time1</span><span class="p">.</span><span class="n">m_nMinute</span> <span class="o">+</span> <span class="n">time2</span><span class="p">.</span><span class="n">m_nMinute</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">minute</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">60</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">hour</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="n">minute</span> <span class="o">-=</span> <span class="mi">60</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">hour</span> <span class="o">+=</span> <span class="p">(</span><span class="n">time1</span><span class="p">.</span><span class="n">m_nHour</span> <span class="o">+</span> <span class="n">time2</span><span class="p">.</span><span class="n">m_nHour</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">hour</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">24</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">hour</span> <span class="o">-=</span> <span class="mi">24</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">CTime</span><span class="p">(</span><span class="n">hour</span><span class="p">,</span><span class="n">minute</span><span class="p">,</span><span class="n">second</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//输出</span>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">CTime</span> <span class="n">time</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">20</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CTime</span> <span class="nf">time2</span><span class="p">(</span><span class="mi">12</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CTime</span> <span class="n">time3</span> <span class="o">=</span> <span class="n">addTime</span><span class="p">(</span><span class="n">time</span><span class="p">,</span> <span class="n">time2</span><span class="p">);</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">time3</span><span class="p">.</span><span class="n">getHour</span><span class="p">()</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">:&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">time3</span><span class="p">.</span><span class="n">getMinute</span><span class="p">()</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">:&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">time3</span><span class="p">.</span><span class="n">getSecond</span><span class="p">()</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">getchar</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">+</span><span class="err">号运算重载：</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">C</span><span class="o">++</span> <span class="n">Time</span><span class="p">.</span><span class="n">h</span><span class="err">中声明</span>
</span><span class='line'><span class="k">friend</span> <span class="n">CTime</span> <span class="k">operator</span><span class="o">+</span><span class="p">(</span><span class="n">CTime</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">time1</span><span class="p">,</span> <span class="n">CTime</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">time2</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">C</span><span class="o">++</span> <span class="n">main</span><span class="p">.</span><span class="n">cpp</span><span class="err">中实现</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">CTime</span> <span class="k">operator</span><span class="o">+</span><span class="p">(</span><span class="n">CTime</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">time1</span><span class="p">,</span> <span class="n">CTime</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">time2</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">hour</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">minute</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">second</span> <span class="o">=</span> <span class="n">time1</span><span class="p">.</span><span class="n">m_nSecond</span> <span class="o">+</span> <span class="n">time2</span><span class="p">.</span><span class="n">m_nSecond</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">second</span> <span class="o">&gt;</span> <span class="mi">60</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">minute</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="n">second</span> <span class="o">-=</span> <span class="mi">60</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">minute</span> <span class="o">+=</span> <span class="p">(</span><span class="n">time1</span><span class="p">.</span><span class="n">m_nMinute</span> <span class="o">+</span> <span class="n">time2</span><span class="p">.</span><span class="n">m_nMinute</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">minute</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">60</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">hour</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="n">minute</span> <span class="o">-=</span> <span class="mi">60</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">hour</span> <span class="o">+=</span> <span class="p">(</span><span class="n">time1</span><span class="p">.</span><span class="n">m_nHour</span> <span class="o">+</span> <span class="n">time2</span><span class="p">.</span><span class="n">m_nHour</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">hour</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">24</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">hour</span> <span class="o">-=</span> <span class="mi">24</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">CTime</span><span class="p">(</span><span class="n">hour</span><span class="p">,</span> <span class="n">minute</span><span class="p">,</span> <span class="n">second</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">CTime</span> <span class="n">time</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">20</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CTime</span> <span class="nf">time2</span><span class="p">(</span><span class="mi">12</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">CTime</span> <span class="n">time4</span> <span class="o">=</span> <span class="n">time</span> <span class="o">+</span> <span class="n">time2</span><span class="p">;</span> <span class="c1">//使用+号重载对两个CTime对象进行相加</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">time4</span><span class="p">.</span><span class="n">getHour</span><span class="p">()</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;:&quot;</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">time4</span><span class="p">.</span><span class="n">getMinute</span><span class="p">()</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;:&quot;</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">time4</span><span class="p">.</span><span class="n">getSecond</span><span class="p">()</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">getchar</span><span class="p">();</span>
</span><span class='line'><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>输出结果:</h2>

<p><img src="http://i.imgur.com/3xtl8kk.png" alt="" /></p>

<p>在CTime类内部定义+号重载运算符<br/>
<code>C++ Time.h中声明
CTime operator+(CTime&amp; time);
</code></p>

<pre><code class="C++ Time.cpp中实现">CTime CTime::operator+(CTime&amp; time)
{
    int hour = 0, minute = 0;
    int second = this-&gt;m_nSecond + time.m_nSecond;
    if (second &gt; 60)
    {
        minute++;
        second -= 60;
    }

    minute += (this-&gt;m_nMinute + time.m_nMinute);
    if (minute &gt; 60)
    {
        hour++;
        minute -= 60;
    }

    hour += (this-&gt;m_nHour + time.m_nHour);
    if (hour &gt; 24)
    {
        hour -= 24;
    }
    return CTime(hour, minute, second);
}
</code></pre>

<pre><code class="C++ main.cpp中调用">
int main()
{ 
    CTime time(10, 50, 20);
    CTime time2(12); 
    CTime time4 = time.operator+(time2);
    std::cout &lt;&lt; time4.getHour() &lt;&lt; ":" &lt;&lt; time4.getMinute() &lt;&lt; ":" &lt;&lt; time4.getSecond() &lt;&lt; endl;

    getchar();
    return 0;
}
</code></pre>

<p>结果和前面的是一样的。</p>

<h1>源代码下载地址：</h1>

<blockquote cite='陈浩翔'>
GITHUB源码下载地址:<strong>【<a href='https://github.com/chenhaoxiang/C-Study/tree/master/20170810/code/operatorOverloadingBase' target='_blank'>点我进行下载</a>】</strong>
</blockquote>


<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【C++】C++友元]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/06/20/c-plus-plus-friendFunction/"/>
    <updated>2017-06-20T13:38:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/06/20/c-plus-plus-friendFunction</id>
    <content type="html"><![CDATA[<p>C++中可以使用friend关键字来将函数、类声明为某个类的友元<br/>
友元包括友元函数和友元类<br/>
友元具有一些特权，可以访问private的成员<br/>
友元只能授予，不能索取，单向，不能传递(比如a是b的友元，b是c的友元，但a不是c的友元)</p>

<!-- more -->


<hr />

<h1>友元函数</h1>

<p>在类体中使用friend关键字对友元函数进行声明：<br/>
将非成员函数/一般函数声明为友元：<br/>
friend void func();  //func为非成员函数，不属于任何类<br/>
将其他类的成员函数声明为友元：<br/>
friend void CTime::getNum();//getNum为CTime类的成员。</p>

<h1>友元类</h1>

<p>在类体中使用friend关键字将某类声明为自己的友元类。<br/>
friend CTime;</p>

<p>好处就是方便，可以在其他类或方法直接访问私有成员</p>

<p>缺点：<br/>
面向对象的基本原则包括封装性和信息隐藏，而由于友元可以访问其他类的私有成员，这是对封装原则的一个破坏。因此使用友元的时候要特别慎重。</p>

<h1>实例</h1>

<pre><code class="C++ Time.h">#ifndef TIME_H
#define TIME_H 
#include "Date.h"
class CTime
{
public:
    CTime();
    CTime(int hour, int minute, int second = 0);
    CTime(int value);
    CTime(CTime&amp; time);
    ~CTime();
    void setHour(int hour);
    void setMinute(int minute);
    void setSecond(int second);

    int getHour();
    int getMinute();
    int getSecond(); 

    int getNum() const;

    //friend CDate;//声明友元类,需要声明class CDate;    这样整个类都可以访问CTime的私有成员的了,由于我们只在disPlay函数中访问，所以可以用下面的方法
    friend void CDate::disPlay(const CTime&amp; time);
    friend void func();//告诉编译器，CTime这个类，已经将func()这个函数声明为自己的友元函数，这个声明可以放在本CTime类中任何地方
private:
    int m_nHour;
    int m_nMinute;
    int m_nSecond;
    const int m_nNum;
};

#endif
</code></pre>

<pre><code class="C++ Date.h">#ifndef DATA_H
#define DATA_H

class CTime;//类的前置声明，一般情况下，是需要声明之后才可以使用的

class CDate
{
public:
    CDate(int year, int month, int day);

    //friend CTime;//在这里声明友元没用，因为友元只能授予，不能索取！
    void disPlay(const CTime&amp; time);//使用的是类的引用(引用也是使用指针来实现的),这里不声明是可以的

private:
    int m_nYear;
    int m_nMonth;
    int m_nDay;

};
#endif
</code></pre>

<p>main.cpp
<figure class='code'><figcaption><span>main.cpp</p></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span><span class="o">&lt;</span><span class="n">iostream</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span><span class="s">&quot;Time.h&quot;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Date</span><span class="p">.</span><span class="n">h</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">func</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">CTime</span> <span class="n">time</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">time</span><span class="p">.</span><span class="n">m_nHour</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">time</span><span class="p">.</span><span class="n">m_nHour</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">const</span> <span class="n">CTime</span> <span class="n">time</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">50</span><span class="p">,</span><span class="mi">20</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CTime</span> <span class="k">const</span> <span class="n">time2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">time</span><span class="p">.</span><span class="n">getNum</span><span class="p">()</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">func</span><span class="p">();</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">CDate</span> <span class="n">date</span><span class="p">(</span><span class="mi">2015</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">26</span><span class="p">);</span>
</span><span class='line'><span class="n">date</span><span class="p">.</span><span class="n">disPlay</span><span class="p">(</span><span class="n">time</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">getchar</span><span class="p">();</span>
</span><span class='line'><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>演示结果</h2>

<p><img src="http://i.imgur.com/3zb3loZ.png" alt="" /></p>

<h1>源代码下载地址：</h1>

<blockquote cite='陈浩翔'>
GITHUB源码下载地址:<strong>【<a href='https://github.com/chenhaoxiang/C-Study/tree/master/20170620/code/friendFunction' target='_blank'>点我进行下载</a>】</strong></p>
</blockquote>


<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
</feed>
