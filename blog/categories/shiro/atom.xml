<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Shiro | 谙忆-人生之旅]]></title>
  <link href="http://chenhaoxiang.github.io/blog/categories/shiro/atom.xml" rel="self"/>
  <link href="http://chenhaoxiang.github.io/"/>
  <updated>2018-01-27T20:08:08+08:00</updated>
  <id>http://chenhaoxiang.github.io/</id>
  <author>
    <name><![CDATA[陈浩翔]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[【Shiro】Shiro从小白到大神(三)-权限认证(授权)]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/09/09/Shiro-went-from-white-to-great-3/"/>
    <updated>2017-09-09T18:27:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/09/09/Shiro-went-from-white-to-great-3</id>
    <content type="html"><![CDATA[<p>本节讲权限认证，也就是授权<br/>
基于角色的访问控制和基于权限的访问控制的小实例<br/>
以及注解式授权和JSP标签授权详解</p>

<!-- more -->


<hr />

<h1>权限认证</h1>

<h2>权限认证核心要素</h2>

<p>权限认证，也就是访问控制，即在应用中控制谁能访问哪些资源<br/>
在权限认证中，最核心的三个要素是：权限，角色和用户 (资源也算一个要素，但不是最核心的)<br/>
权限，即操作资源的 权限，比如访问某个页面，以及对某个模块的数据的添加，修改，删除，查看的权利(整合以后，其实就是一些对URL请求的权限)<br/>
角色，是权限的集合，一种角色可以包含多种权限(将权限赋给角色)  <br/>
用户，在Shiro中，代表访问系统的用户，即Subject(将角色赋给用户)<br/>
英文好的，可以去看官方文档介绍: <a href="http://shiro.apache.org/authorization.html">http://shiro.apache.org/authorization.html</a></p>

<h2>授权</h2>

<p><img src="https://i.imgur.com/UNEeLs2.png" alt="" /></p>

<h3>编程式授权(Programmatic Authorization)</h3>

<h4>&mdash;-基于角色的访问控制</h4>

<p>首先配置ini文件:
<code>
[users]
;基于角色的访问控制的配置文件
chx=123456,role1,role2
;加角色，密码后面是拥有的角色
jack=123456,role1
</code></p>

<p>测试类
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">cn</span><span class="o">.</span><span class="na">chenhaoxiang</span><span class="o">.</span><span class="na">shiro</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">cn.chenhaoxiang.common.ShiroUtils</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.shiro.subject.Subject</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">strong</span><span class="o">&gt;</span>
</span><span class='line'> <span class="o">*</span> <span class="n">基于角色的访问控制</span>
</span><span class='line'> <span class="o">*/</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RoleTest</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">RoleTest</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="o">/&lt;/</span><span class="n">strong</span><span class="o">&gt;</span>
</span><span class='line'>     <span class="o">*</span> <span class="n">hasRole</span><span class="o">(</span><span class="n">String</span> <span class="n">roleName</span><span class="o">)</span>  <span class="n">Returns</span> <span class="kc">true</span> <span class="k">if</span> <span class="n">the</span> <span class="n">Subject</span> <span class="n">is</span> <span class="n">assigned</span> <span class="n">the</span> <span class="n">specified</span> <span class="n">role</span><span class="o">,</span> <span class="kc">false</span> <span class="n">otherwise</span><span class="o">.</span>
</span><span class='line'>     <span class="o">*</span> <span class="n">hasRoles</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">roleNames</span><span class="o">)</span> <span class="n">Returns</span> <span class="n">a</span> <span class="n">array</span> <span class="n">of</span> <span class="n">hasRole</span> <span class="n">results</span> <span class="n">corresponding</span> <span class="n">to</span> <span class="n">the</span> <span class="n">indices</span> <span class="n">in</span> <span class="n">the</span> <span class="n">method</span> <span class="n">argument</span><span class="o">.</span> <span class="n">Useful</span> <span class="n">as</span> <span class="n">a</span> <span class="n">performance</span> <span class="n">enhancement</span> <span class="k">if</span> <span class="n">many</span> <span class="n">role</span> <span class="n">checks</span> <span class="n">need</span> <span class="n">to</span> <span class="n">be</span> <span class="nf">performed</span> <span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">g</span><span class="o">.</span> <span class="n">when</span> <span class="n">customizing</span> <span class="n">a</span> <span class="n">complex</span> <span class="n">view</span><span class="o">)</span>
</span><span class='line'>     <span class="o">*</span> <span class="n">hasAllRoles</span><span class="o">(</span><span class="n">Collection</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">roleNames</span><span class="o">)</span> <span class="n">Returns</span> <span class="kc">true</span> <span class="k">if</span> <span class="n">the</span> <span class="n">Subject</span> <span class="n">is</span> <span class="n">assigned</span> <span class="n">all</span> <span class="n">of</span> <span class="n">the</span> <span class="n">specified</span> <span class="n">roles</span><span class="o">,</span> <span class="kc">false</span> <span class="n">otherwise</span><span class="o">.</span>
</span><span class='line'>     <span class="o">*</span> <span class="n">hasRole</span> <span class="n">判断是否拥有某个角色</span>
</span><span class='line'>     <span class="o">*</span>
</span><span class='line'>     <span class="o">*</span> <span class="n">hasRoles</span> <span class="n">判断拥有某个角色</span>  <span class="n">返回的是boolean</span><span class="o">[]</span>  <span class="n">用来高效判断对应角色拥有</span>
</span><span class='line'>     <span class="o">*</span> <span class="n">hasAllRoles</span> <span class="n">判断拥有所有角色</span>  <span class="n">拥有传入的全部角色的话</span><span class="err">，</span><span class="n">才返回true</span>
</span><span class='line'>     <span class="o">*</span>
</span><span class='line'>     <span class="o">*/</span>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testHasRole</span><span class="o">(){</span>
</span><span class='line'>        <span class="n">Subject</span> <span class="n">subject</span> <span class="o">=</span> <span class="n">ShiroUtils</span><span class="o">.</span><span class="na">login</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nl">classpath:</span><span class="n">shiro_role</span><span class="o">.</span><span class="na">ini</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">chx</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="mi">123456</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;);</span>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">subject</span><span class="o">.</span><span class="na">hasRole</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">role1</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)?&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">有role1这个角色</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;:&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">没有role1这个角色</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;);</span>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">subject</span><span class="o">.</span><span class="na">hasRole</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">role2</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)?&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">有role2这个角色</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;:&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">没有role2这个角色</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="n">Subject</span> <span class="n">subject2</span> <span class="o">=</span> <span class="n">ShiroUtils</span><span class="o">.</span><span class="na">login</span><span class="o">(</span><span class="s">&quot;classpath:shiro_role.ini&quot;</span><span class="o">,</span><span class="s">&quot;jack&quot;</span><span class="o">,</span><span class="s">&quot;123456&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">subject2</span><span class="o">.</span><span class="na">hasRole</span><span class="o">(</span><span class="s">&quot;role1&quot;</span><span class="o">)?</span><span class="s">&quot;有role1这个角色&quot;</span><span class="o">:</span><span class="s">&quot;没有role1这个角色&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">subject2</span><span class="o">.</span><span class="na">hasRole</span><span class="o">(</span><span class="s">&quot;role2&quot;</span><span class="o">)?</span><span class="s">&quot;有role2这个角色&quot;</span><span class="o">:</span><span class="s">&quot;没有role2这个角色&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// hasRoles 判断拥有某个角色  返回的是boolean[]  用来高效判断对应角色拥有</span>
</span><span class='line'>    <span class="kt">boolean</span><span class="o">[]</span> <span class="n">results</span> <span class="o">=</span> <span class="n">subject</span><span class="o">.</span><span class="na">hasRoles</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&quot;role1&quot;</span><span class="o">,</span><span class="s">&quot;role2&quot;</span><span class="o">,</span><span class="s">&quot;role3&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">results</span><span class="o">[</span><span class="mi">0</span><span class="o">]?</span><span class="s">&quot;有role1这个角色&quot;</span><span class="o">:</span><span class="s">&quot;没有role1这个角色&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">results</span><span class="o">[</span><span class="mi">1</span><span class="o">]?</span><span class="s">&quot;有role2这个角色&quot;</span><span class="o">:</span><span class="s">&quot;没有role2这个角色&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">results</span><span class="o">[</span><span class="mi">2</span><span class="o">]?</span><span class="s">&quot;有role2这个角色&quot;</span><span class="o">:</span><span class="s">&quot;没有role3这个角色&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//hasAllRoles 判断拥有所有角色  拥有传入的全部角色的话，才返回true</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">subject</span><span class="o">.</span><span class="na">hasAllRoles</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&quot;role1&quot;</span><span class="o">,</span><span class="s">&quot;role2&quot;</span><span class="o">))?</span><span class="s">&quot;有role1和role2这两个个角色&quot;</span><span class="o">:</span><span class="s">&quot;role1，role2这两个角色不全部有&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">subject</span><span class="o">.</span><span class="na">logout</span><span class="o">();</span><span class="c1">//退出</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * CheckRole</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testCheckRole</span><span class="o">(){</span>
</span><span class='line'>    <span class="n">Subject</span> <span class="n">subject</span> <span class="o">=</span> <span class="n">ShiroUtils</span><span class="o">.</span><span class="na">login</span><span class="o">(</span><span class="s">&quot;classpath:shiro_role.ini&quot;</span><span class="o">,</span><span class="s">&quot;chx&quot;</span><span class="o">,</span><span class="s">&quot;123456&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">subject</span><span class="o">.</span><span class="na">checkRole</span><span class="o">(</span><span class="s">&quot;role1&quot;</span><span class="o">);</span><span class="c1">//没有返回值</span>
</span><span class='line'>    <span class="c1">//subject.checkRole(&quot;role3&quot;);//没有这个角色会抛出异常 //org.apache.shiro.authz.UnauthorizedException: Subject does not have role [role211]</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//checkRoles(Collection&amp;lt;String&amp;gt; roleNames)</span>
</span><span class='line'>    <span class="n">subject</span><span class="o">.</span><span class="na">checkRoles</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&quot;role1&quot;</span><span class="o">,</span><span class="s">&quot;role2&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="c1">//subject.checkRoles(Arrays.asList(&quot;role1&quot;,&quot;role2&quot;,&quot;role3&quot;));//没有全部角色会抛出异常 //org.apache.shiro.authz.UnauthorizedException: Subject does not have role [role3]</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//checkRoles(String... roleNames)和checkRoles(Collection&amp;lt;String&amp;gt; roleNames)意思一样，传入的参数类型不同</span>
</span><span class='line'>    <span class="n">subject</span><span class="o">.</span><span class="na">checkRoles</span><span class="o">(</span><span class="s">&quot;role1&quot;</span><span class="o">,</span><span class="s">&quot;role2&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">subject</span><span class="o">.</span><span class="na">logout</span><span class="o">();</span><span class="c1">//退出</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>演示结果自己跑一遍就出来啦</p>

<h4>&mdash;-基于权限的访问控制</h4>

<p>配置ini文件:
<code>
[users]
;基于权限的访问控制的配置文件
chx=123456,role1,role2
;加角色，密码后面是拥有的角色
jack=123456,role1
[roles]
;不判断角色，直接判断权限
role1=user:select
;role1拥有select权限 这里的user:select权限名字是自己定义的
role2=user:add,user:update,user:delete
;权限无非就是增删改查
</code></p>

<p>测试类:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">cn</span><span class="o">.</span><span class="na">chenhaoxiang</span><span class="o">.</span><span class="na">shiro</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">cn.chenhaoxiang.common.ShiroUtils</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.shiro.subject.Subject</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;*</span>
</span><span class='line'> <span class="o">*</span> <span class="n">基于权限的访问控制</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PermissionTest</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">private</span> <span class="kd">static</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">PermissionTest</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * isPermitted(Permission p)  isPermitted(String str)  如果是拥有访问某个资源的权限,返回true  单个权限判断</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * isPermitted(String... var1);  分别判断多个权限  返回boolean[]</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * isPermittedAll(String... var1);  拥有所有权限才返回true</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testIsPermitted</span><span class="o">(){</span>
</span><span class='line'>    <span class="c1">//Subject subject = ShiroUtils.login(&quot;classpath:shiro_permission.ini&quot;,&quot;chx&quot;,&quot;123456&quot;);</span>
</span><span class='line'>    <span class="n">Subject</span> <span class="n">subject</span> <span class="o">=</span> <span class="n">ShiroUtils</span><span class="o">.</span><span class="na">login</span><span class="o">(</span><span class="s">&quot;classpath:shiro_permission.ini&quot;</span><span class="o">,</span><span class="s">&quot;jack&quot;</span><span class="o">,</span><span class="s">&quot;123456&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">subject</span><span class="o">.</span><span class="na">isPermitted</span><span class="o">(</span><span class="s">&quot;user:select&quot;</span><span class="o">)?</span><span class="s">&quot;有user:select权限&quot;</span><span class="o">:</span><span class="s">&quot;没有user:select权限&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">subject</span><span class="o">.</span><span class="na">isPermitted</span><span class="o">(</span><span class="s">&quot;user:update&quot;</span><span class="o">)?</span><span class="s">&quot;有user:update权限&quot;</span><span class="o">:</span><span class="s">&quot;没有user:update权限&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">boolean</span> <span class="n">results</span><span class="o">[]</span> <span class="o">=</span> <span class="n">subject</span><span class="o">.</span><span class="na">isPermitted</span><span class="o">(</span><span class="s">&quot;user:select&quot;</span><span class="o">,</span><span class="s">&quot;user:update&quot;</span><span class="o">,</span><span class="s">&quot;user:delete&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">results</span><span class="o">[</span><span class="mi">0</span><span class="o">]?</span><span class="s">&quot;有user:select权限&quot;</span><span class="o">:</span><span class="s">&quot;没有user:select权限&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">results</span><span class="o">[</span><span class="mi">1</span><span class="o">]?</span><span class="s">&quot;有user:update权限&quot;</span><span class="o">:</span><span class="s">&quot;没有user:update权限&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">results</span><span class="o">[</span><span class="mi">2</span><span class="o">]?</span><span class="s">&quot;有user:delete权限&quot;</span><span class="o">:</span><span class="s">&quot;没有user:delete权限&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">subject</span><span class="o">.</span><span class="na">isPermittedAll</span><span class="o">(</span><span class="s">&quot;user:select&quot;</span><span class="o">,</span><span class="s">&quot;user:update&quot;</span><span class="o">)?</span><span class="s">&quot;有user:select和user:update权限&quot;</span><span class="o">:</span><span class="s">&quot;user:select和user:update权限不全有&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">subject</span><span class="o">.</span><span class="na">logout</span><span class="o">();</span><span class="c1">//退出</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * checkPermission(String var1)  没有这一个权限就抛出异常</span>
</span><span class='line'><span class="cm"> * checkPermissions(String... var1)  没有这些权限就抛出异常</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testCheckPermitted</span><span class="o">(){</span>
</span><span class='line'>    <span class="c1">//Subject subject = ShiroUtils.login(&quot;classpath:shiro_permission.ini&quot;,&quot;chx&quot;,&quot;123456&quot;);</span>
</span><span class='line'>    <span class="n">Subject</span> <span class="n">subject</span> <span class="o">=</span> <span class="n">ShiroUtils</span><span class="o">.</span><span class="na">login</span><span class="o">(</span><span class="s">&quot;classpath:shiro_permission.ini&quot;</span><span class="o">,</span><span class="s">&quot;jack&quot;</span><span class="o">,</span><span class="s">&quot;123456&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">subject</span><span class="o">.</span><span class="na">checkPermission</span><span class="o">(</span><span class="s">&quot;user:select&quot;</span><span class="o">);</span><span class="c1">//检查是否有某个权限  没有权限则抛出异常</span>
</span><span class='line'>    <span class="c1">//subject.checkPermission(&quot;user:delete&quot;);//org.apache.shiro.authz.UnauthorizedException: Subject does not have permission [user:delete]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">subject</span><span class="o">.</span><span class="na">checkPermissions</span><span class="o">(</span><span class="s">&quot;user:select&quot;</span><span class="o">,</span><span class="s">&quot;user:update&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">subject</span><span class="o">.</span><span class="na">logout</span><span class="o">();</span><span class="c1">//退出</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">讲了几个org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">shiro</span><span class="o">.</span><span class="na">subject</span><span class="o">.</span><span class="na">Subject的函数</span><span class="err">。</span>
</span><span class='line'><span class="n">其实官方文档都有介绍的</span>
</span><span class='line'>
</span><span class='line'><span class="err">###</span><span class="n">注解式授权</span>
</span><span class='line'><span class="n">更加详细的介绍可以去官网查看</span><span class="err">：</span> <span class="nl">http:</span><span class="c1">//shiro.apache.org/authorization.html  </span>
</span><span class='line'>
</span><span class='line'><span class="n">首先你的Java版本5</span><span class="o">+</span><span class="n">才能集成shiro的注解</span>
</span><span class='line'><span class="err">####</span><span class="n">RequiresAuthentication注解</span>
</span><span class='line'><span class="n">RequiresAuthentication注解需要在当前会话中对当前的Subject进行身份验证</span><span class="err">，</span><span class="n">以便访问或调用该注解的类</span><span class="o">/</span><span class="n">实例</span><span class="o">/</span><span class="n">方法</span><span class="err">。</span>
</span><span class='line'><span class="n">也就是要求当前Subject已经在当前的Session中被验证通过才能被访问或调用</span>
</span><span class='line'><span class="nl">比如:</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nd">@RequiresAuthentication</span> <span class="c1">//判断验证有没有通过</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">updateAccount</span><span class="o">(</span><span class="n">Account</span> <span class="n">userAccount</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//this method will only be invoked by a</span>
</span><span class='line'>    <span class="c1">//Subject that is guaranteed authenticated</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">hellip</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="nl">基本等同于下面的代码:</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">java</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">updateAccount</span><span class="o">(</span><span class="n">Account</span> <span class="n">userAccount</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">SecurityUtils</span><span class="o">.</span><span class="na">getSubject</span><span class="o">().</span><span class="na">isAuthenticated</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">AuthorizationException</span><span class="o">(&amp;</span><span class="n">hellip</span><span class="o">;);</span>
</span><span class='line'>    <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">//Subject is guaranteed authenticated here</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h4>RequiresGuest注解</h4>

<p>要求当前的Subject是一个'guest'(游客),也就是说，必须是在之前的session中没有被验证或被记住才能被访问和调用<br/>
例如:<br/>
<code>java
@RequiresGuest
public void signUp(User newUser) {
    //this method will only be invoked by a
    //Subject that is unknown/anonymous
    ...
}
</code>
基本等价于下面的代码:<br/>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">signUp</span><span class="o">(</span><span class="n">User</span> <span class="n">newUser</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Subject</span> <span class="n">currentUser</span> <span class="o">=</span> <span class="n">SecurityUtils</span><span class="o">.</span><span class="na">getSubject</span><span class="o">();</span>
</span><span class='line'>    <span class="n">PrincipalCollection</span> <span class="n">principals</span> <span class="o">=</span> <span class="n">currentUser</span><span class="o">.</span><span class="na">getPrincipals</span><span class="o">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">principals</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;</span><span class="n">amp</span><span class="o">;&amp;</span><span class="n">amp</span><span class="o">;</span> <span class="o">!</span><span class="n">principals</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//known identity - not a guest:</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">AuthorizationException</span><span class="o">(&amp;</span><span class="n">hellip</span><span class="o">;);</span>
</span><span class='line'>    <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">//Subject is guaranteed to be a &#39;guest&#39; here</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h4>RequiresPermissions注解</h4>

<p>RequiresPermissions注解要求当前Subject允许一个或多个权限来执行带注释的方法。<br/>
也就是说，必须有这个权限才能访问<br/>
例如:<br/>
<code>java
@RequiresPermissions("account:create") //必须有account:create权限,多个权限之间用逗号隔开
public void createAccount(Account account) {
    //this method will only be invoked by a Subject
    //that is permitted to create an account
    ...
}
</code>
基本等价于：<br/>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">createAccount</span><span class="o">(</span><span class="n">Account</span> <span class="n">account</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Subject</span> <span class="n">currentUser</span> <span class="o">=</span> <span class="n">SecurityUtils</span><span class="o">.</span><span class="na">getSubject</span><span class="o">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">subject</span><span class="o">.</span><span class="na">isPermitted</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nl">account:</span><span class="n">create</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;))</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">AuthorizationException</span><span class="o">(&amp;</span><span class="n">hellip</span><span class="o">;);</span>
</span><span class='line'>    <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">//Subject is guaranteed to be permitted here</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h4>RequiresRoles注解</h4>

<p>RequiresRoles注解要求当前Subject拥有所有指定的角色。如果它们没有所有的角色，则不会执行该方法，并抛出AuthorizationException</p>

<p>例如:<br/>
<code>java
@RequiresRoles("administrator")
public void deleteUser(User user) {
    //this method will only be invoked by an administrator
    ...
}
</code>
基本等同于以下代码:<br/>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">deleteUser</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Subject</span> <span class="n">currentUser</span> <span class="o">=</span> <span class="n">SecurityUtils</span><span class="o">.</span><span class="na">getSubject</span><span class="o">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">subject</span><span class="o">.</span><span class="na">hasRole</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">administrator</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;))</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">AuthorizationException</span><span class="o">(&amp;</span><span class="n">hellip</span><span class="o">;);</span>
</span><span class='line'>    <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">//Subject is guaranteed to be an &#39;administrator&#39; here</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h4>RequiresUser注解</h4>

<p>RequiresUser注解 需要当前的Subject是一个应用程序的用户 才能被所注解的类/实例/方法访问或者调用。<br/>
一个"应用程序用户"被定义一个拥有已知身份，或在当前session中通过验证被确认，或者在之前的session中的"RememberMe"服务被记住<br/>
也就是说，必须是某个用户</p>

<p>例如:<br/>
<code>java
@RequiresUser
public void updateAccount(Account account) {
    //this method will only be invoked by a 'user'
    //i.e. a Subject with a known identity
    ...
}
</code><br/>
基本等同于下面代码:<br/>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">updateAccount</span><span class="o">(</span><span class="n">Account</span> <span class="n">account</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Subject</span> <span class="n">currentUser</span> <span class="o">=</span> <span class="n">SecurityUtils</span><span class="o">.</span><span class="na">getSubject</span><span class="o">();</span>
</span><span class='line'>    <span class="n">PrincipalCollection</span> <span class="n">principals</span> <span class="o">=</span> <span class="n">currentUser</span><span class="o">.</span><span class="na">getPrincipals</span><span class="o">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">principals</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">principals</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//no identity - they&amp;rsquo;re anonymous, not allowed:</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">AuthorizationException</span><span class="o">(&amp;</span><span class="n">hellip</span><span class="o">;);</span>
</span><span class='line'>    <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">//Subject is guaranteed to have a known identity here</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>JSP标签授权</h3>

<p>必须添加shiro-web.jar</p>

<p>在jsp页面中引入:
<code>jsp
&lt;%@ taglib prefix="shiro" uri="http://shiro.apache.org/tags" %&gt;
</code></p>

<h4>guest标签</h4>

<p>用户没有身份验证时显示相应信息，即游客访问信息<br/>
例如:<br/>
<code>jsp
&lt;shiro:guest&gt;
    Hi there!  Please &lt;a href="login.jsp"&gt;Login&lt;/a&gt; or &lt;a href="signup.jsp"&gt;Signup&lt;/a&gt; today!
&lt;/shiro:guest&gt;
</code>
在这里&lt;shiro:guest>标签内的文字，如果用户没有登录才会显示出来,也就是游客</p>

<h4>user标签</h4>

<p>只有在当前Subject被认为是“用户”时，用户标记才会显示其包装内容。<br/>
在这个上下文中，“用户”被定义为一个具有已知身份的主题，要么是成功的身份验证，要么是来自“记住我”的服务。  <br/>
注意，这个标记与经过身份验证的标记有语义上的不同，它比这个标记更加严格。<br/>
例如:<br/>
<code>jsp
&lt;shiro:user&gt;
    Welcome back John!  Not John? Click &lt;a href="login.jsp"&gt;here&lt;a&gt; to login.
&lt;/shiro:user&gt;
</code>
user标签和guest标签逻辑相反</p>

<h4>authenticated标签</h4>

<p>仅当当前用户在当前会话中成功验证时才显示正文内容。<br/>
它比“用户”标签更具限制性。它在逻辑上与“notAuthenticated”标记相反。<br/>
只有在当前Subject在当前会话中成功验证的情况下，经过身份验证的标记才会显示其包装内容。<br/>
它是一个比用户更严格的标记，用来保证敏感工作流中的标识。也就是说，通过记住我登录的无法访问到！！！<br/>
例如:<br/>
<code>jsp
&lt;shiro:authenticated&gt;
    &lt;a href="updateAccount.jsp"&gt;Update your contact information&lt;/a&gt;.
&lt;/shiro:authenticated&gt;
</code></p>

<h4>notAuthenticated标签</h4>

<p>如果当前Subject在当前会话中尚未成功验证，则未验证标记将显示其包装内容。<br/>
也就是用户没有身份验证通过，即没有调用Subject.login进行登录，包括记住我自动登录的也属于未进行身份验证这个notAuthenticated标签！</p>

<p>例如:<br/>
<code>jsp
&lt;shiro:notAuthenticated&gt;
    Please &lt;a href="login.jsp"&gt;login&lt;/a&gt; in order to update your credit card information.
&lt;/shiro:notAuthenticated&gt;
</code></p>

<h4>principal标签</h4>

<p>输出用户信息，会调用toString()方法<br/>
例如:<br/>
<code>jsp
Hello, &lt;shiro:principal/&gt;, how are you today?
</code></p>

<p>相当于调用以下代码:<br/>
<code>jsp
Hello, &lt;%= SecurityUtils.getSubject().getPrincipal().toString() %&gt;, how are you today?
</code></p>

<h5>通过类型</h5>

<p>如果你不想获取所有的，比如在用户名和用户id之间，我想获取用户id，可以通过下面这种方式:<br/>
<code>jsp
User ID: &lt;principal type="java.lang.Integer"/&gt;
</code>
等同于:<br/>
<code>jsp
User ID: &lt;%= SecurityUtils.getSubject().getPrincipals().oneByType(Integer.class).toString() %&gt;
</code></p>

<h5>通过属性名</h5>

<p>但是，当遇到复杂的情况时，上面的就不行了，毕竟可能不止一个Integer，这个时候就可以通过属性名了。<br/>
通过getter方法获取的<br/>
例如:<br/>
<code>jsp
Hello, &lt;shiro:principal property="firstName"/&gt;, how are you today?
</code>
相当于下面的代码:<br/>
<code>jsp
Hello, &lt;%= SecurityUtils.getSubject().getPrincipal().getFirstName().toString() %&gt;, how are you today?
</code>
或者说，可以结合type属性：<br/>
<code>jsp
Hello, &lt;shiro:principal type="com.foo.User" property="firstName"/&gt;, how are you today?
</code>
也就是如下代码的逻辑:<br/>
<code>jsp
Hello, &lt;%= SecurityUtils.getSubject().getPrincipals().oneByType(com.foo.User.class).getFirstName().toString() %&gt;, how are you today?
</code></p>

<h4>hasRole标签</h4>

<p>只有当当前Subject被分配指定角色时，hasRole标记才会显示其包装内容</p>

<p>例如:<br/>
<code>jsp
&lt;shiro:hasRole name="administrator"&gt;
    &lt;a href="admin.jsp"&gt;Administer the system&lt;/a&gt;
&lt;/shiro:hasRole&gt;
</code></p>

<h4>lacksRole标签</h4>

<p>如果当前Subject没有分配指定的角色，则将显示其包装内容。<br/>
<code>jsp
&lt;shiro:lacksRole name="administrator"&gt;
    Sorry, you are not allowed to administer the system.
&lt;/shiro:lacksRole&gt;
</code>
lacksRole标签与hasRole标签的逻辑相反。</p>

<h4>hasAnyRole标签</h4>

<p>如果当前Subject从一个由逗号分隔的角色名称列表中具有了任一指定的角色，那么hasAnyRole标记将显示其包装内容。<br/>
<code>jsp
&lt;shiro:hasAnyRoles name="developer, project manager, administrator"&gt;
    You are either a developer, project manager, or administrator.
&lt;/shiro:hasAnyRoles&gt;
</code>
只要有其中一个角色，即显示主体内容</p>

<h4>hasPermission标签</h4>

<p>如果当前Subject有权限则显示其包装的内容<br/>
<code>jsp
&lt;shiro:hasPermission name="user:create"&gt;
    &lt;a href="createUser.jsp"&gt;Create a new User&lt;/a&gt;
&lt;/shiro:hasPermission&gt;
</code></p>

<h4>lacksPermission标签</h4>

<p>如果当前Subject没有该权限则显示其包装的内容<br/>
<code>jsp
&lt;shiro:lacksPermission name="user:delete"&gt;
    Sorry, you are not allowed to delete user accounts.
&lt;/shiro:lacksPermission&gt;
</code>
lacksPermission标签与hasPermission标签的逻辑相反</p>

<h2>深入理解Apache Shiro的Permissions</h2>

<h3>通配符的权限</h3>

<h4>单个权限: 直接起一个字符串名即可</h4>

<p>例如: queryPrinter权限-查询权限<br/>
<code>java
subject.isPermitted("queryPrinter")
</code>
基本等同于:<br/>
<code>java
subject.isPermitted( new WildcardPermission("queryPrinter") )
</code>
第二种方式基本不用，用第一种方式即可</p>

<h4>多个权限: 通配符权限支持多个级别或部分的概念。</h4>

<p>下面使用":&ldquo;用于分隔权限字符串下一部分的特殊字符。<br/>
<code>java
printer:query
printer:print
printer:manage
</code>
即可配置多个权限</p>

<p>也可以用多值来配置：<br/>
<code>java
printer:print,query
</code>
验证查询权限:<br/>
<code>java
subject.isPermitted("printer:query")
</code></p>

<h4>单个资源的所有权限</h4>

<p>比如我们有这些权限:<br/>
<code>java
printer:query,print,manage
</code>
相当于:<br/>
<code>java
printer:*
</code>
使用第二种方法使用通配符比显式地列出动作要更好，因为如果以后向应用程序添加了一个新操作，则不需要更新在该部分中使用通配符的权限。</p>

<h4>所有资源的某个权限</h4>

<p>还可以在通配符权限字符串的任何部分使用通配符令牌<br/>
<code>
*:view
</code>
所有资源的view权限<br/>
也就是说对“foo:view”(或其他的:view)的任何权限检查将返回true</p>

<h4>实例级别的权限控制</h4>

<p>通配符权限的另一个常见用法是建立实例级访问控制列表。<br/>
在这个权限中，您将使用三个部分——第一个是域，第二个是动作，第三个是被执行的实例(标识)。</p>

<h4>单个实例的单个权限</h4>

<pre><code class="java">printer:query:lp7200
printer:print:epsoncolor
</code></pre>

<p>比如你拥有printer的query权限，打印机的id为lp7200，也就是拥有这类printer的query权限</p>

<p>如果您将这些权限授予用户，那么它们就可以在特定的实例上执行特定的行为。然后你可以在代码中做一个检查:<br/>
<code>java
if ( SecurityUtils.getSubject().isPermitted("printer:query:lp7200") {
    // Return the current jobs on printer lp7200 }
}
</code></p>

<h4>所有实例的单个权限</h4>

<pre><code class="java">printer:print:*
</code></pre>

<p>也就是说，具有所有printer的print权限，相当于前面的单个资源的多个权限</p>

<h4>所有实例的所有权限</h4>

<pre><code class="java">printer:*:*
</code></pre>

<h4>单个实例的所有权限</h4>

<pre><code class="java">printer:*:lp7200
</code></pre>

<h4>单个实例的多个权限</h4>

<pre><code class="java">printer:query,print:lp7200
</code></pre>

<p>query和print之间用逗号隔开<br/>
在实际开发中，基本上用不到实例级别的权限控制</p>

<p>关于权限分配的最后一件事是:末尾丢失的部分意味着用户可以访问与该部分对应的所有值。换句话说,
<code>
printer:print
就相当于:
printer:print:*
</code>
<code>
printer
单个权限相当于
printer:*:*
</code></p>

<p>但是注意！
<code>
printer:lp7200
和
printer:*:lp7200
是不同的！！！
</code>
因为这不是末尾的*</p>

<h3>检查权限</h3>

<p>虽然权限分配使用通配符构造相当多(“printer:<em>”=打印到任何printer)，但在运行时的权限检查应该始终基于可能的最特定的权限字符串。<br/>
比如:如果用户有一个用户界面，他们想要打印一个文档到lp7200打印机，你应该检查用户是否允许执行这个代码<br/>
<code>java
if ( SecurityUtils.getSubject().isPermitted("printer:print:lp7200") ) {
    //print the document to the lp7200 printer }
}
</code>
这个检查非常具体，并且明确地反映了用户在那个时候正在尝试做什么。<br/>
但是，如下代码是不对的:<br/>
<code>java
if ( SecurityUtils.getSubject().isPermitted("printer:print") ) {
    //print the document }
}
</code>
因为第二个示例说“您必须能够打印到任何打印机，以便执行以下代码块”。但请记住，“printer:print”等同于“printer:print:</em>”!</p>

<p>因此，这是一个不正确的检查。<br/>
如果当前用户没有能力打印到任何打印机，但他们确实有打印的能力，比如lp7200和epsoncolor打印机。<br/>
然而，上面的第二个例子永远不会允许他们打印到lp7200打印机，即使他们已经获得了这种能力!</p>

<p>因此，经验法则是在执行权限检查时使用最特殊的权限字符串。<br/>
当然，如果您真的只想执行代码块，如果用户被允许打印到任何打印机(可能)，那么第二个方法可能是应用程序中的另一个有效的检查。<br/>
您的应用程序将决定什么检查是有意义的，但是一般来说，越具体越好。</p>

<p>为什么运行时权限检查应该尽可能具体，但是权限分配可以更通用一些呢?<br/>
这是因为权限检查是由隐含逻辑计算的，而不是平等检查。</p>

<p>也就是说，如果用户被分配给"user:<em>&ldquo;权限，这意味着用户可以执行"user:view"操作。字符串"user:</em>"显然不等于"user:view"，但前者暗示后者。"user:*"描述了由"user:view"定义的功能的超集。</p>

<p>为了支持隐含规则，所有权限都被翻译到实现org.apache.shiro.authz的对象实例的权限接口中。<br/>
这就是说，隐含逻辑可以在运行时执行，而且隐含逻辑通常比简单的字符串等式检查更复杂。<br/>
本文档中描述的所有通配符行为实际上都是由org.apache.shiro.authz.permission.WildcardPermission类实现</p>

<p>下面是一些通配符的权限字符串，它显示了访问的含义:<br/>
<code>
user:*
</code>
暗指还能删除用户的能力:<br/>
<code>
user:delete
</code></p>

<p>但是:<br/>
<code>
user:*:12345
</code>
也就是说，还可以使用实例12345更新用户帐户:<br/>
<code>
user:update:12345
</code>
<code>
printer
暗示了打印机的任何功能，比如:
printer:print
</code></p>

<h2>授权流程</h2>

<p><img src="https://i.imgur.com/Pm5Z7DE.png" alt="" /></p>

<p>授权其实就是查看有没有权限，有就授权给它</p>

<p>授权步骤:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Step</span> <span class="mi">1</span><span class="o">:</span> <span class="n">Application</span> <span class="n">or</span> <span class="n">framework</span> <span class="n">code</span> <span class="n">invokes</span> <span class="n">any</span> <span class="n">of</span> <span class="n">the</span> <span class="n">Subject</span> <span class="n">hasRole</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;,</span> <span class="n">checkRole</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;,</span> <span class="n">isPermitted</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;,</span> <span class="n">or</span> <span class="n">checkPermission</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">method</span> <span class="n">variants</span><span class="o">,</span> <span class="n">passing</span> <span class="n">in</span> <span class="n">whatever</span> <span class="n">permission</span> <span class="n">or</span> <span class="n">role</span> <span class="n">representation</span> <span class="n">is</span> <span class="n">required</span><span class="o">.&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Step</span> <span class="mi">2</span><span class="o">:</span> <span class="n">The</span> <span class="n">Subject</span> <span class="n">instance</span><span class="o">,</span> <span class="n">typically</span> <span class="n">a</span> <span class="nf">DelegatingSubject</span> <span class="o">(</span><span class="n">or</span> <span class="n">a</span> <span class="n">subclass</span><span class="o">)</span> <span class="n">delegates</span> <span class="n">to</span> <span class="n">the</span> <span class="n">application</span><span class="err">’</span><span class="n">s</span> <span class="n">SecurityManager</span> <span class="n">by</span> <span class="n">calling</span> <span class="n">the</span> <span class="n">securityManager</span><span class="err">’</span><span class="n">s</span> <span class="n">nearly</span> <span class="n">identical</span> <span class="n">respective</span> <span class="n">hasRole</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;,</span> <span class="n">checkRole</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;,</span> <span class="n">isPermitted</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;,</span> <span class="n">or</span> <span class="n">checkPermission</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">method</span> <span class="nf">variants</span> <span class="o">(</span><span class="n">the</span> <span class="n">securityManager</span> <span class="kd">implements</span> <span class="n">the</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">shiro</span><span class="o">.</span><span class="na">authz</span><span class="o">.</span><span class="na">Authorizer</span> <span class="n">interface</span><span class="o">,</span> <span class="n">which</span> <span class="n">defines</span> <span class="n">all</span> <span class="n">Subject</span><span class="o">-</span><span class="n">specific</span> <span class="n">authorization</span> <span class="n">methods</span><span class="o">).&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Step</span> <span class="mi">3</span><span class="o">:</span> <span class="n">The</span> <span class="n">SecurityManager</span><span class="o">,</span> <span class="n">being</span> <span class="n">a</span> <span class="n">basic</span> <span class="err">‘</span><span class="n">umbrella</span><span class="err">’</span> <span class="n">component</span><span class="o">,</span> <span class="n">relays</span><span class="o">/</span><span class="n">delegates</span> <span class="n">to</span> <span class="n">its</span> <span class="n">internal</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">shiro</span><span class="o">.</span><span class="na">authz</span><span class="o">.</span><span class="na">Authorizer</span> <span class="n">instance</span> <span class="n">by</span> <span class="n">calling</span> <span class="n">the</span> <span class="n">authorizer</span><span class="err">’</span><span class="n">s</span> <span class="n">respective</span> <span class="n">hasRole</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;,</span> <span class="n">checkRole</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;,</span> <span class="n">isPermitted</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;,</span> <span class="n">or</span> <span class="n">checkPermission</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">method</span><span class="o">.</span> <span class="n">The</span> <span class="n">authorizer</span> <span class="n">instance</span> <span class="n">is</span> <span class="n">by</span> <span class="k">default</span> <span class="n">a</span> <span class="n">ModularRealmAuthorizer</span> <span class="n">instance</span><span class="o">,</span> <span class="n">which</span> <span class="n">supports</span> <span class="n">coordinating</span> <span class="n">one</span> <span class="n">or</span> <span class="n">more</span> <span class="n">Realm</span> <span class="n">instances</span> <span class="n">during</span> <span class="n">any</span> <span class="n">authorization</span> <span class="n">operation</span><span class="o">.&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Step</span> <span class="mi">4</span><span class="o">:</span> <span class="n">Each</span> <span class="n">configured</span> <span class="n">Realm</span> <span class="n">is</span> <span class="n">checked</span> <span class="n">to</span> <span class="n">see</span> <span class="k">if</span> <span class="n">it</span> <span class="kd">implements</span> <span class="n">the</span> <span class="n">same</span> <span class="n">Authorizer</span> <span class="n">interface</span><span class="o">.</span> <span class="n">If</span> <span class="n">so</span><span class="o">,</span> <span class="n">the</span> <span class="n">Realm</span><span class="err">’</span><span class="n">s</span> <span class="n">own</span> <span class="n">respective</span> <span class="n">hasRole</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;,</span> <span class="n">checkRole</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;,</span> <span class="n">isPermitted</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;,</span> <span class="n">or</span> <span class="n">checkPermission</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">method</span> <span class="n">is</span> <span class="n">called</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>
有兴趣的可以去官网看看:<a href="http://shiro.apache.org/authorization.html">http://shiro.apache.org/authorization.html</a></p>

<h1>源代码下载地址：</h1>

<blockquote cite='陈浩翔'>
GITHUB源码下载地址:<strong>【<a href='https://github.com/chenhaoxiang/Shiro/tree/master/20170909/code/Shiro3' target='_blank'>点我进行下载</a>】</strong>
</blockquote>


<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【Shiro】Shiro从小白到大神(二)-Subject认证结合MySQL]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/09/08/Shiro-went-from-white-to-great-2/"/>
    <updated>2017-09-08T11:38:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/09/08/Shiro-went-from-white-to-great-2</id>
    <content type="html"><![CDATA[<p>上一节博客讲的文本数据验证，基本不会在项目中用到，只是方便用来学习和测试<br/>
在本节，进行简单的数据库安全验证实例</p>

<!-- more -->


<hr />

<h1>Subject认证主体</h1>

<p>Subject认证主体包含两个信息:<br/>
Principals: 身份，可以是用户名，邮件，手机号码等等，只要能用来标识一个登陆主体身份的东西都可以 <br/>
Credentials: 凭证(比如你说你叫张三，你凭什么说叫张三，你这个时候会拿出身份证说你就是叫张三，这个凭证和身份证差不多)，常见有密码，数字证书等等</p>

<h1>认证流程</h1>

<p><img src="https://i.imgur.com/uzTsCic.png" alt="" /><br/>
细节可以自己去官网链接查看: <a href="http://shiro.apache.org/authentication.html">http://shiro.apache.org/authentication.html</a><br/>
1.身份凭证登录:.login(token)<br/>
2.SecurityManager - 管理者<br/>
3.4.涉及安全数据。在这里涉及到了Realm(意思是域)，Shiro从Realm中获取验证数据(或者叫安全数据)；<br/>
Realm有很多种类，例如常见的jdbc realm,jndi realm,text realm(上节的博客就是text Realm).<br/>
我们可以去Shiro的源码查看:<br/>
<img src="https://i.imgur.com/BijTwuc.png" alt="" /><br/>
可以看到还是有比较多的。<br/>
本节讲解jdbc Realm。</p>

<h1>实例</h1>

<p>既然是数据库操作，首先当然是去建数据库和表啦<br/>
<figure class='code'><figcaption><span>sql语句</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">SQLyog Ultimate v12.3.1 (64 bit)</span>
</span><span class='line'><span class="cm">MySQL - 5.7.19-log : Database - db_shiro&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">&lt;hr /&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">&lt;p&gt;*/</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;!</span><span class="mi">40101</span> <span class="k">SET</span> <span class="k">NAMES</span> <span class="n">utf8</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;!</span><span class="mi">40101</span> <span class="k">SET</span> <span class="n">SQL_MODE</span><span class="o">=&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;!</span><span class="mi">40014</span> <span class="k">SET</span> <span class="o">@</span><span class="n">OLD_UNIQUE_CHECKS</span><span class="o">=@@</span><span class="n">UNIQUE_CHECKS</span><span class="p">,</span> <span class="n">UNIQUE_CHECKS</span><span class="o">=</span><span class="mi">0</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span><span class="p">;</span>
</span><span class='line'><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;!</span><span class="mi">40014</span> <span class="k">SET</span> <span class="o">@</span><span class="n">OLD_FOREIGN_KEY_CHECKS</span><span class="o">=@@</span><span class="n">FOREIGN_KEY_CHECKS</span><span class="p">,</span> <span class="n">FOREIGN_KEY_CHECKS</span><span class="o">=</span><span class="mi">0</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span><span class="p">;</span>
</span><span class='line'><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;!</span><span class="mi">40101</span> <span class="k">SET</span> <span class="o">@</span><span class="n">OLD_SQL_MODE</span><span class="o">=@@</span><span class="n">SQL_MODE</span><span class="p">,</span> <span class="n">SQL_MODE</span><span class="o">=&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">NO_AUTO_VALUE_ON_ZERO</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span><span class="p">;</span>
</span><span class='line'><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;!</span><span class="mi">40111</span> <span class="k">SET</span> <span class="o">@</span><span class="n">OLD_SQL_NOTES</span><span class="o">=@@</span><span class="n">SQL_NOTES</span><span class="p">,</span> <span class="n">SQL_NOTES</span><span class="o">=</span><span class="mi">0</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span><span class="p">;</span>
</span><span class='line'><span class="k">CREATE</span> <span class="k">DATABASE</span> <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;!</span><span class="mi">32312</span> <span class="n">IF</span> <span class="k">NOT</span> <span class="k">EXISTS</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">db_shiro</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;!</span><span class="mi">40100</span> <span class="k">DEFAULT</span> <span class="nb">CHARACTER</span> <span class="k">SET</span> <span class="n">utf8</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">USE</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">db_shiro</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="k">Table</span> <span class="k">structure</span> <span class="k">for</span> <span class="k">table</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">users</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">DROP</span> <span class="k">TABLE</span> <span class="n">IF</span> <span class="k">EXISTS</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">users</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">users</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="p">(</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">id</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="n">AUTO_INCREMENT</span><span class="p">,</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">username</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span> <span class="k">DEFAULT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">password</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span> <span class="k">DEFAULT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="p">(</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">id</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span> <span class="n">ENGINE</span><span class="o">=</span><span class="n">InnoDB</span> <span class="n">AUTO_INCREMENT</span><span class="o">=</span><span class="mi">3</span> <span class="k">DEFAULT</span> <span class="n">CHARSET</span><span class="o">=</span><span class="n">utf8</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="k">Data</span> <span class="k">for</span> <span class="n">the</span> <span class="k">table</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">users</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">insert</span>  <span class="k">into</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">users</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">(</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">id</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">username</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">password</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">)</span> <span class="k">values</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">chx</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="mi">123456</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;),</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">jack</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="mi">12345</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;!</span><span class="mi">40101</span> <span class="k">SET</span> <span class="n">SQL_MODE</span><span class="o">=@</span><span class="n">OLD_SQL_MODE</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span><span class="p">;</span>
</span><span class='line'><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;!</span><span class="mi">40014</span> <span class="k">SET</span> <span class="n">FOREIGN_KEY_CHECKS</span><span class="o">=@</span><span class="n">OLD_FOREIGN_KEY_CHECKS</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span><span class="p">;</span>
</span><span class='line'><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;!</span><span class="mi">40014</span> <span class="k">SET</span> <span class="n">UNIQUE_CHECKS</span><span class="o">=@</span><span class="n">OLD_UNIQUE_CHECKS</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span><span class="p">;</span>
</span><span class='line'><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;!</span><span class="mi">40111</span> <span class="k">SET</span> <span class="n">SQL_NOTES</span><span class="o">=@</span><span class="n">OLD_SQL_NOTES</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>
直接拷贝进数据库运行即可(数据库文件在项目src\sql目录下)<br/>
<strong>注意事项：</strong><br/>
<strong>表名一定要是: users</strong><br/>
<strong>用户名列名必须是: userName(大小写不区分)</strong>  **</p>

<p>jdbc_realm.ini配置文件
<code>ini jdbc_realm.ini配置文件
[main]
jdbcRealm=org.apache.shiro.realm.jdbc.JdbcRealm
;定义JdbcRealm实例-固定语法
dataSource=com.mchange.v2.c3p0.ComboPooledDataSource
;数据库链接池-查看JdbcRealm类的源码可以看到需要dataSource数据源 在om.xml导入c3p0的jar包
dataSource.driverClass=com.mysql.jdbc.Driver
;设置dataSource的jdbc驱动包 - 相当于dataSource调用了setriverClass
dataSource.jdbcUrl=jdbc:mysql://localhost:3306/db_shiroD
;数据库连接地址
dataSource.user=root
;数据库账号
dataSource.password=123456
;数据库密码
jdbcRealm.dataSource=$dataSource
;为jdbcRealm赋值dataSource,jdbcRealm调用set
securityManager.realms=$jdbcRealm
;这个realms可以有多个，多个之间用英文逗号隔开
</code>
&ldquo;;"为ini文件的注释</p>

<p>测试类:
<figure class='code'><figcaption><span>JdbcRealmTest.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">cn</span><span class="o">.</span><span class="na">chenhaoxiang</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">org.apache.shiro.SecurityUtils</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.shiro.authc.AuthenticationException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.shiro.authc.UsernamePasswordToken</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.shiro.config.IniSecurityManagerFactory</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.shiro.mgt.SecurityManager</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.shiro.subject.Subject</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.shiro.util.Factory</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JdbcRealmTest</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">JdbcRealmTest</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//IniSecurityManagerFactory方法在1.4.0中被注解标志为不建议使用</span>
</span><span class='line'>        <span class="c1">//读取配置文件，初始化SecurityManager工厂</span>
</span><span class='line'>        <span class="n">Factory</span><span class="o">&lt;</span><span class="n">SecurityManager</span><span class="o">&gt;</span> <span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">IniSecurityManagerFactory</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nl">classpath:</span><span class="n">jdbc_realm</span><span class="o">.</span><span class="na">ini</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;);</span>
</span><span class='line'>        <span class="c1">//获取securityManager 实例</span>
</span><span class='line'>        <span class="n">SecurityManager</span> <span class="n">securityManager</span><span class="o">=</span><span class="n">factory</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
</span><span class='line'>        <span class="c1">//把securityManager实例绑定到SecurityUtils</span>
</span><span class='line'>        <span class="n">SecurityUtils</span><span class="o">.</span><span class="na">setSecurityManager</span><span class="o">(</span><span class="n">securityManager</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">//得到当前执行的用户</span>
</span><span class='line'>        <span class="n">Subject</span> <span class="n">subject</span> <span class="o">=</span>  <span class="n">SecurityUtils</span><span class="o">.</span><span class="na">getSubject</span><span class="o">();</span><span class="c1">//认证实体，当前进来的用户</span>
</span><span class='line'>        <span class="c1">//创建token令牌，用户名/密码</span>
</span><span class='line'>        <span class="n">UsernamePasswordToken</span> <span class="n">token</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">UsernamePasswordToken</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">jack</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="mi">12345</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;);</span>
</span><span class='line'>        <span class="c1">//身份认证</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">subject</span><span class="o">.</span><span class="na">login</span><span class="o">(</span><span class="n">token</span><span class="o">);</span>
</span><span class='line'>            <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">登录成功</span><span class="err">！</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">AuthenticationException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">登录失败</span><span class="err">！</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;);</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="c1">//登出</span>
</span><span class='line'>        <span class="n">subject</span><span class="o">.</span><span class="na">logout</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure>
<img src="https://i.imgur.com/kFIvVI7.png" alt="" /><br/>
如果验证失败会报异常，可以自己测试</p>

<h1>源代码下载地址：</h1>

<blockquote cite='陈浩翔'>
GITHUB源码下载地址:<strong>【<a href='https://github.com/chenhaoxiang/Shiro/tree/master/20170908/code/Shiro2' target='_blank'>点我进行下载</a>】</strong>
</blockquote>


<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【Shiro】Shiro从小白到大神(一)-Shiro入门]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/09/07/Shiro-went-from-white-to-great-1/"/>
    <updated>2017-09-07T19:38:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/09/07/Shiro-went-from-white-to-great-1</id>
    <content type="html"><![CDATA[<p>本系列是我在学习Shiro的路上的笔记，第一篇是属于非常入门级别的。<br/>
首先是介绍了下shiro，然后进行了一个小例子进行实际的操作<br/>
本节操作不涉及数据库，只是文本字符操作认证</p>

<!-- more -->


<hr />

<h1>Shiro简介:</h1>

<p>百度百科上的介绍:<br/>
Apache Shiro（日语“堡垒（Castle）”的意思）是一个强大易用的Java安全框架，提供了认证、授权、加密和会话管理功能，可为任何应用提供安全保障 - 从命令行应用、移动应用到大型网络及企业应用。<br/>
Shiro为解决下列问题（我喜欢称它们为应用安全的四要素）提供了保护应用的API：<br/>
认证 - 用户身份识别，常被称为用户“登录”；<br/>
授权 - 访问控制；<br/>
密码加密 - 保护或隐藏数据防止被偷窥；<br/>
会话管理 - 每用户相关的时间敏感的状态。<br/>
Shiro还支持一些辅助特性，如Web应用安全、单元测试和多线程，它们的存在强化了上面提到的四个要素。</p>

<p>Apache Shiro官网的介绍链接:<a href="http://shiro.apache.org/introduction.html">http://shiro.apache.org/introduction.html</a></p>

<p>Shiro targets what the Shiro development team calls “the four cornerstones of application security” - Authentication(身份认证), Authorization(权限控制), Session Management(Session管理), and Cryptography(加密):</p>

<p>Authentication: Sometimes referred to as ‘login’, this is the act of proving a user is who they say they are.<br/>
Authorization: The process of access control, i.e. determining ‘who’ has access to ‘what’.<br/>
Session Management: Managing user-specific sessions, even in non-web or EJB applications.<br/>
Cryptography: Keeping data secure using cryptographic algorithms while still being easy to use.<br/>
前面四个是核心的。<br/>
还具有Web支持，缓存，并发，伪装，"记住我"等</p>

<p>本节实例使用Maven，如不熟悉Maven的，建议先去学习Maven</p>

<h1>Shiro实例-模拟最简单的HelloWord</h1>

<p>引入Shiro的Jar包:<br/>
<code>xml pom.xml
 &lt;dependency&gt;
       &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;
       &lt;artifactId&gt;shiro-core&lt;/artifactId&gt;
       &lt;version&gt;1.3.2&lt;/version&gt;
&lt;/dependency&gt;
</code>
配置配置文件(放在resource文件下):<br/>
最简单的账户密码形式
<code>ini shiro.ini
[users]
chx=123456
jack=12345
</code></p>

<p>Java-HelloWord类</p>

<pre><code class="java HelloWord类">package cn.chenhaoxiang;

import org.apache.shiro.SecurityUtils;
import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.UsernamePasswordToken;
import org.apache.shiro.config.IniSecurityManagerFactory;
import org.apache.shiro.mgt.SecurityManager;
import org.apache.shiro.subject.Subject;
import org.apache.shiro.util.Factory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HelloWord {
    private static Logger logger = LoggerFactory.getLogger(HelloWord.class);
    public static void main(String[] args) {
        //IniSecurityManagerFactory方法在1.4.0中被注解标志为不建议使用
        //读取配置文件，初始化SecurityManager工厂
        Factory&lt;SecurityManager&gt; factory = new IniSecurityManagerFactory("classpath:shiro.ini");
        //获取securityManager 实例
        SecurityManager securityManager=factory.getInstance();
        //把securityManager实例绑定到SecurityUtils
        SecurityUtils.setSecurityManager(securityManager);
        //得到当前执行的用户
        Subject subject =  SecurityUtils.getSubject();//认证实体，当前进来的用户
        //创建token令牌，用户名/密码
        UsernamePasswordToken token = new UsernamePasswordToken("jack","12345");
        //身份认证
        try {
            subject.login(token);
            logger.info("登录成功！");
        } catch (AuthenticationException e) {
//login的接口函数  void login(AuthenticationToken var1) throws AuthenticationException;所以直接抓AuthenticationException异常即可
//身份认证失败即抛出此异常
            logger.info("登录失败！");
            e.printStackTrace();
        }
        //登出
        subject.logout();
    }
}
</code></pre>

<h1>源代码下载地址：</h1>

<blockquote cite='陈浩翔'>
GITHUB源码下载地址:<strong>【<a href='https://github.com/chenhaoxiang/Shiro/tree/master/20170907/code/Shiro01' target='_blank'>点我进行下载</a>】</strong>
</blockquote>


<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
</feed>
