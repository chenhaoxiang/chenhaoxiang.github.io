<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Algorithm | 谙忆-人生之旅]]></title>
  <link href="http://chenhaoxiang.github.io/blog/categories/algorithm/atom.xml" rel="self"/>
  <link href="http://chenhaoxiang.github.io/"/>
  <updated>2017-09-15T10:38:15+08:00</updated>
  <id>http://chenhaoxiang.github.io/</id>
  <author>
    <name><![CDATA[陈浩翔]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[递归简论]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2015/08/26/Recursive-as/"/>
    <updated>2015-08-26T04:12:09+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2015/08/26/Recursive-as</id>
    <content type="html"><![CDATA[<p>用代码来描述递归</p>

<!-- more -->


<hr />

<pre><code class="c">/**f(x)=2f(x-1)+x^2;f(0)=0;**/
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
int f(unsigned int x)
{
    if(x==0)
        return 0;//处理基准情况
    //基准情形：你必须总要有某些基准的情形，它们不用递归就能求解
    else
        return 2*f(x-1)+x*x;
    //不断推进：对于那些需要递归求解的情形，递归调用必须总能够朝着产生基准情形的方向推进
}
int main()
{
    unsigned int n;
    while(~scanf("%d",&amp;n))
    {
        printf("%u\n",f(n));
    }
    return 0;
}
</code></pre>

<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[巴斯卡三角形（杨辉三角）]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2015/08/23/PASCAL-(Yang-hui-triangle-triangle)/"/>
    <updated>2015-08-23T10:50:19+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2015/08/23/PASCAL-(Yang-hui-triangle-triangle)</id>
    <content type="html"><![CDATA[<p>参考资料：
1.
巴斯卡三角的来历
2.
巴斯卡是十七世纪的一位法国数学家，也是历史上第一位发明了加法计算机的人！他造出“巴斯卡三角形”的方法是这样的：先在纸上写出一行和一列的“ 1 “ ，然后在各个位置中填入数字，每一个位置上的数字都是它上面一个数和左边一个数的和。接下来，把这个表右转45 ° ，放正了，就得到上面的数字三角形了！<br/>
3.
现在的数学书里，都把这个三角形称为“巴斯卡三角形” ，事实上，在南宋杨辉所写的数学书里面，早就介绍了由北宋贾宪所创造出来的相同三角形了（所以在中国称为“贾宪三角”或“杨辉三角” ） ，时间可要比巴斯卡早了600年。</p>

<!-- more -->


<hr />

<p>组合数计算方法：<code>C(n,m)=n!/[m!(n-m)!]</code>
<img src="http://img.blog.csdn.net/20150823230450040" alt="" /></p>

<pre><code class="c">#include &lt;stdio.h&gt;
#define N 12
long combi(int n, int r)
{
    int i;
    long p = 1;
    for(i = 1; i &lt;= r; i++)
        p = p * (n-i+1) / i;
    //这里没有采用斯巴卡三角形的特性，
    //即下数等于上面两数之和，而是通过行列的关系推出。
    //当然也可以利用二维数组计算，利用下数等于上面两数之和。
    return p;
}/**上述程序是解决巴斯卡三角形问题的递归方程式。
在主函数中依次combi(0,0)-&gt;combi(1,0)-&gt;combi(1,1)-&gt;combi(2,0)-&gt;combi(2,1)-&gt;combi(3,1)-&gt;其实很简单，
就是这样一个过程，公式是经过推导的，有兴趣也可以自己推导!
这种问题没有为什么，就只有怎么做到!combi(0,0)-&gt;combi(1,0)-&gt;combi(1,1)-&gt;combi(2,0)-&gt;combi(2,1)-&gt;combi(3,1)-&gt;.
把这些代入得出p并且输出!
懂得如何实现就可以了!高深一点，
就要学会自己推导公式，也就是真正算法的精髓。**/
int main()
{
    int n, r, t;
    for(n = 0; n &lt;= N; n++)
    {
        for(r = 0; r &lt;= n; r++)
        {
            int i;/* 排版设定开始 */
            if(r == 0)
            {
                for(i = 0; i &lt;= (N-n); i++)
                    printf("   ");
            }
            else
            {
                printf("   ");

            } /* 排版设定结束 */
            printf("%3d", combi(n, r));
        }
        printf("\n");
    }
}
</code></pre>

<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[穷举搜索 回溯与深搜]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2015/08/22/Exhaustive-search-and-deep-search/"/>
    <updated>2015-08-22T11:39:19+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2015/08/22/Exhaustive-search-and-deep-search</id>
    <content type="html"><![CDATA[<p>计算机常用算法大致有两大类，一类叫蛮力算法，一类叫贪心算法，前者常使用的手段就是搜索，对全部解空间进行地毯式搜索，直到找到指定解或最优解。</p>

<!-- more -->


<hr />

<p>【建立解空间】
问题的解应该如何描述，如何建立？借助图论的思想，我们可以用图来描述，图的定义为G，由顶点集和边集构成，顶点即实实在在的数 据、对象，而边可以抽象为关系，即顶点间的关系，这种关系不一定非要在数据结构上表现出来，用数据结构的语言来描述，如果关系是一对一，则为线性表，如果 关系是一对多，则为树，如果关系是多对多，则为图，如果完全没有关系，则为集合。但在数据结构中这种关系不一定非要在数据的存储性质上一开始就表现出来， 譬如，你可以用一个数组表示一个线性表，也可以表示完全二叉树，同样也可以用邻接表表示一个图，对于关系的描述不是数据结构本身的描述，而是算法的描述， 正如数据结构是离不开特定的算法一样，不可分开单独而谈。描述了解，那如何建立解空间，即如何对图进行搜索？</p>

<p>【深度优先搜索】
(Depth First Search)是用栈的机制对图的顶点进行深度优先的搜索。简易流程如下：</p>

<p>DFS(V0（起始顶点）)
访问V0
for(v=V0的第一个子结点 到 最后一个子结点（边所对的顶点））
   如果v未被访问，DFS(v);</p>

<p>搜索过程是先往结点深处搜索，一旦有子结点未访问就向下遍历。这样的方法类似回溯算法，先往下试探，如果不行出退回（回溯）。</p>

<p>【回溯】
回溯的经典例子是8皇后问题。
例：在国际象棋地图上（8×8）放上8个皇后，使任意两个皇后都不在同一行或同一列或同一斜行，找出所有解。
每一个皇后的位置可以认为是一个顶点，而皇后之间不在同一行或同一列或同一斜行的性质认为是顶点之间的关系，我们可以用回溯试探的方法考虑：先依次试探每一个皇后的位置，如果有不满足条件的情况则退回，直到完成所有解的计数和输出。</p>

<p>用数组存储：int pos[8];
pos[0]表示第一个皇后的位置（0,1,&hellip;7)依次类推。
流程：
dfs&copy;//c从0开始
for(v=0;v&lt;8;++v)
   如果pos[c]:=v满足条件，dfs(c+1);
   退回之后pos[c]:=0;</p>

<p>这跟书上的回溯算法不太一样，因为是采用深搜的方法写的，其实思想是一致的，要仔细体会。</p>

<p>八皇后问题 回溯法</p>

<p>问题描述：
八皇后问题是十九世纪著名数学家高斯于1850年提出的。问题是：在8<em>8的棋盘上摆放8个皇后，使其不能互相攻击，即任意的两个皇后不能处在同意行，同一列，或同意斜线上。可以把八皇后问题拓展为n皇后问题，即在n</em>n的棋盘上摆放n个皇后，使其任意两个皇后都不能处于同一行、同一列或同一斜线上。</p>

<p>问题分析 ：</p>

<p>显然，每一行可以而且必须放一个皇后，所以n皇后问题的解可以用一个n元向量X=（x1,x2,&hellip;..xn）表示，其中，1≤ i≤ n且1≤ xi≤ n，即第n个皇后放在第i行第xi列上。</p>

<p>由于两个皇后不能放在同一列上，所以，解向量X必须满足的约束条件为:</p>

<p>xi≠ xj;</p>

<p>若两个皇后的摆放位置分别是（i,xi）和（j,xj），在棋盘上斜率为-1的斜线上，满足条件i-j=xi-xj;在棋盘上斜率为1的斜线上，满足条件i+j=xi+xj;</p>

<p>综合两种情况，由于两个皇后不能位于同一斜线上，所以，</p>

<p>解向量X必须满足的约束条件为:</p>

<p>|i-xi|≠ |j-xj|</p>

<p>代码如下：</p>

<pre><code>#include&lt;stdio.h&gt;
#include&lt;math.h&gt;
int x[100];
bool place(int k)//考察皇后k放置在x[k]列是否发生冲突
{
    int i;
    for(i=1;i&lt;k;i++)
        if(x[k]==x[i]||abs(k-i)==abs(x[k]-x[i]))
            return false;
        return true;
}

void queue(int n)
{
    int i,k;
    for(i=1;i&lt;=n;i++)
        x[i]=0;
    k=1;
    while(k&gt;=1)
    {
        x[k]=x[k]+1;   //在下一列放置第k个皇后
        while(x[k]&lt;=n&amp;&amp;!place(k))
            x[k]=x[k]+1;//搜索下一列
        if(x[k]&lt;=n&amp;&amp;k==n)//得到一个输出
        {
            for(i=1;i&lt;=n;i++)
                printf("%d ",x[i]);
            printf("\n");
        //return;//若return则只求出其中一种解，若不return则可以继续回溯，求出全部的可能的解
        }
        else if(x[k]&lt;=n&amp;&amp;k&lt;n)
            k=k+1;//放置下一个皇后
        else
        {
            x[k]=0;//重置x[k],回溯
            k=k-1;
        }
    }
}

void main()
{
   int n;
   printf("输入皇后个数n:\n");
   scanf("%d",&amp;n);
   queue(n);
}
</code></pre>

<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
</feed>
