<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[谙忆-人生之旅]]></title>
  <link href="http://chenhaoxiang.github.io/atom.xml" rel="self"/>
  <link href="http://chenhaoxiang.github.io/"/>
  <updated>2017-08-22T23:42:18+08:00</updated>
  <id>http://chenhaoxiang.github.io/</id>
  <author>
    <name><![CDATA[陈浩翔]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[【问题解决】SSM-@Transactional注解事务无效探讨]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/08/21/Spring-SpringMVC-MyBatis-Transactional-Invalid/"/>
    <updated>2017-08-21T13:38:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/08/21/Spring-SpringMVC-MyBatis-Transactional-Invalid</id>
    <content type="html"><![CDATA[<p>Spring SpringMVC MyBatis框架中-@Transactional注解事务无效解决方法</p>

<!-- more -->


<hr />

<p>SpringMVC-Spring-MyBatis框架<br/>
数据库:SQL SERVER 2008<br/>
以前都是用的MySQL数据库，没有出现这个问题，现在换成sql server了，结果事务没有起作用了。</p>

<p>经过一番测试：<br/>
排除以下几个问题:
1.数据库原因，不存在的。MySQL中只有InnoDB引擎支持事务。SqlServer2008的企业版作为收费数据库，不可能不支持事务操作。<br/>
2.异常类型不是unchecked异常，我写的异常是1/0，为了保险起见，我还抛出RuntimeException试了，结果也是没有回滚。<br/>
3.是不是配置文件的没配置好，比如Bean，比如:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!-- 配置事物管理类 --&gt;
</span><span class='line'>&lt;bean id="transactionManager"
</span><span class='line'>      class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt;
</span><span class='line'>    &lt;property name="dataSource" ref="dynamicDataSource" /&gt;
</span><span class='line'>&lt;/bean&gt;
</span><span class='line'>&lt;!-- 开启注解式事物扫描 --&gt;
</span><span class='line'>&lt;tx:annotation-driven transaction-manager="transactionManager"  /&gt;</span></code></pre></td></tr></table></div></figure>


<p>检查几遍，排除这个原因。
4.还有一种情况，因为我以前写的都是对一个数据库的操作，现在是一个数据源多个数据库操作，当时有点怀疑我是不是少配置了什么，导致多数据库时无法启动事务，于是便还原到一个数据库，结果事务还是无效，排除此问题</p>

<p>经过一番折腾，在网上找到一篇文章，说原因是applicationContext.xml的父容器先于Servlet的子容器生效，将Service提前加载了。</p>

<p>于是验证了一下，首先去掉Service实现类的@Service注解，在spring.xml(也就是applicationContext.xml，我起名是spring.xml)，配置该类的Bean:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;bean id="sysUserServiceImp" class="cn.kx59.user.service.imp.SysUserServiceImp"&gt;&lt;/bean&gt;</span></code></pre></td></tr></table></div></figure>


<p>结果运行之后，事务起作用了。</p>

<p>原因如下:<br/>
Spring容器优先加载由ServletContextListener（对应applicationContext.xml，我这里是spring.xml）产生的父容器，而SpringMVC（对应spring-mvc.xml）产生的是子容器。<br/>
子容器Controller进行扫描装配时装配的@Service注解的实例是没有经过事务加强处理，即没有事务处理能力的Service，而父容器进行初始化的Service是保证事务的增强处理能力的。如果不在子容器中将Service exclude掉，此时得到的将是原样的无事务处理能力的Service。
所以我们要在扫描的时候在子容器中将Service exclude掉就好了。</p>

<p>也就是在spring-mvc.xml中进行如下修改:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!--扫描Controller--&gt;
</span><span class='line'>&lt;context:component-scan base-package="cn.kx59"&gt;
</span><span class='line'>    &lt;context:include-filter type="annotation"
</span><span class='line'>                            expression="org.springframework.stereotype.Controller" /&gt;
</span><span class='line'>    &lt;!--下面这个是防止事务没起作用，spring.xml的父容器先于Servlet的子容器生效，将Service提前加载了。这里不用再进行加载装配--&gt;
</span><span class='line'>    &lt;context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service" /&gt;
</span><span class='line'>&lt;/context:component-scan&gt;</span></code></pre></td></tr></table></div></figure>


<p>注意: 请将@Transactional注解写在实现类的方法或类上！不建议写在接口类中！  <br/>
Spring团队的建议是你在具体的类（或类的方法）上使用 @Transactional 注解，而不要使用在类所要实现的任何接口上。你当然可以在接口上使用 @Transactional 注解，但是这将只能当你设置了基于接口的代理时它才生效。因为注解是不能继承的，这就意味着如果你正在使用基于类的代理时，那么事务的设置将不能被基于类的代理所识别，而且对象也将不会被事务代理所包装（将被确认为严重的）。因此，请接受Spring团队的建议并且在具体的类上使用 @Transactional 注解。</p>

<p>在以上解决方法中，若将@Transactional 注解写在接口上，则无法实现事务。所以请将 @Transactional 注解写在实现类中！</p>

<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【小工具】CSDN博客导出工具-Java集成Maven开发]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/07/28/CSDNBlogExport/"/>
    <updated>2017-07-28T13:38:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/07/28/CSDNBlogExport</id>
    <content type="html"><![CDATA[<p>CSDN博客导出工具<br/>
之前一直想把CSDN的博客导入到自己的网站中，可是由于博客比较多，后面受朋友老郭启发，就找了个时间用Java开发了这款小工具。</p>

<!-- more -->


<hr />

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>


<h1>CSDNBlogExport</h1>

<p>CSDN博客导出工具</p>

<p>之前一直想把CSDN的博客导入到自己的网站中，可是由于博客比较多，后面受朋友老郭启发，就找了个时间用Java开发了这款小工具。<br/>
Had been trying to CSDN blog into their website, but because of the blog is more, inspired by my friend guo behind, will find a time this kind of small tools with Java development.</p>

<h1>only use</h1>

<p>直接下载CSDNBlogExport.7z解压使用即可。 <br/>
Direct download CSDNBlogExport.7z decompression can be used.<br/>
<img src="http://i.imgur.com/H5mMN3E.png" alt="" /></p>

<p><img src="http://i.imgur.com/MBLoPTU.png" alt="" /></p>

<p>经过测试，667篇博客，开50个线程，在54秒左右可以全部导出到文件。<br/>
Tested, 667 blog, open 50 threads, in 54 seconds can all exported to a file.</p>

<p>博客文件导出的存储规则是:<br/>
软件运行目录\blog\年-月\年-月-日 博客标题名.markdown <br/>
Blog file exported storage rule is:<br/>
Software running directory/blog/year-month/year-month-day blog title name.markdown</p>

<p><img src="http://i.imgur.com/tWkpxob.png" alt="" /></p>

<h1>开发</h1>

<p>CSDNBlogExport目录下是完整的程序代码<br/>
使用了WebMagic爬虫框架，本来自己写HttpURLConnection工具类也能实现的，只是比较耗时，偷个小懒，既然别人有更好的工具，为什么不用呢<br/>
技术含量呢，可以说基本没有什么，但是也是花了大半天时间做的。<br/>
中间还遇到部分玩家无法导出博客的情况，因为CSDN对于用户的链接命名分了2种情况，当时写的时候没有发现，是测试别人博客的时候发现的，经过半小时解决了这个问题。</p>

<p>虽然很想把这个程序完善，但是由于时间限制还是不能做太多事。<br/>
不保证本版本一直能使用下去，如果某天本程序不能使用了(肯定是CSDN对返回的数据进行了处理或者进行了权限控制)，请留言或者联系我QQ:619699629或者邮箱:<a href="&#109;&#97;&#x69;&#108;&#116;&#111;&#58;&#x75;&#105;&#102;&#x75;&#x74;&#117;&#x72;&#x65;&#64;&#x75;&#105;&#x66;&#117;&#116;&#x75;&#x72;&#101;&#46;&#x63;&#x6f;&#x6d;">&#x75;&#x69;&#102;&#117;&#116;&#117;&#114;&#101;&#64;&#x75;&#x69;&#x66;&#117;&#x74;&#117;&#114;&#101;&#46;&#99;&#111;&#109;</a><br/>
我会利用空闲时间跟上csdn对博客的升级，以保证能继续使用</p>

<p>此版本为1.0版本，希望用的朋友遇到bug，在这里留言或联系我，我会及时修复。</p>

<p>也欢迎朋友加入进来与我一起完善本程序。</p>

<p>本小程序可导出任意CSDN用户的博客，但是仅供学习使用。
免责声明:如果导出博客侵犯他人权益，引起纠纷的，一概与本人无关。</p>

<h1>development</h1>

<p>CSDNBlogExport directory is a complete program code
Used WebMagic crawler frame, original, write their own HttpURLConnection tools can be achieved only takes time, steal a little lazy, now that people have a better tools, why not
Technical content, it was basically have no what, but also spent most of time to do. <br/>
And in case of some players cannot export blog because CSDN links named points to the user for two kinds of circumstances, then write not found, is to test others while on a blog, solved the problem after half an hour.</p>

<p>Although very want to send this application is perfect, but due to time constraints or can&rsquo;t do too many things. <br/>
Does not guarantee that this version has been able to use, if one day can&rsquo;t use this program (must be CSDN on the returned data processing or access control), please leave a message or contact me QQ: 619699629 or email: <a href="&#109;&#x61;&#105;&#108;&#x74;&#x6f;&#58;&#x75;&#105;&#102;&#x75;&#x74;&#117;&#x72;&#x65;&#64;&#x75;&#x69;&#x66;&#x75;&#x74;&#117;&#114;&#x65;&#46;&#99;&#x6f;&#109;">&#117;&#105;&#x66;&#117;&#116;&#x75;&#x72;&#101;&#64;&#x75;&#105;&#102;&#117;&#116;&#117;&#x72;&#x65;&#x2e;&#x63;&#x6f;&#x6d;</a></p>

<p>I will use free time keep up with the CSDN on updating the blog, to ensure that can continue to use</p>

<p>This version is 1.0 version, hope to meet with friends bug, leave a message or contact me here, I&rsquo;ll repair in time.<br/>
Also welcome friends to join in with me in perfect this procedure.<br/>
This small program can export any CSDN user&rsquo;s blog, but only for the use of learning.<br/>
Disclaimer: if the export blog infringement of rights and interests of others, cause disputes, all has nothing to do with himself.</p>

<h1>Bug修复记录</h1>

<p>2017.7.31：
修复html编辑器写完博客后导出博客不全的bug<br/>
现在版本 v1.1<br/>
感谢CSDN博主<a href="http://blog.csdn.net/zuochao_2013" target='_blank'>[三名狂客]</a>提出的Bug</p>

<blockquote><p>2017.8.16：<br/>
进行版本升级，因为CSDN把一个分页的bug给堵上了，原来的版本不能使用，请下载最新版本2.0<br/>
现在版本 v2.0  <br/>
感谢CSDN博主<a href="http://blog.csdn.net/u011637069" target='_blank'>[龙腾四海365]</a>提出的Bug</p></blockquote>

<p>本次bug修复后，时间会延长一点，因为我在里面把分页的线程写死了，50个线程，有兴趣的可以自己扩展。<br/>
经过测试，在输入50线程时，668篇博客的爬取时间为92S。<br/>
<img src="http://i.imgur.com/XPP3svY.png" alt="" /></p>

<h1>源代码下载地址：</h1>

<blockquote cite='陈浩翔'>
GITHUB项目地址:<strong>【<a href='https://github.com/chenhaoxiang/CSDNBlogExport' target='_blank'>点我进行访问</a>】</strong>
</blockquote>


<p>如果无法访问，请翻墙哦</p>

<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【C++】C++友元]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/06/20/c-plus-plus-friendFunction/"/>
    <updated>2017-06-20T13:38:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/06/20/c-plus-plus-friendFunction</id>
    <content type="html"><![CDATA[<p>C++中可以使用friend关键字来将函数、类声明为某个类的友元<br/>
友元包括友元函数和友元类<br/>
友元具有一些特权，可以访问private的成员<br/>
友元只能授予，不能索取，单向，不能传递(比如a是b的友元，b是c的友元，但a不是c的友元)</p>

<!-- more -->


<hr />

<h1>友元函数</h1>

<p>在类体中使用friend关键字对友元函数进行声明：<br/>
将非成员函数/一般函数声明为友元：<br/>
friend void func();  //func为非成员函数，不属于任何类<br/>
将其他类的成员函数声明为友元：<br/>
friend void CTime::getNum();//getNum为CTime类的成员。</p>

<h1>友元类</h1>

<p>在类体中使用friend关键字将某类声明为自己的友元类。<br/>
friend CTime;</p>

<p>好处就是方便，可以在其他类或方法直接访问私有成员</p>

<p>缺点：<br/>
面向对象的基本原则包括封装性和信息隐藏，而由于友元可以访问其他类的私有成员，这是对封装原则的一个破坏。因此使用友元的时候要特别慎重。</p>

<h1>实例</h1>

<figure class='code'><figcaption><span>Time.h</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cp">#ifndef TIME_H</span>
</span><span class='line'><span class="cp">#define TIME_H </span>
</span><span class='line'><span class="cp">#include &quot;Date.h&quot;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">CTime</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="n">CTime</span><span class="p">();</span>
</span><span class='line'>  <span class="n">CTime</span><span class="p">(</span><span class="kt">int</span> <span class="n">hour</span><span class="p">,</span> <span class="kt">int</span> <span class="n">minute</span><span class="p">,</span> <span class="kt">int</span> <span class="n">second</span> <span class="o">=</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="n">CTime</span><span class="p">(</span><span class="kt">int</span> <span class="n">value</span><span class="p">);</span>
</span><span class='line'>  <span class="n">CTime</span><span class="p">(</span><span class="n">CTime</span><span class="o">&amp;</span> <span class="n">time</span><span class="p">);</span>
</span><span class='line'>  <span class="o">~</span><span class="n">CTime</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">setHour</span><span class="p">(</span><span class="kt">int</span> <span class="n">hour</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">setMinute</span><span class="p">(</span><span class="kt">int</span> <span class="n">minute</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">setSecond</span><span class="p">(</span><span class="kt">int</span> <span class="n">second</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="nf">getHour</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">int</span> <span class="nf">getMinute</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">int</span> <span class="nf">getSecond</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">getNum</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//friend CDate;//声明友元类,需要声明class CDate;    这样整个类都可以访问CTime的私有成员的了,由于我们只在disPlay函数中访问，所以可以用下面的方法</span>
</span><span class='line'>  <span class="k">friend</span> <span class="kt">void</span> <span class="n">CDate</span><span class="o">::</span><span class="n">disPlay</span><span class="p">(</span><span class="k">const</span> <span class="n">CTime</span><span class="o">&amp;</span> <span class="n">time</span><span class="p">);</span>
</span><span class='line'>  <span class="k">friend</span> <span class="kt">void</span> <span class="nf">func</span><span class="p">();</span><span class="c1">//告诉编译器，CTime这个类，已经将func()这个函数声明为自己的友元函数，这个声明可以放在本CTime类中任何地方</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">m_nHour</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">m_nMinute</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">m_nSecond</span><span class="p">;</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">int</span> <span class="n">m_nNum</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>Date.h</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cp">#ifndef DATA_H</span>
</span><span class='line'><span class="cp">#define DATA_H</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">CTime</span><span class="p">;</span><span class="c1">//类的前置声明，一般情况下，是需要声明之后才可以使用的</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">CDate</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="n">CDate</span><span class="p">(</span><span class="kt">int</span> <span class="n">year</span><span class="p">,</span> <span class="kt">int</span> <span class="n">month</span><span class="p">,</span> <span class="kt">int</span> <span class="n">day</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//friend CTime;//在这里声明友元没用，因为友元只能授予，不能索取！</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">disPlay</span><span class="p">(</span><span class="k">const</span> <span class="n">CTime</span><span class="o">&amp;</span> <span class="n">time</span><span class="p">);</span><span class="c1">//使用的是类的引用(引用也是使用指针来实现的),这里不声明是可以的</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">m_nYear</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">m_nMonth</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">m_nDay</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>


<p>main.cpp</p>

<figure class='code'><figcaption><span>main.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cp">#include&lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include&quot;Time.h&quot; </span>
</span><span class='line'><span class="cp">#include &quot;Date.h&quot;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">func</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">CTime</span> <span class="n">time</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">time</span><span class="p">.</span><span class="n">m_nHour</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">time</span><span class="p">.</span><span class="n">m_nHour</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">const</span> <span class="n">CTime</span> <span class="n">time</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">50</span><span class="p">,</span><span class="mi">20</span><span class="p">);</span>
</span><span class='line'>  <span class="n">CTime</span> <span class="k">const</span> <span class="n">time2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">time</span><span class="p">.</span><span class="n">getNum</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">func</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">CDate</span> <span class="n">date</span><span class="p">(</span><span class="mi">2015</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">26</span><span class="p">);</span>
</span><span class='line'>  <span class="n">date</span><span class="p">.</span><span class="n">disPlay</span><span class="p">(</span><span class="n">time</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">getchar</span><span class="p">();</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>演示结果</h2>

<p><img src="http://i.imgur.com/3zb3loZ.png" alt="" /></p>

<h1>源代码下载地址：</h1>

<blockquote cite='陈浩翔'>
GITHUB源码下载地址:<strong>【<a href='https://github.com/chenhaoxiang/C-Study/tree/master/20170620/code/friendFunction' target='_blank'>点我进行下载</a>】</strong></p>
</blockquote>


<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【Cocos2d-x】开发基础-Cocos2d-x坐标系]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/06/14/cocos2dx-coordinate-system/"/>
    <updated>2017-06-14T13:38:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/06/14/cocos2dx-coordinate-system</id>
    <content type="html"><![CDATA[<p>本篇博客讲解:<br/>
1.UI坐标<br/>
2.OpenGL坐标<br/>
3.世界坐标和模型坐标<br/>
4.实例：世界坐标转换为模型坐标<br/>
5.实例：模型坐标转换为世界坐标</p>

<!-- more -->


<hr />

<h1>UI坐标和OpenGL坐标</h1>

<p><img src="http://i.imgur.com/tXyhhzQ.png" alt="" /><br/>
UI坐标就是Android和iOS等应用开发的时候使用的二维坐标系。它的坐标原点是在左上角的。<br/>
UI坐标也叫视图坐标，它是和我们的OpenGL坐标是不一样的。OpenGL坐标是基于左下角的
<img src="http://i.imgur.com/698Z9ws.png" alt="" /> <br/>
OpenGL坐标是一种3D坐标，OpenGL是一个渲染的标准，渲染标准的坐标系是一种3D坐标系。<br/>
所以OpenGL主要是给3D世界来做渲染，但是cocos2d觉得OpenGL速度快，所以就把OpenGL拿过来了做为一个引擎，这样的话，cocos2d就使用OpenGL坐标作为默认坐标<br/>
OpenGL坐标在二维世界里，并没有什么太大的问题，不过就是Z轴基本不用。但是有时候也会用到，就是在绘制的顺序的时候，就需要Z轴了。</p>

<p>比如绘制两个精灵在一个位置，精灵之间会有遮挡的问题，这个就和z轴的绘制顺序有关了。</p>

<h2>从UI坐标到OpenGL坐标的转换</h2>

<p>其实就是左上角，左下角之间的转换。<br/>
屏幕的高度 - OpenGL坐标 = UI坐标<br/>
屏幕的高度 - UI坐标 = OpenGL坐标</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Vec2 touchLocation = touch-&gt;getLocationInView(); //获取触摸点的位置，UI坐标系里的坐标
</span><span class='line'>Vec2 touchLocation2 = Director::getInstance()-&gt;convertToGL(touchLocation);</span></code></pre></td></tr></table></div></figure>


<p>touch是触摸点(Touch)对象</p>

<h2>右手坐标系和左手坐标系</h2>

<p><img src="http://i.imgur.com/kCbPAIl.png" alt="" /><br/>
在3D坐标系里，有两种坐标。一种是Z轴指向外面的坐标，一种是Z轴指向内部的坐标，如上图</p>

<p><img src="http://i.imgur.com/GQ9rtZL.png" alt="" /><br/>
指向外面的坐标称为右手坐标系<br/>
指向内部的坐标称为左手坐标系<br/>
大家用左右手演示一下就明白了。
注意大拇指指向X轴正方向，食指向上，中指弯曲<br/>
OpenGL属于右手坐标！<br/>
微软平台的Direct3D是左手坐标！<br/>
这两个是类似的技术</p>

<h1>世界坐标和模型坐标</h1>

<p>由于OpenGL坐标有可以分为：世界坐标和模型坐标，所以Cocos2d-x的坐标也有世界坐标和模型坐标。</p>

<p>举一个例子：<br/>
比如你去问路，可能有人会告诉你先向南走1000米，再向东走500米、<br/>
也可能会有人告诉你，先向右走1000米，再向左走500米、</p>

<p>世界坐标:<br/>
先向南走1000米，再向东走500米、也就是说以地球为参照物<br/>
模型坐标(也叫本地坐标):<br/>
先向右走1000米，再向左走500米、这里是以自身为参照物</p>

<p>所谓模型是什么，就是这个物体，这个精灵，也就是称为模型。<br/>
虽然cocos2d画的是2D对象，但是实际上是以3D技术来绘制的，因此还是叫模型坐标</p>

<p>世界坐标的整个坐标的参考系在第三方！也就是不是本身</p>

<p>比如：<br/>
<img src="http://i.imgur.com/5q7jsI6.png" alt="" /><br/>
看上图，坐标系上有ABC三个点，C是坐标原点，A参考C，B也参考C，那么，C的坐标就是A和B坐标的坐标系<br/>
所以我们把以C为参考的坐标(也就是以第三方为参考系的坐标)称为世界坐标<br/>
所以A的坐标是(5,5),B的坐标是(6,4)</p>

<p>采用A的模型坐标来描述B的位置:<br/>
我们也可以这么说，B相对于A的坐标是(1,-1),这样B就把A作为它的参考系，A就是模型坐标了！<br/>
也就是B在A这个模型坐标里所在的位置是(1,-1)</p>

<h2>世界坐标与模型坐标互相转换</h2>

<p>通过Node对象如下函数实现：</p>

<figure class='code'><figcaption><span>世界坐标与模型坐标互相转换</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">Vec2</span> <span class="n">convertToNodeSpace</span> <span class="p">(</span> <span class="k">const</span> <span class="n">Vec2</span> <span class="o">&amp;</span> <span class="n">worldPoint</span> <span class="p">)</span> <span class="c1">//将世界坐标转换为模型坐标。坐标原点看成模型(对象，精灵)的左下角所在</span>
</span><span class='line'><span class="n">Vec2</span> <span class="n">convertToNodeSpaceAR</span> <span class="p">(</span> <span class="k">const</span> <span class="n">Vec2</span> <span class="o">&amp;</span> <span class="n">worldPoint</span> <span class="p">)</span> <span class="c1">//将世界坐标转换为模型坐标。AR表示相对于锚点。</span>
</span><span class='line'>
</span><span class='line'><span class="n">Vec2</span> <span class="n">convertTouchToNodeSpace</span> <span class="p">(</span> <span class="n">Touch</span> <span class="o">*</span> <span class="n">touch</span> <span class="p">)</span> <span class="c1">//将世界坐标中触摸点转换为模型坐标。</span>
</span><span class='line'><span class="n">Vec2</span> <span class="n">convertTouchToNodeSpaceAR</span> <span class="p">(</span> <span class="n">Touch</span> <span class="o">*</span> <span class="n">touch</span> <span class="p">)</span> <span class="c1">//将世界坐标中触摸点转换为模型坐标。AR表示相对于锚点。</span>
</span><span class='line'><span class="c1">//凡是后面是ToNodeSpace的这个函数，是从世界坐标到模型坐标的转换  Node就是节点，也就是我们说的模型</span>
</span><span class='line'><span class="c1">//所有带有AR的，表示相对于锚点，也就是坐标原点看成模型(对象，精灵)的锚点所在</span>
</span><span class='line'>
</span><span class='line'><span class="n">Vec2</span> <span class="n">convertToWorldSpace</span> <span class="p">(</span> <span class="k">const</span> <span class="n">Vec2</span> <span class="o">&amp;</span> <span class="n">nodePoint</span> <span class="p">)</span> <span class="c1">//将模型坐标中触摸点转换为世界坐标。</span>
</span><span class='line'><span class="n">Vec2</span> <span class="n">convertToWorldSpaceAR</span> <span class="p">(</span> <span class="k">const</span> <span class="n">Vec2</span> <span class="o">&amp;</span> <span class="n">nodePoint</span> <span class="p">)</span> <span class="c1">//将模型坐标中触摸点转换为世界坐标。AR表示相对于锚点。</span>
</span></code></pre></td></tr></table></div></figure>


<h1>实例：世界坐标转换为模型坐标</h1>

<p><img src="http://i.imgur.com/3yIjKwO.png" alt="" />  <br/>
Node1和Node2的像素是(300,100)<br/>
所以很容易得出:<br/>
A(100,400)<br/>
C(200,300)
C相对于A:(100,-100)</p>

<p>B(400,500)
C相对于B:(-200,-200)</p>

<p>Node2的世界坐标转换为相对于Node1的模型坐标:</p>

<figure class='code'><figcaption><span>世界坐标与模型坐标互相转换</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="c1">//将Node2的位置转换为相对于Node1的模型坐标，不带AR的，表示相对于Node1的坐标原点,也就是A点</span>
</span><span class='line'><span class="n">Vec2</span> <span class="n">point1</span> <span class="o">=</span> <span class="n">node1</span><span class="o">-&gt;</span><span class="n">convertToNodeSpace</span><span class="p">(</span><span class="n">node2</span><span class="o">-&gt;</span><span class="n">getPosition</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//将Node2的位置转换为相对于Node1的模型坐标，不带AR的，表示相对于Node1的锚点,也就是B点</span>
</span><span class='line'><span class="n">Vec2</span> <span class="n">point2</span> <span class="o">=</span> <span class="n">node1</span><span class="o">-&gt;</span><span class="n">convertToNodeSpaceAR</span><span class="p">(</span><span class="n">node2</span><span class="o">-&gt;</span><span class="n">getPosition</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以得出的结果就是:</p>

<figure class='code'><figcaption><span>世界坐标与模型坐标互相转换</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">log</span><span class="p">(</span><span class="s">&quot;Node2 NodeSpace = (%f,%f)&quot;</span><span class="p">,</span><span class="n">point1</span><span class="p">.</span><span class="n">x</span><span class="p">,</span><span class="n">point1</span><span class="p">.</span><span class="n">y</span><span class="p">);</span>
</span><span class='line'><span class="c1">//Node2 NodeSpace = (100.000000,-100.000000)</span>
</span><span class='line'>
</span><span class='line'><span class="n">log</span><span class="p">(</span><span class="s">&quot;Node2 NodeSpaceAR = (%f,%f)&quot;</span><span class="p">,</span> <span class="n">point2</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">point2</span><span class="p">.</span><span class="n">y</span><span class="p">);</span>
</span><span class='line'><span class="c1">//Node2 NodeSpaceAR = (-200.000000,-200.000000)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>世界坐标与模型坐标互相转换</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="kt">bool</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">init</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// 1. super init first</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">Layer</span><span class="o">::</span><span class="n">init</span><span class="p">()</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">auto</span> <span class="n">node1</span> <span class="o">=</span> <span class="n">Sprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;Node1.png&quot;</span><span class="p">);</span><span class="c1">//Sprite是精灵</span>
</span><span class='line'>  <span class="n">node1</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="mi">400</span><span class="p">,</span><span class="mi">500</span><span class="p">));</span><span class="c1">//设置位置</span>
</span><span class='line'>  <span class="n">node1</span><span class="o">-&gt;</span><span class="n">setAnchorPoint</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">));</span><span class="c1">//设置锚点</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">node1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="c1">//层添加精灵</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">auto</span> <span class="n">node2</span> <span class="o">=</span> <span class="n">Sprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;Node2.png&quot;</span><span class="p">);</span><span class="c1">//Sprite是精灵</span>
</span><span class='line'>  <span class="n">node2</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="mi">300</span><span class="p">));</span><span class="c1">//设置位置</span>
</span><span class='line'>  <span class="n">node2</span><span class="o">-&gt;</span><span class="n">setAnchorPoint</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">));</span><span class="c1">//设置锚点</span>
</span><span class='line'>  <span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">node2</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Vec2</span> <span class="n">point1</span> <span class="o">=</span> <span class="n">node1</span><span class="o">-&gt;</span><span class="n">convertToNodeSpace</span><span class="p">(</span><span class="n">node2</span><span class="o">-&gt;</span><span class="n">getPosition</span><span class="p">());</span><span class="c1">//将Node2的位置转换为相对于Node1的模型坐标，不带AR的，表示相对于Node1的坐标原点</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">Vec2</span> <span class="n">point2</span> <span class="o">=</span> <span class="n">node1</span><span class="o">-&gt;</span><span class="n">convertToNodeSpaceAR</span><span class="p">(</span><span class="n">node2</span><span class="o">-&gt;</span><span class="n">getPosition</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">log</span><span class="p">(</span><span class="s">&quot;Node2 NodeSpace = (%f,%f)&quot;</span><span class="p">,</span><span class="n">point1</span><span class="p">.</span><span class="n">x</span><span class="p">,</span><span class="n">point1</span><span class="p">.</span><span class="n">y</span><span class="p">);</span><span class="c1">//Node2 NodeSpace = (100.000000,-100.000000)</span>
</span><span class='line'>  <span class="n">log</span><span class="p">(</span><span class="s">&quot;Node2 NodeSpaceAR = (%f,%f)&quot;</span><span class="p">,</span> <span class="n">point2</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">point2</span><span class="p">.</span><span class="n">y</span><span class="p">);</span><span class="c1">//Node2 NodeSpaceAR = (-200.000000,-200.000000)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://i.imgur.com/IDhDV2w.png" alt="" /></p>

<h1>源代码下载地址：</h1>

<blockquote cite='陈浩翔'>
GITHUB源码下载地址:<strong>【<a href='https://github.com/chenhaoxiang/cocos2d-x/tree/master/20170614/code/OpenGLcoordinates' target='_blank'>点我进行下载</a>】</strong></p>
</blockquote>


<h1>实例：模型坐标转换为世界坐标</h1>

<p><img src="http://i.imgur.com/SOqOMNO.png" alt="" /></p>

<p>在游戏场景中有两个Node对象，其中Node1的坐标是(400,500),大小是300<em>100像素<br/>
Node2是放置在Node1中的，它对于Node1的模型坐标是(0,0),大小是150</em>150像素</p>

<p>Node2相对于Node1的模型坐标转换的世界坐标:</p>

<figure class='code'><figcaption><span>世界坐标与模型坐标互相转换</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">Vec2</span> <span class="n">point1</span> <span class="o">=</span> <span class="n">node1</span><span class="o">-&gt;</span><span class="n">convertToWorldSpace</span><span class="p">(</span><span class="n">node2</span><span class="o">-&gt;</span><span class="n">getPosition</span><span class="p">());</span>
</span><span class='line'><span class="o">&gt;</span><span class="c1">//node2-&gt;getPosition()为Node2在Node1中的模型坐标(相对于Node1的坐标原点得到的坐标) -&gt;(convertToWorldSpace)-&gt;转换为世界坐标，Node2在Node1中的坐标实际上是(0,0),在世界坐标中，Node2的坐标其实就是A点的坐标</span>
</span></code></pre></td></tr></table></div></figure>


<p>(150,50)为Node2的宽高<br/>
A点的坐标 = (400,500) - (150,50) = (250,450)</p>

<p>上面的是没加上锚点的，如果加上锚点，是相对于锚点的坐标<br/>
加上锚点之后，Node1的锚点是B点，所以Node2相对于Node1的锚点的坐标是:</p>

<figure class='code'><figcaption><span>世界坐标与模型坐标互相转换</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">Vec2</span> <span class="n">point2</span> <span class="o">=</span> <span class="n">node1</span><span class="o">-&gt;</span><span class="n">convertToWorldSpaceAR</span><span class="p">(</span><span class="n">node2</span><span class="o">-&gt;</span><span class="n">getPosition</span><span class="p">());</span>
</span><span class='line'><span class="o">&gt;</span><span class="c1">//node2-&gt;getPosition()为Node2在Node1中的模型坐标(相对于再加上Node1的锚点的坐标得到的坐标) -&gt;(convertToWorldSpaceAR)-&gt;转换为世界坐标</span>
</span></code></pre></td></tr></table></div></figure>


<p>Vec2 point2 得到的其实就是B点的坐标，也就是A点坐标，加上Node1锚点的坐标相对于A点的坐标。也就是(250,450)+(150,50) = (400,500)<br/>
也就是我们说的Node2的世界坐标！</p>

<figure class='code'><figcaption><span>世界坐标与模型坐标互相转换</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="kt">bool</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">init</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// 1. super init first</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">Layer</span><span class="o">::</span><span class="n">init</span><span class="p">())</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">auto</span> <span class="n">node1</span> <span class="o">=</span> <span class="n">Sprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;Node1.png&quot;</span><span class="p">);</span><span class="c1">//Sprite是精灵</span>
</span><span class='line'>  <span class="n">node1</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="mi">400</span><span class="p">,</span> <span class="mi">500</span><span class="p">));</span><span class="c1">//设置位置</span>
</span><span class='line'>  <span class="n">node1</span><span class="o">-&gt;</span><span class="n">setAnchorPoint</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">));</span><span class="c1">//设置锚点</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">node1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span><span class="c1">//层添加精灵</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">auto</span> <span class="n">node2</span> <span class="o">=</span> <span class="n">Sprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;Node2.png&quot;</span><span class="p">);</span><span class="c1">//Sprite是精灵</span>
</span><span class='line'>  <span class="n">node2</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">));</span><span class="c1">//设置位置</span>
</span><span class='line'>  <span class="n">node2</span><span class="o">-&gt;</span><span class="n">setAnchorPoint</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">));</span><span class="c1">//设置锚点</span>
</span><span class='line'>  <span class="n">node1</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">node2</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span><span class="c1">//把Node2放到Node1</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//将Node2的位置转换为相对于Node1的模型坐标，不带AR的，表示相对于Node1的坐标原点</span>
</span><span class='line'>  <span class="n">Vec2</span> <span class="n">point1</span> <span class="o">=</span> <span class="n">node1</span><span class="o">-&gt;</span><span class="n">convertToWorldSpace</span><span class="p">(</span><span class="n">node2</span><span class="o">-&gt;</span><span class="n">getPosition</span><span class="p">());</span>
</span><span class='line'>  <span class="n">Vec2</span> <span class="n">point2</span> <span class="o">=</span> <span class="n">node1</span><span class="o">-&gt;</span><span class="n">convertToWorldSpaceAR</span><span class="p">(</span><span class="n">node2</span><span class="o">-&gt;</span><span class="n">getPosition</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">log</span><span class="p">(</span><span class="s">&quot;Node2 WorldSpace = (%f,%f)&quot;</span><span class="p">,</span> <span class="n">point1</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">point1</span><span class="p">.</span><span class="n">y</span><span class="p">);</span><span class="c1">//Node2 WorldSpace = (250.000000,450.000000)</span>
</span><span class='line'>  <span class="n">log</span><span class="p">(</span><span class="s">&quot;Node2 WorldSpaceAR = (%f,%f)&quot;</span><span class="p">,</span> <span class="n">point2</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">point2</span><span class="p">.</span><span class="n">y</span><span class="p">);</span><span class="c1">//Node2 WorldSpaceAR = (400.000000,500.000000)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>node1模型坐标来设置位置</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">node2</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">));</span><span class="c1">//设置位置</span>
</span><span class='line'><span class="n">node2</span><span class="o">-&gt;</span><span class="n">setAnchorPoint</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">));</span><span class="c1">//设置锚点</span>
</span><span class='line'><span class="n">node1</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">node2</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span><span class="c1">//把Node2放到Node1</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面代码是使用node1模型坐标来设置位置的<br/>
也可以用世界坐标描述</p>

<figure class='code'><figcaption><span>世界坐标描述</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">node2</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="mi">250</span><span class="p">,</span> <span class="mi">450</span><span class="p">));</span>
</span><span class='line'><span class="n">node2</span><span class="o">-&gt;</span><span class="n">setAnchorPoint</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">));</span>
</span><span class='line'><span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">node2</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h1>源代码下载地址：</h1>

<blockquote cite='陈浩翔'>
GITHUB源码下载地址:<strong>【<a href='https://github.com/chenhaoxiang/cocos2d-x/tree/master/20170614/code/OpenGLcoordinates2' target='_blank'>点我进行下载</a>】</strong></p>
</blockquote>


<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【Cocos2d-x】开发基础-Node与Node层级架构]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/06/11/node-hierarchical-structure/"/>
    <updated>2017-06-11T13:38:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/06/11/node-hierarchical-structure</id>
    <content type="html"><![CDATA[<p>本篇博客讲解:<br/>
1.Node与Node层级架构<br/>
2.Node中重要的操作<br/>
3.Node中重要的属性<br/>
4.游戏循环与调度</p>

<!-- more -->


<hr />

<h1>Node与Node层级架构</h1>

<p>首先来看一张图<br/>
<img src="http://i.imgur.com/kGQ1oxN.png" alt="" /><br/>
这个图反应了Node与Node的层级架构<br/>
所谓层级架构其实就是树形结构/层次结构，从图上可以看出来，树的根是Scene(场景)，然后是层，层里面又包含了精灵，菜单，粒子系统，瓦片地图<br/>
所有这些元素，都有一个共同的父类，就是Node</p>

<p>这个树形结构，其实就是一种包含关系<br/>
<img src="http://i.imgur.com/wFK51kL.png" alt="" /><br/>
这2个文件共同定义了一个HelloWorld的层<br/>
class HelloWorld : public cocos2d::Layer<br/>
我们自己自定义了一个类HelloWorld继承了Layer，层最后要放到场景里去</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">Scene</span><span class="o">*</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">createScene</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// 创建场景对象</span>
</span><span class='line'>    <span class="k">auto</span> <span class="n">scene</span> <span class="o">=</span> <span class="n">Scene</span><span class="o">::</span><span class="n">create</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">// 创建层对象</span>
</span><span class='line'>    <span class="k">auto</span> <span class="n">layer</span> <span class="o">=</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">create</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">// 把层放到场景里</span>
</span><span class='line'>    <span class="n">scene</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">layer</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// 返回这个场景</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">scene</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>创建场景以及HelloWord这个层，然后把层放到场景里<br/>
通过addChild这个方法，把子节点加到父节点里面去<br/>
以此类推，可以把Layer添加到Scene里，也可以这样把精灵，菜单等添加到层里</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">menu</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span><span class="c1">//把菜单放到当前层</span>
</span><span class='line'><span class="c1">//把标签加入到层中</span>
</span><span class='line'><span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">label</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="c1">//把图片精灵加入到层中</span>
</span><span class='line'><span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">sprite</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码在HelloWord.cpp中可以看到<br/>
所以，最开始的图上的层次结构，是通过add的这个方法添加上来的<br/>
既然有添加，那么就有移除方法，后面再介绍。<br/>
主要是树形结构，需要注意的就是添加的顺序和个数<br/>
一般来说，一个场景会有多个层，我们建立的HelloWord实例中，场景和层是一对一的关系<br/>
也就是场景中只放了一个层。实际上场景与层是一对多的关系<br/>
为了减少绘制的次数，不要建立太多的层，那样很消耗cpu</p>

<p>层与精灵也是一对多的关系，然后层与菜单，粒子系统，瓦片地图都是一对多的关系<br/>
菜单与菜单项是一对多的关系，一个菜单里会有多个菜单项<br/>
当cocos2d启动一个场景的时候，场景就会加载层，层会加载菜单等等，菜单会加载菜单项。就是这样一种树形结构</p>

<h1>Node中重要的操作</h1>

<p>由于场景、层、菜单、精灵&hellip;都是继承的Node，所以它们有一些共同的属性和方法</p>

<h2>创建节点</h2>

<figure class='code'><figcaption><span>创建节点</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">Node</span><span class="o">*</span> <span class="n">childNode</span> <span class="o">=</span> <span class="n">Node</span><span class="o">::</span><span class="n">create</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h2>增加新的子节点</h2>

<figure class='code'><figcaption><span>增加新的子节点</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">node</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">childNode</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">123</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>第一个参数是添加的节点；第二个参数是添加的Node的z轴的顺序(添加节点的时候会有顺序的，相当于绘制的时候的先后顺序)；第三个参数是Tag/标签，可以理解成id，通过这个tag来操作node对象    <br/>
<img src="http://i.imgur.com/eae63yS.png" alt="" /><br/>
附带第二个参数的英文介绍：</p>

<figure class='code'><figcaption><span>增加新的子节点</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">LocalZOrder</span> <span class="n">is</span> <span class="n">the</span> <span class="err">&#39;</span><span class="n">key</span><span class="err">&#39;</span> <span class="n">used</span> <span class="n">to</span> <span class="n">sort</span> <span class="n">the</span> <span class="n">node</span> <span class="n">relative</span> <span class="n">to</span> <span class="n">its</span> <span class="n">siblings</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">The</span> <span class="n">Node</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">parent</span> <span class="n">will</span> <span class="n">sort</span> <span class="n">all</span> <span class="n">its</span> <span class="n">children</span> <span class="n">based</span> <span class="n">on</span> <span class="n">the</span> <span class="n">LocalZOrder</span> <span class="n">value</span><span class="p">.</span> <span class="n">If</span> <span class="n">two</span> <span class="n">nodes</span> <span class="n">have</span> <span class="n">the</span> <span class="n">same</span> <span class="n">LocalZOrder</span><span class="p">,</span> <span class="n">then</span> <span class="n">the</span> <span class="n">node</span> <span class="n">that</span> <span class="n">was</span> <span class="n">added</span> <span class="n">first</span> <span class="n">to</span> <span class="n">the</span> <span class="n">children</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">array</span> <span class="n">will</span> <span class="n">be</span> <span class="n">in</span> <span class="n">front</span> <span class="n">of</span> <span class="n">the</span> <span class="n">other</span> <span class="n">node</span> <span class="n">in</span> <span class="n">the</span> <span class="n">array</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">Also</span><span class="p">,</span> <span class="n">the</span> <span class="n">Scene</span> <span class="n">Graph</span> <span class="n">is</span> <span class="n">traversed</span> <span class="k">using</span> <span class="n">the</span> <span class="s">&quot;In-Order&quot;</span> <span class="n">tree</span> <span class="n">traversal</span> <span class="n">algorithm</span> <span class="p">(</span> <span class="nl">http</span><span class="p">:</span><span class="c1">//en.wikipedia.org/wiki/Tree_traversal#In-order ) And Nodes that have LocalZOrder values &lt; 0 are the &quot;left&quot; subtree While Nodes with LocalZOrder &gt;=0 are the &quot;right&quot; subtree.</span>
</span></code></pre></td></tr></table></div></figure>


<p>addChild有4个方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">virtual</span> <span class="kt">void</span> <span class="n">addChild</span>   <span class="p">(</span> <span class="n">Node</span> <span class="o">*</span> <span class="n">child</span><span class="p">)</span>  
</span><span class='line'><span class="k">virtual</span> <span class="kt">void</span> <span class="n">addChild</span>   <span class="p">(</span> <span class="n">Node</span> <span class="o">*</span> <span class="n">child</span><span class="p">,</span><span class="kt">int</span> <span class="n">localZOrder</span><span class="p">)</span>    
</span><span class='line'><span class="k">virtual</span> <span class="kt">void</span> <span class="n">addChild</span>   <span class="p">(</span> <span class="n">Node</span> <span class="o">*</span> <span class="n">child</span><span class="p">,</span><span class="kt">int</span> <span class="n">localZOrder</span><span class="p">,</span><span class="kt">int</span> <span class="n">tag</span><span class="p">)</span>
</span><span class='line'><span class="k">virtual</span> <span class="kt">void</span> <span class="n">addChild</span>   <span class="p">(</span> <span class="n">Node</span> <span class="o">*</span> <span class="n">child</span><span class="p">,</span><span class="kt">int</span> <span class="n">localZOrder</span><span class="p">,</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span> <span class="n">name</span><span class="p">)</span>  
</span></code></pre></td></tr></table></div></figure>


<h2>查找子节点</h2>

<figure class='code'><figcaption><span>通过Tag查找子节点</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">Node</span><span class="o">*</span> <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">getChildByTag</span><span class="p">(</span><span class="mi">123</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>删除子节点</h2>

<figure class='code'><figcaption><span>删除子节点，并停止所有该节点上的一切动作</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">node</span><span class="o">-&gt;</span><span class="n">removeChildByTag</span><span class="p">(</span><span class="mi">123</span><span class="p">,</span><span class="nb">true</span><span class="p">)</span><span class="c1">//第二个参数表示是否在内存中清除这个对象</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>通过Node指针删除节点</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">node</span><span class="o">-&gt;</span><span class="n">removeChild</span><span class="p">(</span><span class="n">childNode</span><span class="p">)</span><span class="c1">//直接删除节点</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>删除所有子节点，并停止这些子节点上的一切动作</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">node</span><span class="o">-&gt;</span><span class="n">removeAllChildrenWithCleanup</span><span class="p">(</span><span class="nb">true</span><span class="p">)</span> <span class="c1">//true-清除内存</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>从父节点Node中删除当前的节点对象，并停止所有该节点上的一切动作</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">node</span><span class="o">-&gt;</span><span class="n">removeFromParentAndCleanup</span><span class="p">(</span><span class="nb">true</span><span class="p">)</span> <span class="c1">//true-清除内存</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Node中重要的属性</h1>

<p>Node两个非常重要的属性:<br/>
position和anchorPoint<br/>
position是指的位置，anchorPoint是指的锚点<br/>
位置(坐标)很好理解，就是比如放在(5,5),x=5,y=5.但是精灵图片是有大小的，这个时候就需要锚点了。  <br/>
我们用图来理解吧
1.anchorPoint为(0.5,0.5)，这个是默认值<br/>
<img src="http://i.imgur.com/P68puku.png" alt="" /><br/>
第一个参数0.5，是锚点距离左边边线的距离和图片整个的宽度的比例，也就是1/2<br/>
第二个参数0.5，是锚点距离底边高度和整个高度的比值，也就是1/2</p>

<p>2.anchorPoint为(0,0)，也就是精灵图片的左下角<br/>
<img src="http://i.imgur.com/DqOBDal.png" alt="" /></p>

<p>3.anchorPoint为(1.0,1.0)，也就是精灵图片的右上角  <br/>
<img src="http://i.imgur.com/hHux4IT.png" alt="" /></p>

<p>4.anchorPoint为(0.66,0.5)，这个具有普遍性<br/>
<img src="http://i.imgur.com/4ZzjNcC.png" alt="" /></p>

<h1>游戏循环与调度</h1>

<p>每一个游戏程序都有一个循环在不断运行，它是有导演对象来管理和维护。<br/>
如果需要场景中的精灵运动起来，我们可以在游戏循环中使用定时器（Scheduler）对精灵等对象的运行进行调度。<br/>
因为Node类封装了Scheduler类，所以我们也可以直接使用Node中调用函数。<br/>
Node中调用函数主要有：</p>

<figure class='code'><figcaption><span>从父节点Node中删除当前的节点对象，并停止所有该节点上的一切动作</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="n">scheduleUpdate</span> <span class="p">(</span> <span class="kt">void</span> <span class="p">)</span><span class="c1">//开始游戏调度，每个Node对象只要调用该函数，那么这个Node对象就会定时地每帧回调用一次自己的update(float dt)函数，每帧调用一次update函数！这是固定的时间和函数  </span>
</span><span class='line'><span class="c1">//下面这个函数更加个性化，可以自定义回调函数和时间</span>
</span><span class='line'><span class="kt">void</span> <span class="n">schedule</span> <span class="p">(</span> <span class="n">SEL_SCHEDULE</span> <span class="n">selector</span><span class="p">,</span>  <span class="kt">float</span>  <span class="n">interval</span> <span class="p">)</span><span class="c1">//与scheduleUpdate函数功能一样，不同的是我们可以指定回调函数（通过selector指定），也可以根据需要指定回调时间间隔</span>
</span><span class='line'><span class="c1">//一旦调度开始，就会不断循环</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">unscheduleUpdate</span> <span class="p">(</span> <span class="kt">void</span> <span class="p">)</span><span class="c1">//停止update(float dt)函数调度  和scheduleUpdate对应</span>
</span><span class='line'><span class="kt">void</span> <span class="n">unschedule</span> <span class="p">(</span> <span class="n">SEL_SCHEDULE</span> <span class="n">selector</span> <span class="p">)</span><span class="c1">//可以指定具体函数停止调度  和schedule对应</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">unscheduleAllSelectors</span> <span class="p">(</span> <span class="kt">void</span> <span class="p">)</span><span class="c1">//可以停止所有调度</span>
</span></code></pre></td></tr></table></div></figure>


<h1>源代码下载地址：</h1>

<blockquote cite='陈浩翔'>
GITHUB源码下载地址:<strong>【<a href='https://github.com/chenhaoxiang/cocos2d-x/tree/master/20170611/HelloWorld' target='_blank'>点我进行下载</a>】</strong></p>
</blockquote>


<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【Cocos2d-x】开发基础-Cocos2d-x核心概念]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/06/10/core-concept/"/>
    <updated>2017-06-10T13:38:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/06/10/core-concept</id>
    <content type="html"><![CDATA[<p>本篇博客讲解:<br/>
1.Cocos2d-x的核心概念</p>

<!-- more -->


<hr />

<h1>导演</h1>

<p>导演类Director(v3.0之前是CCDirector)用于管理场景对象。<br/>
(所以3.0版本和以前的最大区别(我们看到的最大区别)就是类前面的CC，3.0版本是把所以的类前缀CC都去掉了)</p>

<p>采用单例设计模式！(不多解释啦，不知道的朋友请搜索)</p>

<figure class='code'><figcaption><span>获得导演类Director实例语句</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">auto</span> <span class="n">director</span> <span class="o">=</span> <span class="n">Director</span><span class="o">::</span><span class="n">getInstance</span><span class="p">();</span><span class="c1">//获取唯一的导演  单例模式</span>
</span></code></pre></td></tr></table></div></figure>


<h2>导演对象的职责/作用</h2>

<p>访问和改变场景<br/>
访问Cocos2d-x的配置信息<br/>
暂停、继续和停止游戏<br/>
转换坐标</p>

<p>上面只是导演对象的职责其中一部分，还有其他很多，但我们不需要让导演做很多事情(其他的事被隐藏了)，我们用的最多的应该就是访问和改变场景、暂停、继续和停止游戏和转换坐标</p>

<h1>场景</h1>

<p>场景类Scene(v3.0之前是CCScene)是构成游戏的界面，类似于电影中的场景。</p>

<p>像导演、场景、包括层，精灵等这些游戏的概念，其实都是从电影行业中过渡过来的。<br/>
那么，电影行业，我们知道有场景，有导演。<br/>
场景就是我们拍这场戏，我们布置的景  比如打斗的场景等<br/>
场景中会有男主角，女主角，那么男女主角就相当于我们这里的精灵了，包括道具什么的(精灵)，这些东西在一起，就构成了层</p>

<p>所以场景里面也会放一些层</p>

<h2>场景大致可以分为以下几类</h2>

<p>展示类场景。播放视频或简单的在图像上输出文字，来实现游戏的开场介绍、胜利和失败提示、帮助介绍<br/>
选项类场景。主菜单，设置游戏参数等(比如开始，暂停，继续菜单)<br/>
游戏场景。这是游戏的主要内容</p>

<p>Scene类图:继承图
<img src="http://i.imgur.com/2S6h9PZ.png" alt="" /></p>

<h1>层</h1>

<p>层是我们写游戏的重点，我们大约99%以上的时间是在层上实现我们游戏内容。<br/>
层的管理类似于Photoshop中的图层，它也是一层一层叠在一起</p>

<p>我们一般写的很多类都是层，然后在层上面添加精灵等.然后把层放到场景里<br/>
场景包含层，层包含精灵,菜单等对象</p>

<p>理论上来说，层的层数越多(层与层之间有覆盖的问题，后面的层会覆盖先绘制的层)，需要绘制的深度越深，越耗CPU<br/>
大家可以打开Photoshop，用里面的图层来理解，这样更加直观<br/>
<img src="http://i.imgur.com/4XUGFsE.png" alt="" /></p>

<h1>精灵</h1>

<p>精灵类Sprite(v3.0之前是CCSprite)是游戏中非常重要的概念，它包括了敌人、玩家控制的对象、静态物体、地图和背景等<br/>
通常情况它会进行运动，运动方式包括了：移动、旋转、放大、缩小和动画等</p>

<h1>菜单</h1>

<p>菜单在游戏中时非常重要的概念，它提供操作的集合，在Cococ2d-x中菜单类是Menu</p>

<p>Menu中包含菜单项<br/>
MenuItem，它有三个子类：<br/>
MenuItemLabel、MenuItemSprite和MenuItemToggle</p>

<p>之前的HelloWord中的关闭按钮其实就是一个菜单项<br/>
我们也可以用精灵来实现，但是菜单项封装了一些触摸事件，你不需要关心它事件处理的细节问题</p>

<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【Cocos2d-x】开发基础-第一个Cocos2d-x游戏]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/06/07/cocos2dx-hello/"/>
    <updated>2017-06-07T13:38:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/06/07/cocos2dx-hello</id>
    <content type="html"><![CDATA[<p>本篇博客讲解:<br/>
1.第一个Cocos2d-x游戏</p>

<!-- more -->


<hr />

<h1>第一个Cocos2d-x游戏</h1>

<h2>创建工程</h2>

<p>cocos工具：<br/>
就是这个，看图
<img src="http://i.imgur.com/WHlXrKy.png" alt="" />
命令工具cocos实现，cocos工具其实是cocos2d团队自己开发的。是使用Python脚本编写的，cocos工具的运行需要安装Python环境<br/>
(还会用到ant,eclipse等工具哦，后面介绍)<br/>
Python下载地址
<a href="https://www.python.org/">https://www.python.org/</a>
需要注意的是它目前有Python3和Python2可以下载，我们选择Python 2，不要下载3，因为2和3语法有很大差别，cocos这个工具是使用2编写的，如果你使用了3，会在脚本编译就出问题  <br/>
(我的源代码中有window的Python安装包)<br/>
下载->安装->配置环境变量(Path中添加Python根目录)<br/>
<img src="http://i.imgur.com/n5L6JbI.png" alt="" /></p>

<p>点击确定设置好。</p>

<p>因为你还没有设置其他环境变量，所以你需要到此目录下：<br/>
cocos2d-x-3.13.1\tools\cocos2d-console\bin<br/>
直接输入cmd回车
<img src="http://i.imgur.com/pMcZqEi.png" alt="" />
或者shift鼠标右键打开命令窗口，都行</p>

<p>如果你不知道怎么用，直接输入cocos会有帮助
<img src="http://i.imgur.com/r1BMr1e.png" alt="" /></p>

<p>终端中执行如下指令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cocos new -p com.uifuture -l cpp -d E://chxCocosWork HelloWord</span></code></pre></td></tr></table></div></figure>


<p>com.uifuture是包名，最好是写上(可以不写)，因为在安卓发布打包需要<br/>
cpp是语言，表示生成c++语言，还有lua,js<br/>
E://chxCocosWork 为生成目录<br/>
HelloWord为工程名<br/>
<img src="http://i.imgur.com/atnBoCF.png" alt="" />
如果你生成过程有问题，或者无法找到cocos命令，有可能是你的Path没有加进去，或者你使用的Python版本是3.X。</p>

<p>也可以用这种写法</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cocos new HelloWord -p
</span><span class='line'>com.uifuture -l cpp -d E://chxCocosWork</span></code></pre></td></tr></table></div></figure>


<h2>工程文件结构</h2>

<p>生成的目录结构是这样的：
<img src="http://i.imgur.com/iK0PwUP.png" alt="" /></p>

<p>Resources文件夹是资源文件夹。<br/>
图片，声音，字体，字库等都在这个目录</p>

<p>Class目录是我们开发重点关注的文件夹，这里面都是cpp文件<br/>
其他的文件夹，基本都是和平台有关的</p>

<p>现在刚刚入门，我们不考虑平台移植的问题，现在只关心Class目录中文件的编写</p>

<p>打开目录proj.win32，使用VS打开项目。 (使用VS打开HelloWorld.sln即可)<br/>
<img src="http://i.imgur.com/8hfsLDh.png" alt="" /></p>

<p>还有一些其他的工程：
<img src="http://i.imgur.com/p4cogHU.png" alt="" /></p>

<p>也就是说，HelloWord这个工程需要运行，需要依赖这些工程！<br/>
libcocos2d就是所有cocos2d的源码都是放在这个工程里面的，这个是和项目根目录cocos2d这个文件夹对应的</p>

<p>运行工程：(第一次编译可能需要较长时间)
<img src="http://i.imgur.com/pmlDOeB.png" alt="" /></p>

<p>左下角的一些数字，就是输出的帧;GL vwets就是绘制图形需要的顶点;GL calls 就是绘制的精灵的个数。右下角的按钮是菜单，你可以选择退出游戏</p>

<h2>代码解释</h2>

<p>我们看HelloWordScene.h</p>

<figure class='code'><figcaption><span>HelloWordScene.h</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#ifndef __HELLOWORLD_SCENE_H__</span>
</span><span class='line'><span class="cp">#define __HELLOWORLD_SCENE_H__</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &quot;cocos2d.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">HelloWorld</span> <span class="o">:</span> <span class="k">public</span> <span class="n">cocos2d</span><span class="o">::</span><span class="n">Layer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">cocos2d</span><span class="o">::</span><span class="n">Scene</span><span class="o">*</span> <span class="n">createScene</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">bool</span> <span class="nf">init</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// a selector callback</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">menuCloseCallback</span><span class="p">(</span><span class="n">cocos2d</span><span class="o">::</span><span class="n">Ref</span><span class="o">*</span> <span class="n">pSender</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// implement the &quot;static create()&quot; method manually</span>
</span><span class='line'>    <span class="n">CREATE_FUNC</span><span class="p">(</span><span class="n">HelloWorld</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif </span><span class="c1">// __HELLOWORLD_SCENE_H__</span>
</span></code></pre></td></tr></table></div></figure>


<p>里面定义了一个类HelloWorld,继承了cocos2d::Layer(层)<br/>
虽然文件名叫HelloWordScene,Scene是场景，但是实际上里面的类是HelloWorld，实际上是层<br/>
创建层的同时会先创建层所在的场景，层是要放在场景里面的。</p>

<p>AppDelegate是一个应用程序委托对象，如果懂ios开发的，应该会对这个比较熟悉。<br/>
它的作用就是，应用程序启动的时候会调用它。</p>

<figure class='code'><figcaption><span>AppDelegate.h</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#ifndef  _APP_DELEGATE_H_</span>
</span><span class='line'><span class="cp">#define  _APP_DELEGATE_H_</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &quot;cocos2d.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">@brief    The cocos2d Application.</span>
</span><span class='line'>
</span><span class='line'><span class="cm">Private inheritance here hides part of interface from Director.</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="k">class</span>  <span class="nc">AppDelegate</span> <span class="o">:</span> <span class="k">private</span> <span class="n">cocos2d</span><span class="o">::</span><span class="n">Application</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">AppDelegate</span><span class="p">();</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="o">~</span><span class="n">AppDelegate</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">void</span> <span class="nf">initGLContextAttrs</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">    @brief    Implement Director and Scene init code here.</span>
</span><span class='line'><span class="cm">    @return true    Initialize success, app continue.</span>
</span><span class='line'><span class="cm">    @return false   Initialize failed, app terminate.</span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">bool</span> <span class="nf">applicationDidFinishLaunching</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">    @brief  Called when the application moves to the background</span>
</span><span class='line'><span class="cm">    @param  the pointer of the application</span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">void</span> <span class="nf">applicationDidEnterBackground</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">    @brief  Called when the application reenters the foreground</span>
</span><span class='line'><span class="cm">    @param  the pointer of the application</span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">void</span> <span class="nf">applicationWillEnterForeground</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif </span><span class="c1">// _APP_DELEGATE_H_</span>
</span></code></pre></td></tr></table></div></figure>


<p>applicationDidFinishLaunching 这个函数是在程序启动的时候会调用它，也就是在游戏启动的时候调用，一般进行游戏的初始化，比如游戏的导演啊，场景啊等在这里进行初始化。<br/>
applicationDidEnterBackground 是退到后台，就是点击home键，回到桌面。接电话或者跳到另一个应用程序去，都会调用这个函数。<br/>
applicationWillEnterForeground 是从后台重新回到前台，也就是从手机任务栏重新回到游戏，会调用这个函数 <br/>
以上三个函数是和游戏的生命周期有关系的。<br/>
HelloWorldScene.cpp</p>

<figure class='code'><figcaption><span>HelloWorldScene.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &quot;HelloWorldScene.h&quot;</span>
</span><span class='line'><span class="cp">#include &quot;SimpleAudioEngine.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">USING_NS_CC</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">Scene</span><span class="o">*</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">createScene</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// 创建场景对象</span>
</span><span class='line'>    <span class="k">auto</span> <span class="n">scene</span> <span class="o">=</span> <span class="n">Scene</span><span class="o">::</span><span class="n">create</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 创建层对象</span>
</span><span class='line'>    <span class="k">auto</span> <span class="n">layer</span> <span class="o">=</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">create</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 把层放到场景里</span>
</span><span class='line'>    <span class="n">scene</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">layer</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 返回这个场景</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">scene</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// on &quot;init&quot; you need to initialize your instance</span>
</span><span class='line'><span class="c1">// 初始化当前这个层</span>
</span><span class='line'><span class="kt">bool</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">init</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//////////////////////////////</span>
</span><span class='line'>    <span class="c1">// 1. super init first</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">Layer</span><span class="o">::</span><span class="n">init</span><span class="p">()</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">auto</span> <span class="n">visibleSize</span> <span class="o">=</span> <span class="n">Director</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getVisibleSize</span><span class="p">();</span><span class="c1">//得到屏幕的大小(可见区域大小)</span>
</span><span class='line'>    <span class="n">Vec2</span> <span class="n">origin</span> <span class="o">=</span> <span class="n">Director</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getVisibleOrigin</span><span class="p">();</span><span class="c1">//得到可见区域大小的左下角坐标</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/////////////////////////////</span>
</span><span class='line'>    <span class="c1">// 2. add a menu item with &quot;X&quot; image, which is clicked to quit the program</span>
</span><span class='line'>    <span class="c1">//    you may modify it.</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// add a &quot;close&quot; icon to exit the progress. it&#39;s an autorelease object</span>
</span><span class='line'>  <span class="c1">// 得到图片菜单 以及设置回调函数</span>
</span><span class='line'>    <span class="k">auto</span> <span class="n">closeItem</span> <span class="o">=</span> <span class="n">MenuItemImage</span><span class="o">::</span><span class="n">create</span><span class="p">(</span>
</span><span class='line'>                                           <span class="s">&quot;CloseNormal.png&quot;</span><span class="p">,</span>
</span><span class='line'>                                           <span class="s">&quot;CloseSelected.png&quot;</span><span class="p">,</span>
</span><span class='line'>                                           <span class="n">CC_CALLBACK_1</span><span class="p">(</span><span class="n">HelloWorld</span><span class="o">::</span><span class="n">menuCloseCallback</span><span class="p">,</span> <span class="k">this</span><span class="p">));</span>
</span><span class='line'>    <span class="c1">//关闭的按钮 </span>
</span><span class='line'>    <span class="n">closeItem</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">visibleSize</span><span class="p">.</span><span class="n">width</span> <span class="o">-</span> <span class="n">closeItem</span><span class="o">-&gt;</span><span class="n">getContentSize</span><span class="p">().</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span> <span class="p">,</span>
</span><span class='line'>                                <span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">closeItem</span><span class="o">-&gt;</span><span class="n">getContentSize</span><span class="p">().</span><span class="n">height</span><span class="o">/</span><span class="mi">2</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// create menu, it&#39;s an autorelease object</span>
</span><span class='line'>  <span class="c1">//把菜单项放到菜单里</span>
</span><span class='line'>    <span class="k">auto</span> <span class="n">menu</span> <span class="o">=</span> <span class="n">Menu</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">closeItem</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">//指定菜单的位置 设置显示的坐标位置</span>
</span><span class='line'>    <span class="n">menu</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="o">::</span><span class="n">ZERO</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">menu</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span><span class="c1">//把菜单放到当前层</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/////////////////////////////</span>
</span><span class='line'>    <span class="c1">// 3. add your codes below...</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//标签 也就是中间显示的那个文字  以及加载字体</span>
</span><span class='line'>    <span class="k">auto</span> <span class="n">label</span> <span class="o">=</span> <span class="n">Label</span><span class="o">::</span><span class="n">createWithTTF</span><span class="p">(</span><span class="s">&quot;Hello World&quot;</span><span class="p">,</span> <span class="s">&quot;fonts/Marker Felt.ttf&quot;</span><span class="p">,</span> <span class="mi">24</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//指定标签的位置</span>
</span><span class='line'>    <span class="n">label</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">visibleSize</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
</span><span class='line'>                            <span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">visibleSize</span><span class="p">.</span><span class="n">height</span> <span class="o">-</span> <span class="n">label</span><span class="o">-&gt;</span><span class="n">getContentSize</span><span class="p">().</span><span class="n">height</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//把标签加入到层中</span>
</span><span class='line'>    <span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">label</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//指定一个图片的精灵</span>
</span><span class='line'>    <span class="k">auto</span> <span class="n">sprite</span> <span class="o">=</span> <span class="n">Sprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;HelloWorld.png&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 设置图片精灵的位置</span>
</span><span class='line'>    <span class="n">sprite</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="n">visibleSize</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span> <span class="o">+</span> <span class="n">origin</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">visibleSize</span><span class="p">.</span><span class="n">height</span><span class="o">/</span><span class="mi">2</span> <span class="o">+</span> <span class="n">origin</span><span class="p">.</span><span class="n">y</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//把图片精灵加入到层中</span>
</span><span class='line'>    <span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">sprite</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//点击close菜单项来回调的</span>
</span><span class='line'><span class="kt">void</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">menuCloseCallback</span><span class="p">(</span><span class="n">Ref</span><span class="o">*</span> <span class="n">pSender</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//Close the cocos2d-x game scene and quit the application</span>
</span><span class='line'>    <span class="n">Director</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">end</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//条件编译 ，也就是满足条件就编译过去，如果不满足，就相当于注释了</span>
</span><span class='line'><span class="cp">#if (CC_TARGET_PLATFORM == CC_PLATFORM_IOS) </span>
</span><span class='line'>    <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*To navigate back to native iOS screen(if present) without quitting the application  ,do not use Director::getInstance()-&gt;end() and exit(0) as given above,instead trigger a custom event created in RootViewController.mm as below*/</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//EventCustom customEndEvent(&quot;game_scene_close_event&quot;);</span>
</span><span class='line'>    <span class="c1">//_eventDispatcher-&gt;dispatchEvent(&amp;customEndEvent);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样我们就得到一个能执行的HelloWord程序啦</p>

<p>因为cocos2dx项目工程太大，只上传Classes一些cpp文件啦，你可以手动把代码加入到你的cocos2dx项目工程中。</p>

<h1>源代码下载地址：</h1>

<blockquote cite='陈浩翔'>
GITHUB源码下载地址:<strong>【<a href='https://github.com/chenhaoxiang/cocos2d-x/tree/master/20170607/HelloWorld' target='_blank'>点我进行下载</a>】</strong></p>
</blockquote>


<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【Cocos2d-x】开发基础-Cocos简介与环境搭建]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/06/05/cocos2dx-about/"/>
    <updated>2017-06-05T13:38:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/06/05/cocos2dx-about</id>
    <content type="html"><![CDATA[<p>本篇博客讲解:<br/>
Cocos2d-x介绍与环境搭建<br/>
1.移动平台游戏引擎介绍<br/>
2.Cocos2d家谱介绍<br/>
3.Cocos2d-x设计目标<br/>
4.在Windows平台下开始开发Cocos2d-x游戏</p>

<!-- more -->


<hr />

<p>[TOC]</p>

<h1>1.移动平台游戏引擎介绍</h1>

<h2>游戏引擎的定义</h2>

<p>游戏引擎是指一些已编写好的可编辑游戏系统或者一些互交式图像应用程序的核心组件，游戏软件的主程序。<br/>
通俗一点理解就是：<br/>
游戏引擎其实就是一个半成品，它能帮你做什么，就是开发游戏。就是说，一些基础的工作帮你做好了。<br/>
你拿过来之后，根据你的需求，根据你要开发的游戏的特点加上一些你自己的东西，那么这就是游戏引擎。<br/>
如果没有游戏引擎，你完全可以自己做那些事情，有了游戏引擎之后，很多东西就不用自己去做了。<br/>
游戏引擎你也可以理解成框架或者库！</p>

<h2>游戏引擎包含以下子系统</h2>

<p>渲染引擎:<br/>
把从计算机中0101的代码变成我们能够识别的图像的过程！<br/>
这样理解更好：相当与你拿一个染料桶在墙上刷染料，把染料刷到墙上的过程，这个就是渲染的过程。</p>

<p>物理引擎:<br/>
其实就是模拟现实的物理环境，比如重力等</p>

<p>碰撞检测系统、音效、脚本引擎、电脑动画、人工智能、网络引擎以及场景管理。</p>

<h2>移动平台游戏引擎中主要可以分为</h2>

<p>2D引擎和3D引擎</p>

<h3>2D引擎主要有</h3>

<p>Coco2d-iphone,Cocos2d-x,Corona SDK,Construct 2,WiEngine和Cyclone 2D</p>

<p>Coco2d-iphone和Cocos2d-x看名字就知道有些联系了，Cocos2d-x很多类似管理的东西，比如对象，类的设计就是从Coco2d-iphone过度过来的。<br/>
Corona SDK是用Lua脚本编写的</p>

<h3>3D引擎主要有</h3>

<p>Unity3D,Unreal Development Kit,ShiVa 3D 和Marmalade</p>

<p>现在很火的就是Unity3D</p>

<h2>HTML 5的游戏引擎</h2>

<p>Cocos2d-js,X-Canvas和Sphinx等</p>

<h1>2.Cocos2d家谱介绍</h1>

<p><img src="http://i.imgur.com/yeghXaA.png" alt="" /></p>

<p>其实这个家谱已经过时了，不过可以看到Cocos2d的发展路线<br/>
有兴趣的大家可以自行搜索了解</p>

<h1>3.Cocos2d-x设计目标</h1>

<h2>Cocos2d-x目标</h2>

<p><img src="http://i.imgur.com/ORpTwbq.png" alt="" /></p>

<p>为什么Cocos2d这么优秀，为什么这么多人接受和推广它。<br/>
我们看上面的图，首先，从横向来讲，cocos2d可以用很多平台开发，基于不同平台开发，很方便！<br/>
还有发布平台，写一个程序，发布到多个平台！(节省大量时间和成本)</p>

<p>从纵向往上来看，可以绑定Javascript和Lua脚本<br/>
从纵向往下来看，就是和硬件有关了</p>

<h2>Cocos2d-x绑定Javascript和Lua脚本</h2>

<p>解释性的语言，结构非常严谨，编译速度很快！</p>

<p>也就是在开发过程中，我们不止能使用c++开发，也能使用javascript和lua脚本开发！</p>

<p><img src="http://i.imgur.com/40Xt1bX.png" alt="" /></p>

<p>可以看到，我们有4条线路来开发游戏<br/>
1、C线路：通过c++<br/>
2、D线路：通过Lua(我们不需要管和c++的绑定)<br/>
3、B线路：JS绑定的引擎 cocos2d-js如果想开发本地游戏，需要调用cocos2d-x(我们不需要管怎么绑定的，只要会JS，就能开发本地游戏)<br/>
4、A线路：开发网页游戏</p>

<h1>4.在Windows平台下开始开发Cocos2d-x游戏</h1>

<p>为什么选择在Window下开发游戏，因为对硬件设备要求没那么高<br/>
而且先从window先学习cocos2dx是最容易学习的</p>

<h2>使用Visual Studio开发工具</h2>

<p>在这里我使用的是Visual Studio 2013<br/>
操作系统是使用的Windows 7</p>

<h2>下载和使用Cocos2d-x案例</h2>

<p>网址：<a href="http://www.cocos2d-x.org/">http://www.cocos2d-x.org/</a>
<img src="http://i.imgur.com/2GQ3y9p.png" alt="" />
下载:
<img src="http://i.imgur.com/vnnItnl.png" alt="" /></p>

<p>下载解压之后：
<img src="http://i.imgur.com/aZAgVPh.png" alt="" /></p>

<h3>build目录</h3>

<p>我们要学习的话，先进入build目录里面，这个里面很多是工程文件
.sln是基于微软的VS工具的解决方案<br/>
 cocos2d_tests.xcodeproj和cocos2d_libs.xcodeproj在window下看起来是文件夹<br/>
但是如果拿到mac系统里，但是其实就是mac xcode的工程文件，在xcode就可以运行cocos2d_tests.xcodeproj这个文件，运行之后，就会启动相关的案例代码<br/>
在window就是启动cocos2d-win32.sln这个启动相关的案例代码<br/>
<img src="http://i.imgur.com/kxLbiVg.png" alt="" /></p>

<p>我们主要运行的就cpp-tests，cpp-tests就是我们看到的大部分帮助例子在这里！<br/>
要想运行的，需要把这个设置为启动项目！然后就会看到这个是加粗的字体<br/>
<img src="http://i.imgur.com/vHP1ovd.png" alt="" />
然后运行它，第一次编译时间会比较长<br/>
<img src="http://i.imgur.com/N6iotba.png" alt="" />
运行之后，里面都是一些演示实例，大家可以看看<br/>
看源代码的话，就搜索数字后面的名字，找源代码进行学习</p>

<p>在window下开发选择win32，因为实际上在window下用VS开发出来，需要有模拟器来运行游戏场景，但是由于我们没有真机，所以把游戏场景在window的一个小窗口显示出来的，所以叫win32程序。
win32程序在最后发布的时候其实是没有用的，win32其实只是开发，模拟测试，还有学习的环境</p>

<p>install-deps-linux.sh就是基于Linux的安装开发的文件</p>

<h3>cocos目录</h3>

<p>cocos2d引擎的源代码，全部放在这里</p>

<h3>docs目录</h3>

<p><img src="http://i.imgur.com/Wsl7Xmr.png" alt="" />
文档目录，一开始是空的，只有上面的文件</p>

<h3>extensions目录</h3>

<p>扩展的内库 - 一般也都是cocos2d团队开发的，但是它是扩展的</p>

<h3>external目录</h3>

<p>第三方的扩展库，比如使用其他的物理引擎等</p>

<h3>plugin目录</h3>

<p>插件什么的</p>

<h3>templates目录</h3>

<p>这是模板，我们使用指令生成cocos2dx的模板，都是从这个模板里面生成的工程代码的</p>

<h3>tests目录</h3>

<p>就是刚刚的项目的cpp-tests的源码</p>

<h3>tools目录</h3>

<p>工具目录
<img src="http://i.imgur.com/0gjch9N.png" alt="" />
通过cocos的工具，python脚本编写的，可以帮助我们创建一个工程出来</p>

<h2>生成API文档</h2>

<p>看文件夹docs，里面没有帮助文档
<img src="http://i.imgur.com/kGgdSMr.png" alt="" />
现在里面的内容是帮助我们生成帮助API文档的<br/>
类似Java的网页式的帮助文档<br/>
使用Doxygen(无法生成图片)和Graphviz工具，结合使用<br/>
Doxygen:<br/>
<a href="http://www.stack.nl/~dimitri/doxygen/download.html#latestsrc">http://www.stack.nl/~dimitri/doxygen/download.html#latestsrc</a><br/>
Graphviz:<br/>
<a href="http://www.graphviz.org/Download_windows.php">http://www.graphviz.org/Download_windows.php</a><br/>
下载然后都安装就好了。<br/>
启动Doxygen
<img src="http://i.imgur.com/4DEtFRw.png" alt="" />
然后File->open<br/>
打开cocos2d-x-3.13.1\docs下的doxygen.config文件<br/>
我们不需要做其他事情，然后直接Run
<img src="http://i.imgur.com/Kdr1MRs.png" alt="" />
会在docs目录下生成html目录，找到index.html文件
<img src="http://i.imgur.com/NmTwVH6.png" alt="" />
然后直接用浏览器打开就行了<br/>
<img src="http://i.imgur.com/8m5aul3.png" alt="" />
这就是我们刚刚生成的cocos2dx的文档</p>

<p>在此感谢CSDN学院关东升老师的教学视频！</p>

<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【C++】const对象和const成员]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/06/03/const-object-member/"/>
    <updated>2017-06-03T21:38:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/06/03/const-object-member</id>
    <content type="html"><![CDATA[<p>如果我们在定义一个对象之后，不希望在后面对这个对象进行修改，那么我们可以把这个对象声明为const对象。<br/>
声明为const对象之后，这个对象的所有数据成员后面都不能被修改！</p>

<!-- more -->


<hr />

<h1>const对象</h1>

<p>定义类对象时可以将其指定为const对象。定义后const对象不能再被修改。<br/>
const对象不能调用非const类型的成员函数。<br/>
有两种方法来定义一个const对象：
const 类名 对象名<br/>
类名 const 对象名<br/>
这两种方法是等价的。</p>

<p>如果一个对象被定义成const对象，那么它就不能调用这个类中的非const成员函数。<br/>
const对象调用的成员函数一定都得是const！</p>

<figure class='code'><figcaption><span>定义const对象</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">//const</span>
</span><span class='line'><span class="k">const</span> <span class="n">CTime</span> <span class="nf">time4</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class='line'><span class="n">CTime</span> <span class="k">const</span> <span class="n">time5</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果你用const对象引用了这个类中的非const成员函数，就会报错:</p>

<figure class='code'><figcaption><span>定义const对象</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="err">错误</span>   <span class="mi">1</span>   <span class="n">error</span> <span class="nl">C2662</span><span class="p">:</span> <span class="err">“</span><span class="kt">int</span> <span class="n">CTime</span><span class="o">::</span><span class="n">getHour</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="err">”</span><span class="o">:</span> <span class="err">不能将“</span><span class="k">this</span><span class="err">”指针从“</span><span class="k">const</span> <span class="n">CTime</span><span class="err">”转换为“</span><span class="n">CTime</span> <span class="o">&amp;</span><span class="err">”</span>
</span><span class='line'><span class="nl">e</span><span class="p">:</span><span class="err">\</span><span class="n">chenhaoxiang</span><span class="err">\</span><span class="mi">20170603</span><span class="err">\</span><span class="n">test2</span><span class="err">\</span><span class="n">test2</span><span class="err">\</span><span class="n">mian</span><span class="p">.</span><span class="n">cpp</span>   <span class="mi">34</span>  <span class="mi">1</span>   <span class="n">test2</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实就是告诉我们const对象不能引用非const成员函数<br/>
为什么要有这个规则:<br/>
因为在非const成员函数内部可能对对象进行修改，比如set函数<br/>
这个规则也就是强制用户不要对const成员进行错误的修改</p>

<h1>const成员</h1>

<h2>1.const数据成员</h2>

<p>也就是变量，比如实例中的m_hour，m_minute是普通数据成员</p>

<p>在类内部使用const关键字来声明const数据成员。const数据成员的值不能被修改。<br/>
初始化时比较特殊，只能通过初始化列表初始化。不能在构造函数里赋值。</p>

<h2>2.初始化列表</h2>

<p>初始化列表：<br/>
除了在构造函数中对数据成员进行初始化，C++还提供另外一种方法来对数据成员进行初始化<br/>
初始化列表并不是在构造函数内进行初始化<br/>
构造函数初始化列表以一个冒号开始，接着是以逗号分隔的数据成员列表，每个数据成员后面跟一个放在括号中的初始化式。</p>

<figure class='code'><figcaption><span>定义const对象</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">num</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>必须初始化，而且不能在构造函数中初始化！</p>

<figure class='code'><figcaption><span>定义const对象</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">CTime</span><span class="o">::</span><span class="n">CTime</span><span class="p">()</span> <span class="o">:</span> <span class="n">num</span><span class="p">(</span><span class="mi">10</span><span class="p">){</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">m_hour</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">m_minute</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">m_second</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">m_nNum</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">m_nNum</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">CTime</span><span class="o">::</span><span class="n">CTime</span><span class="p">(</span><span class="kt">int</span> <span class="n">hour</span><span class="p">)</span> <span class="o">:</span> <span class="n">num</span><span class="p">(</span><span class="mi">10</span><span class="p">){</span>
</span><span class='line'>  <span class="k">this</span><span class="o">-&gt;</span><span class="n">m_hour</span> <span class="o">=</span> <span class="n">hour</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">//(*this).m_hour = hour; //效果一样的</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//复制构造函数</span>
</span><span class='line'><span class="n">CTime</span><span class="o">::</span><span class="n">CTime</span><span class="p">(</span><span class="n">CTime</span><span class="o">&amp;</span> <span class="n">time</span><span class="p">)</span> <span class="o">:</span> <span class="n">num</span><span class="p">(</span><span class="mi">10</span><span class="p">){</span>
</span><span class='line'>  <span class="n">m_hour</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="n">m_hour</span><span class="p">;</span>
</span><span class='line'>  <span class="n">m_minute</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="n">m_minute</span><span class="p">;</span>
</span><span class='line'>  <span class="n">m_second</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="n">m_second</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">//cout &lt;&lt; &quot;进入复制构造函数&quot; &lt;&lt; endl;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>每一个构造函数都需要初始化这个const成员，而且复制构造函数也需要初始化num，因为复制构造函数也是一种构造函数！</p>

<h2>3.const成员函数</h2>

<p>const成员函数只能被const对象引用。const成员函数内可以引用const数据成员，也可以引用非const数据成员，但不能修改非const数据成员的值。但不能调用非const成员函数。</p>

<figure class='code'><figcaption><span>声明</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="kt">int</span> <span class="n">getNum</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于const函数的外部定义，也需要写const限定符</p>

<figure class='code'><figcaption><span>实现</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="n">CTime</span><span class="o">::</span><span class="n">getNum</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">num</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>const成员函数存在的意义在于它能被const常对象调用</p>

<figure class='code'><figcaption><span>调用</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">CTime</span> <span class="k">const</span> <span class="n">time5</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">time5</span><span class="p">.</span><span class="n">getNum</span><span class="p">()</span> <span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p> 如果在const成员函数的定义中出现了任何修改对象成员数据的现象，都会在编译时被检查出来</p>

<p>如果我们是真的想在const成员函数中修改值呢，比如我需要m_age++;<br/>
比如下面定义了一个m_age 类成员：</p>

<figure class='code'><figcaption><span>调用</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="n">m_age</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>调用</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="n">CTime</span><span class="o">::</span><span class="n">getNum</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">m_age</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>      <span class="n">m_age</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span><span class="p">{</span>
</span><span class='line'>      <span class="n">m_age</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">num</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>假如我们不做其他事情，这样的写法，在编译时是无法通过的。</p>

<p>有些时候，我们想要让const函数具有修改某个成员数据值的能力。<br/>
比如一些内部的状态量，对外部用户无所谓，但是对整个对象的运行却大有用处,如支持缓存的技术。<br/>
遇到这种问题，我们可以把一个成员数据定义为mutable（多变的），它表示这个成员变量可以被const成员函数修改却不违法。<br/>
比如下面定义了这样一个m_age 类成员：</p>

<figure class='code'><figcaption><span>调用</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">mutable</span> <span class="kt">int</span> <span class="n">m_age</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>调用</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="n">CTime</span><span class="o">::</span><span class="n">getNum</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">m_age</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>      <span class="n">m_age</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span><span class="p">{</span>
</span><span class='line'>      <span class="n">m_age</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">num</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样，即使像getNum()这样的const成员函数修改它也是合法的。<br/>
但需要注意的时，不要滥用mutabe描述符，如果在某个类中只有少数一部分是被允许const常量函数修改的，使用mutable是再合适不过的。如果大部分数据都定义为mutable，那么最好将这些需要修改的数据放入另一个独立的对象里，并间接地访问它。</p>

<h1>源代码下载地址：</h1>

<blockquote cite='陈浩翔'>
GITHUB源码下载地址:<strong>【<a href='https://github.com/chenhaoxiang/C-Study/tree/master/20170603/test2' target='_blank'>点我进行下载</a>】</strong></p>
</blockquote>


<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【C++】C++类的静态成员]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/06/03/static-member/"/>
    <updated>2017-06-03T18:38:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/06/03/static-member</id>
    <content type="html"><![CDATA[<p>类的静态成员包括静态的数据成员和静态的成员函数！<br/>
static关键字</p>

<!-- more -->


<hr />

<h1>静态数据成员</h1>

<p>比如我们现在要设计一款战争游戏，在这款游戏中，分为多个兵种，每个兵种都有一定数量的士兵，游戏过程中，每隔一定时间每个兵种都会产生一定数量的士兵，由于战争的消耗，每个兵种的士兵都会减少。<br/>
为了使情节更逼真，引入了士气这个概念，当士气比较高的时候，这个兵种的战斗力就比较强，士气低的时候，这个兵种的战斗力就比较弱。<br/>
士兵的士气受很多因素影响，其中一个最直接的因素就是和这个兵种的数量直接相关，当这个兵种的士兵比较多，这个兵种的士气就比较高，战斗力就比较强。如果说当前的兵种士兵比较少，那么士气就比较弱，战斗力也比较弱。</p>

<p>为了实现这种情况，那么我们就记录当前士兵的数量这个变量。
一种比较简单的方法就是，我们可以维护一组全局的变量，每个全局变量都会记录某个兵种当前的数量。<br/>
但是使用全局变量会引入比较多的问题，不推荐使用！<br/>
1.使用全局变量的时候，安全性无法得到保证。因为我们在程序的各个地方都可以修改全局变量的值。</p>

<p>2.全局变量也会导致命名空间的污染，如果我们的程序比较大，如果定义了多个全局变量，那么各个模块就可能会冲突！</p>

<p>另一种方法就是使用静态数据成员，因为静态数据成员是各个对象所共有的，不属于某个具体的对象。</p>

<p>静态数据成员为各个对象共有，不属于某个具体的对象，所有对象都可以对它进行引用，都可以读取和修改。若一个对象修改了该静态成员的值，则在其他各个对象中该数据成员的值都会同时改变。</p>

<p>定义静态数据成员 以static关键字开头。</p>

<figure class='code'><figcaption><span>定义静态数据成员</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">m_nNum</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>定义之后不要忘记在cpp中初始化这个静态成员变量。(初始化的时候不要加static关键字哦)
否则在编译时就会报错：</p>

<figure class='code'><figcaption><span>定义静态数据成员</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="err">错误</span>   <span class="mi">1</span>   <span class="n">error</span> <span class="nl">LNK2001</span><span class="p">:</span> <span class="err">无法解析的外部符号</span> <span class="s">&quot;private: static int CTime::m_nNum&quot;</span> <span class="p">(</span><span class="o">?</span><span class="n">m_nNum</span><span class="err">@</span><span class="n">CTime</span><span class="err">@@</span><span class="mi">0</span><span class="n">HA</span><span class="p">)</span> <span class="nl">E</span><span class="p">:</span><span class="err">\</span><span class="n">chenhaoxiang</span><span class="err">\</span><span class="mi">20170603</span><span class="err">\</span><span class="n">test2</span><span class="err">\</span><span class="n">test2</span><span class="err">\</span><span class="n">Time</span><span class="p">.</span><span class="n">obj</span> <span class="n">test2</span>
</span></code></pre></td></tr></table></div></figure>


<p>静态的数据成员是属于这个类的，而不是对象！<br/>
定义类时就为静态数据成员分配空间，不随对象的建立而分配空间。<br/>
static的成员变量不能在类内进行初始化！<br/>
定义完类之后就可以直接引用/访问，<br/>
引用方法： <br/>
1.类名::静态成员<br/>
2.对象名.静态成员<br/>
在类内的静态数据成员仅仅是对该成员的声明，同时还需要在类外部进行定义。</p>

<h1>静态成员函数</h1>

<p>在声明成员函数时在函数前添加static关键字就定义了静态成员函数。</p>

<figure class='code'><figcaption><span>声明</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="nf">getNum</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>定义</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">int</span> <span class="n">CTime</span><span class="o">::</span><span class="n">getNum</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">m_nNum</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>与静态数据成员一样，静态成员函数也是类的一部分。两种引用的方法。</p>

<figure class='code'><figcaption><span>调用的两种方法</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">CTime</span><span class="o">::</span><span class="n">getNum</span><span class="p">();</span>
</span><span class='line'><span class="n">time</span><span class="p">.</span><span class="n">getNum</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>静态成员函数一般是为了处理静态的数据成员。<br/>
与一般成员函数的区别：非静态成员函数有this指针，静态成员函数没有this指针。<br/>
因为它可以在未定义类对象时就可以引用。因此静态成员函数不能访问本类中的非静态成员。（包括成员函数和数据成员）。</p>

<p>比如在前面定义的getNum()静态函数中，是无法调用其他的非静态方法和变量的！<br/>
因为getNum()是依赖于具体的类，而其他非静态成员是依赖于具体对象的！<br/>
getNum()不依赖于任何对象！</p>

<p>类中定义的静态数据成员可以代替全局变量，而且没有全局变量的缺点，作用域仅限于当前类的作用域，防止了在其他类修改成员！</p>

<h1>源代码下载地址：</h1>

<blockquote cite='陈浩翔'>
GITHUB源码下载地址:<strong>【<a href='https://github.com/chenhaoxiang/C-Study/tree/master/20170603/test2' target='_blank'>点我进行下载</a>】</strong></p>
</blockquote>


<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【C++】This指针和复制构造函数]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/06/03/this-pointer/"/>
    <updated>2017-06-03T13:38:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/06/03/this-pointer</id>
    <content type="html"><![CDATA[<p>在声明一个类的时候，是没有分配存储空间的，只有在真正定义一个对象的时候，程序才会为这个对象分配相应的存储空间。<br/>
如果定义了多个对象，这些对象都有自己的存储空间，但是这些对象都是用相同的成员方法的。</p>

<p>当不同的对象调用成员方法时，怎么保证就是这个对象的成员？</p>

<!-- more -->


<hr />

<h1>this指针</h1>

<p>在每个成员函数中，都包含一个特殊的指针。<br/>
这个指针的名字是固定的，就是this指针。<br/>
this指针是指向类对象的指针，它的值是当前被调用的所在对象的地址！</p>

<p>this指针是指向本类对象的指针，它作为参数传递给成员函数<br/>
this指针是隐式使用的。由编译器自动实现，我们不必人为的在形参中添加this指针。</p>

<p>因为this表示这个对象的指针，所以*this就表示这个对象了</p>

<p>(<em>this).调用成员变量/函数和this->调用成员变量/函数,是一样的效果！<br/>
注意给</em>this添加括号，因为.运算符的优先级比较高</p>

<h1>复制构造函数</h1>

<p>复制构造函数和普通构造函数有一些相似处的，也没有返回值，类名作为函数名！</p>

<p>复制构造函数一种特殊的构造函数，在创建一个新的对象时将其他对象作为参数时，<br/>
编译器将会调用复制构造函数。不提供时使用默认构造函数。默认构造函数内部各个成员变量赋值。<br/>
创建之后，新对象是老对象的副本，二者值相同。但具有不同的存储空间。</p>

<figure class='code'><figcaption><span>形式</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">CTime</span><span class="p">(</span><span class="n">CTime</span><span class="o">&amp;</span> <span class="n">time</span><span class="p">);</span><span class="c1">//使用类名对象作为参数，传引用</span>
</span></code></pre></td></tr></table></div></figure>


<h2>调用复制构造函数的时机：</h2>

<p>在什么情况下使用复制构造函数</p>

<h3>1.以其他对象作为参数创建新对象时。</h3>

<p>比如:创建一个新的对象的时候，把原来的一个对象作为参数传递给新的对象作为构造函数</p>

<figure class='code'><figcaption><span>形式</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">CTime</span> <span class="n">time</span><span class="p">;</span>
</span><span class='line'><span class="n">CTime</span> <span class="nf">time2</span><span class="p">(</span><span class="n">time</span><span class="p">);</span><span class="c1">//会自动执行复制构造函数，复制成员等  </span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<figure class='code'><figcaption><span>复制构造函数</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">CTime</span><span class="o">::</span><span class="n">CTime</span><span class="p">(</span><span class="n">CTime</span><span class="o">&amp;</span> <span class="n">time</span><span class="p">){</span>
</span><span class='line'>  <span class="n">m_hour</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="n">m_hour</span><span class="p">;</span>
</span><span class='line'>  <span class="n">m_minute</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="n">m_minute</span><span class="p">;</span>
</span><span class='line'>  <span class="n">m_second</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="n">m_second</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>通过复制构造函数复制原来的time</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">CTime</span> <span class="n">time</span><span class="p">;</span>
</span><span class='line'><span class="n">time</span><span class="p">.</span><span class="n">setHour</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span><span class="c1">//通过成员方法设置值</span>
</span><span class='line'><span class="n">time</span><span class="p">.</span><span class="n">setMinute</span><span class="p">(</span><span class="mi">20</span><span class="p">);</span>
</span><span class='line'><span class="n">time</span><span class="p">.</span><span class="n">setSecond</span><span class="p">(</span><span class="mi">30</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">time</span><span class="p">.</span><span class="n">getHour</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">time</span><span class="p">.</span><span class="n">getMinute</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">time</span><span class="p">.</span><span class="n">getSecond</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="c1">//输出结果： 10:20:30</span>
</span><span class='line'>
</span><span class='line'><span class="n">CTime</span> <span class="nf">time2</span><span class="p">(</span><span class="n">time</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">time2</span><span class="p">.</span><span class="n">getHour</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">time2</span><span class="p">.</span><span class="n">getMinute</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">time2</span><span class="p">.</span><span class="n">getSecond</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>(注意，构造函数实现的时候，需要在其他函数前面先实现)<br/>
复制构造函数也是构造函数的一种！</p>

<h3>2.类对象（传值）作为函数参数时。</h3>

<figure class='code'><figcaption><span>类对象（传值）作为函数参数时。</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &quot;Time.h&quot;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">func</span><span class="p">(</span><span class="n">CTime</span> <span class="n">time</span><span class="p">){</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">time</span><span class="p">.</span><span class="n">getHour</span><span class="p">()</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">CTime</span> <span class="n">time</span><span class="p">;</span>
</span><span class='line'>  <span class="n">time</span><span class="p">.</span><span class="n">setHour</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span><span class="c1">//通过成员方法设置值</span>
</span><span class='line'>  <span class="n">time</span><span class="p">.</span><span class="n">setMinute</span><span class="p">(</span><span class="mi">20</span><span class="p">);</span>
</span><span class='line'>  <span class="n">time</span><span class="p">.</span><span class="n">setSecond</span><span class="p">(</span><span class="mi">30</span><span class="p">);</span>
</span><span class='line'>  <span class="n">CTime</span> <span class="n">time2</span><span class="p">(</span><span class="n">time</span><span class="p">);</span><span class="c1">//第一次调用复制构造函数</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">func</span><span class="p">(</span><span class="n">time</span><span class="p">);</span><span class="c1">//第二次调用复制构造函数  复制给func中的形参time</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">time</span><span class="p">.</span><span class="n">getHour</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">time</span><span class="p">.</span><span class="n">getMinute</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">time</span><span class="p">.</span><span class="n">getSecond</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">//输出结果： 10:20:30</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">time2</span><span class="p">.</span><span class="n">getHour</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">time2</span><span class="p">.</span><span class="n">getMinute</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">time2</span><span class="p">.</span><span class="n">getSecond</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">getchar</span><span class="p">();</span><span class="c1">//这句是为了防止输出窗口秒关闭</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3.类对象作为函数返回值时。</h3>

<figure class='code'><figcaption><span>类对象作为函数返回值时。</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &quot;Time.h&quot;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">func</span><span class="p">(</span><span class="n">CTime</span> <span class="n">time</span><span class="p">){</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">time</span><span class="p">.</span><span class="n">getHour</span><span class="p">()</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">CTime</span> <span class="nf">func1</span><span class="p">(</span><span class="n">CTime</span> <span class="n">time</span><span class="p">){</span>
</span><span class='line'>  <span class="c1">//复制给func1中的形参time 也会调用一次复制构造函数</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">time</span><span class="p">.</span><span class="n">getHour</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">time</span><span class="p">;</span><span class="c1">//time在返回的时候会复制给返回的值，这个时候会调用复制构造函数</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">CTime</span> <span class="n">time</span><span class="p">;</span>
</span><span class='line'>  <span class="n">time</span><span class="p">.</span><span class="n">setHour</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span><span class="c1">//通过成员方法设置值</span>
</span><span class='line'>  <span class="n">time</span><span class="p">.</span><span class="n">setMinute</span><span class="p">(</span><span class="mi">20</span><span class="p">);</span>
</span><span class='line'>  <span class="n">time</span><span class="p">.</span><span class="n">setSecond</span><span class="p">(</span><span class="mi">30</span><span class="p">);</span>
</span><span class='line'>  <span class="n">CTime</span> <span class="n">time2</span><span class="p">(</span><span class="n">time</span><span class="p">);</span><span class="c1">//第一次调用复制构造函数</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">func</span><span class="p">(</span><span class="n">time</span><span class="p">);</span><span class="c1">//第二次调用复制构造函数  复制给func中的形参time</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">CTime</span> <span class="n">time3</span> <span class="o">=</span> <span class="n">func1</span><span class="p">(</span><span class="n">time</span><span class="p">);</span><span class="c1">//第三次和第四次调用复制构造函数</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">time</span><span class="p">.</span><span class="n">getHour</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">time</span><span class="p">.</span><span class="n">getMinute</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">time</span><span class="p">.</span><span class="n">getSecond</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">//输出结果： 10:20:30</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">time2</span><span class="p">.</span><span class="n">getHour</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">time2</span><span class="p">.</span><span class="n">getMinute</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">time2</span><span class="p">.</span><span class="n">getSecond</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">getchar</span><span class="p">();</span><span class="c1">//这句是为了防止输出窗口秒关闭</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面就是复制构造函数使用的三种情形！</p>

<p>如果我们把复制构造函数 CTime::CTime(CTime&amp; time)修改为CTime::CTime(CTime time) <br/>
CTime&amp; time是一个引用类型的参数，现在将引用去掉的话，就满足了调用复制构造函数中的一种，以类对象（传值）作为函数参数时，<br/>
这样在使用的时候，就会造成死循环！</p>

<p>所以注意复制构造函数是传引用来实现的！</p>

<p>我们使用类对象作为函数参数的时候，以及返回一个对象的时候，代价是很大的，<br/>
因为伴随着对象的创建和销毁，还伴随着复制构造函数的调用， 所以一般使用传引用来规避这种代价！<br/>
引用传递：<br/>
形参相当于是实参的“别名”，对形参的操作其实就是对实参的操作，在引用传递过程中，被调函数的形式参数虽然也作为局部变量在栈中开辟了内存空间，但是这时存放的是由主调函数放进来的实参变量的地址。被调函数对形参的任何操作都被处理成间接寻址，即通过栈中存放的地址访问主调函数中的实参变量。正因为如此，被调函数对形参做的任何操作都影响了主调函数中的实参变量。</p>

<h1>源代码下载地址：</h1>

<blockquote cite='陈浩翔'>
GITHUB源码下载地址:<strong>【<a href='https://github.com/chenhaoxiang/C-Study/tree/master/20170603/test2' target='_blank'>点我进行下载</a>】</strong></p>
</blockquote>


<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【Cocos2d-x】Cocos2d-X网络编程-HttpRequest/HttpClient/HttpResponse]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/05/31/HttpRequest-HttpResponse/"/>
    <updated>2017-05-31T13:38:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/05/31/HttpRequest-HttpResponse</id>
    <content type="html"><![CDATA[<p>Cocos2d-x封装了3个类来处理HTTP请求：<br/>
HttpRequest,HttpClient和HttpResponse.</p>

<p>使用HttpRequest,HttpClient和HttpResponse这3个类进行Http进行请求时，需要遵循一定流程</p>

<!-- more -->


<hr />

<p>请求过程: <br/>
1.创建HttpRequest的实例。<br/>
2.设置请求方式，Get、Post等。(千万不要以为只有get和post方式哦,这是一般新手以为的,只是其他请求方式我们平时用到的很少)<br/>
3.设置请求地址和发送的数据(如果没有发送的数据，可不设置发送数据)。<br/>
4.设置响应回调函数，在回调函数中处理获取的数据。<br/>
5.创建HttpClient实例，发送请求。<br/>
6.释放请求连接。</p>

<h1>使用Cocos2d封装的HttpRequest设置请求信息</h1>

<p>HttpRequest：<br/>
是一种数据类型，它提供了一些方法用来定义或获取HTTP请求的参数，<br/>
常用方法包括下面几种:<br/>
设置请求连接<br/>
void setUrl(const char * url);<br/>
设置请求类型<br/>
void setRequestType(Type type);</p>

<p>这里的Type是Cocos2d-x定义的一个枚举类型，包括5种类型。<br/>
源码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="k">class</span> <span class="nc">CC_DLL</span> <span class="nl">HttpRequest</span> <span class="p">:</span> <span class="k">public</span> <span class="n">Ref</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * The HttpRequest type enum used in the HttpRequest::setRequestType.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="k">enum</span> <span class="k">class</span> <span class="nc">Type</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">GET</span><span class="p">,</span>
</span><span class='line'>        <span class="n">POST</span><span class="p">,</span>
</span><span class='line'>        <span class="n">PUT</span><span class="p">,</span>
</span><span class='line'>        <span class="n">DELETE</span><span class="p">,</span>
</span><span class='line'>        <span class="n">UNKNOWN</span><span class="p">,</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>设置回调函数:<br/>
void setResponseCallback(Ref* pTarget,SEL_HttpResponse pSelector);</p>

<p>设置请求的数据，参数buffer是提交的数据，len是请求数据的长度(使用发送数据的实际长度):<br/>
void setRequestData(const char* buffer,unsigned int len);</p>

<p>头文件和命名空间:</p>

<figure class='code'><figcaption><span>头文件和命名空间</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &quot;network/HttpRequest.h&quot; </span><span class="c1">//1</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">cocos2d</span><span class="o">::</span><span class="n">network</span><span class="p">;</span> <span class="c1">//2</span>
</span></code></pre></td></tr></table></div></figure>


<p>完整的Request对象创建</p>

<figure class='code'><figcaption><span>完整的Request对象创建</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">auto</span> <span class="n">request</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HttpRequest</span><span class="p">();</span>
</span><span class='line'><span class="c1">//设置请求网址</span>
</span><span class='line'><span class="n">request</span><span class="o">-&gt;</span><span class="n">setUrl</span><span class="p">(</span><span class="s">&quot;请填写你需要请求的网址&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//设置请求类型</span>
</span><span class='line'><span class="n">request</span><span class="o">-&gt;</span><span class="n">setRequestType</span><span class="p">(</span><span class="n">HttpRequest</span><span class="o">::</span><span class="n">Type</span><span class="o">::</span><span class="n">GET</span><span class="p">);</span>
</span><span class='line'><span class="c1">//设置请求的数据</span>
</span><span class='line'><span class="kt">char</span> <span class="n">data</span><span class="p">[</span><span class="mi">50</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;data&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">request</span><span class="o">-&gt;</span><span class="n">setRequestData</span><span class="p">(</span><span class="n">data</span><span class="p">,</span><span class="n">strlen</span><span class="p">(</span><span class="n">data</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<h1>使用Cocos2d封装的HttpClient发送请求</h1>

<p>HttpClient:
 用来控制请求相关的参数，比如发送请求，设置请求超时时间。<br/>
它使用单例模型。 这一模式的目的是使得类的一个对象成为系统中的唯一实例。<br/>
cocos2d中多处用到这一模型。<br/>
比如Director对象，创建Director::getInstance().获取的都是同一个对象，方便统一管理<br/>
又比如，音频处理对象： SimpleAudioEngine::getInstance();</p>

<p>常用方法<br/>
发送请求：
send(HttpRequest* request)<br/>
设置连接超时时间:<br/>
setTimeoutForConnect(int value)</p>

<figure class='code'><figcaption><span>头文件和命名空间</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cp">#include &quot;network/HttpClient.h&quot;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">cocos2d</span><span class="o">::</span><span class="n">network</span><span class="p">;</span> <span class="c1">//2</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>创建HttpClient对象</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="c1">//创建HttpClient对象</span>
</span><span class='line'><span class="k">auto</span> <span class="n">client</span> <span class="o">=</span> <span class="n">HttpClient</span><span class="o">::</span><span class="n">getInstance</span><span class="p">();</span><span class="c1">//getInstance静态成员函数-单例模式模型</span>
</span><span class='line'><span class="n">client</span><span class="o">-&gt;</span><span class="n">setTimeoutForConnect</span><span class="p">(</span><span class="mi">60</span><span class="p">);</span><span class="c1">//当客户端向服务端发送请求超过这个时间，就会返回一个错误信息</span>
</span><span class='line'><span class="n">client</span><span class="o">-&gt;</span><span class="n">setTimeoutForRead</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span><span class="c1">//接收数据的读取时间</span>
</span><span class='line'><span class="n">client</span><span class="o">-&gt;</span><span class="n">send</span><span class="p">(</span><span class="n">request</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h1>使用Cocos2d封装的HttpResponse处理返回的结果</h1>

<p>HttpResponse:<br/>
包含服务器返回的数据等信息。使用HttpResponse提供的方法可以获取这些数据。<br/>
常用方法：<br/>
std::vector<char> * getResponseData();<br/>
获取请求返回的数据 -返回的是一个char型的数组</p>

<p>getResponseState<br/>
获取服务器返回的状态，返回值是一个整数，200表示请求成功，400表示服务器错误，404表示服务器上找不到相应的文件。</p>

<p>issucced(),用来判断是否返回成功。</p>

<figure class='code'><figcaption><span>实现回调函数</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">//实现回调函数</span>
</span><span class='line'><span class="kt">void</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">complete</span><span class="p">(</span><span class="n">HttpClient</span> <span class="o">*</span><span class="n">client</span><span class="p">,</span> <span class="n">HttpResponse</span> <span class="o">*</span><span class="n">response</span><span class="p">){</span>
</span><span class='line'>  <span class="c1">//使用HttpResponse类的相关函数，获取状态和数据</span>
</span><span class='line'>  <span class="n">log</span><span class="p">(</span><span class="s">&quot;response code is:%d&quot;</span><span class="p">,</span><span class="n">response</span><span class="o">-&gt;</span><span class="n">getResponseCode</span><span class="p">());</span><span class="c1">//获取请求返回的状态码</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">response</span><span class="o">-&gt;</span><span class="n">isSucceed</span><span class="p">()){</span><span class="c1">//判断返回是否成功  成功就返回true</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="o">*</span> <span class="n">data</span> <span class="o">=</span> <span class="n">response</span><span class="o">-&gt;</span><span class="n">getResponseData</span><span class="p">();</span>
</span><span class='line'>      <span class="n">log</span><span class="p">(</span><span class="s">&quot;response data is:&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">//for (int i = 0; i &lt; data-&gt;size(); i++){</span>
</span><span class='line'>      <span class="c1">// log(&quot;%c&quot;,(*data)[i]);</span>
</span><span class='line'>      <span class="c1">// //因为data是一个指针，所以需要取内容操作符，(*data)这样获取的就是数组的首地址，然后再加上角标</span>
</span><span class='line'>      <span class="c1">//}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">else</span><span class="p">{</span>
</span><span class='line'>      <span class="n">log</span><span class="p">(</span><span class="s">&quot;error msg is:%s&quot;</span><span class="p">,</span> <span class="n">response</span><span class="o">-&gt;</span><span class="n">getErrorBuffer</span><span class="p">());</span> <span class="c1">// getErrorBuffer-会返回请求数据错误的信息</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>完整源代码下载地址：</h1>

<blockquote cite='陈浩翔'>
GITHUB源码下载地址:<strong>【<a href='https://github.com/chenhaoxiang/cocos2d-x/tree/master/20170531/httpTest' target='_blank'>点我进行下载</a>】</strong></p>
</blockquote>


<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【C++】C++构造函数和析构函数]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/05/20/constructor-and-destructor%20-%20%E5%89%AF%E6%9C%AC/"/>
    <updated>2017-05-20T13:38:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/05/20/constructor-and-destructor - 副本</id>
    <content type="html"><![CDATA[<p>C++提供构造函数来处理对象的初始化。<br/>
构造函数是一种特殊的成员函数，不需要用户来调用，定义对象时被自动执行。<br/>
构造函数名字与类名相同，无返回类型(void也不能有哦)。</p>

<p>可以由用户自己定义实现，根据需要设计对数据成员进行初始化</p>

<!-- more -->


<hr />

<p>用上个例子来继续写代码进去<br/>
CTime为类名</p>

<h1>无参数的构造函数：</h1>

<p>在.h文件中进行声明：<br/>
CTime();<br/>
在.cpp文件中进行实现：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CTime::CTime(){
</span><span class='line'>  m_hour = 0;
</span><span class='line'>  m_minute = 0;
</span><span class='line'>  m_second = 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>定义对象:<br/>
CTime time;<br/>
构造函数不需要我们去调用，定义一个对象的时候，会自动的去调用一个默认的无参构造函数。内部没有其他任何动作！
一般在构造函数中进行数据的初始化，当然，你还可以进行其他操作。</p>

<p>如果你没写构造函数，在定义一个对象的时候，会自动生成调用一个空构造函数。</p>

<h1>带参数的构造函数</h1>

<p>在.h文件中进行声明： <br/>
CTime(int hour,int minute,int second);</p>

<p>在.cpp文件中进行实现：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CTime::CTime(int hour, int minute, int second){
</span><span class='line'>  m_hour = hour;
</span><span class='line'>  m_minute = minute;
</span><span class='line'>  m_second = second;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>定义对象:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CTime time(10,50,20);</span></code></pre></td></tr></table></div></figure>


<p>在一个类中可以有多个构造函数，函数名相同，参数不同，构造函数是可以重载的！</p>

<p>如果你有了其他面向对象语言的基础！前面这些章节都会很容易学的。</p>

<p>可以在声明的时候，给参数一个默认的值：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CTime(int hour,int minute,int second = 0);  </span></code></pre></td></tr></table></div></figure>


<p>在调用的时候，可以只传2个值，这个时候的second就会使用默认的值0；</p>

<p>但是注意：
不能这么写</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CTime(int hour,int minute =0,int second);   </span></code></pre></td></tr></table></div></figure>


<p>
上面的写法是错误的！
也就是说，如果你在某个参数给了默认值，则排在它后面的参数你都需要给上默认值才行！</p>

<p>也不能给构造函数的每个参数都给上默认值</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CTime(int hour=0,int minute=0,int second=0);   </span></code></pre></td></tr></table></div></figure>


<p>这样会引起歧义！！！</p>

<h1>析构函数</h1>

<p>也是C++中的一个成员函数。<br/>
析构函数的作用和构造函数相反。<br/>
命名规则与类名相同，但是需要在类名前加上"~&ldquo;符号。</p>

<p>~在C++中是取反运算符。</p>

<p>析构函数一般式执行对象的清理工作。
当对象的生命周期结束之后，会自动调用析构函数。</p>

<p>析构函数的作用不是删除对象，而是说，在对象撤销它所占用的内存之前做一些清理工作，清理之后，这个对象的内存可以被分配给其他对象使用。</p>

<p>在设计类的时候，都会给类提供一个析构函数。</p>

<p>构造函数和析构函数都是可以由用户来定义的，但是调用，都是可以由程序来自动调用的。</p>

<p>构造函数是在定义一个对象的时候执行的，而析构函数是在对象生命周期结束之后，自动执行析构函数。</p>

<p>析构函数没有返回值和参数！</p>

<p>注意：析构函数没有参数，不能被重载，因此一个类只能有一个析构函数。如果用户没有定义，编译器会自动生成一个默认的析构函数。</p>

<p>析构函数的作用并不仅限于释放资源，还可以执行用户自己定义的一些操作，比如输出一些信息等。</p>

<p>声明析构函数：</p>

<figure class='code'><figcaption><span>声明析构函数 </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="o">~</span><span class="n">CTime</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>定义析构函数：</p>

<figure class='code'><figcaption><span>定义析构函数</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">CTime</span><span class="o">::~</span><span class="n">CTime</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;析构函数被执行了...&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>析构函数的执行顺序和构造函数的执行顺序是相反的！</p>

<p>也就是最先被定义的对象，最后被执行析构函数！</p>

<p>用 new 分配内存时会调用构造函数，用 delete 释放内存时会调用析构函数。构造函数和析构函数对于类来说是不可或缺的！</p>

<p>在函数内部创建的对象是局部对象，它和局部变量类似，位于栈区，函数执行结束时会调用这些对象的析构函数。</p>

<p>new 创建的对象位于堆区，通过 delete 删除时才会调用析构函数；如果没有 delete，析构函数就不会被执行。</p>

<h1>源代码下载地址：</h1>

<blockquote cite='陈浩翔'>
GITHUB源码下载地址:<strong>【<a href='https://github.com/chenhaoxiang/C-Study/tree/master/20170520/test3' target='_blank'>点我进行下载</a>】</strong></p>
</blockquote>


<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【C++】C++类和对象]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/05/20/class-and-object/"/>
    <updated>2017-05-20T13:38:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/05/20/class-and-object</id>
    <content type="html"><![CDATA[<p>最近在公司弄游戏开发，C++基础也不是特别好，所以就打算继续开始学习C++。</p>

<p>既然从头学习C++，就打算写一个系列教程。C++学习之路。
我是在边学习C++，边学习cocos2dx 3.X，白天时间不是很多，
先把C++系列写完再写coco2dx的教程。
希望对大家有帮助。
（可能基础知识不是很详细，对没有其他语言基础的人来说不是很友好，请见谅）</p>

<!-- more -->


<hr />

<p>每个实体都可以看成一个对象。在C++中，对象的类型被称为类。
类代表了某一批对象的共性和特征。</p>

<p>类是对象的抽象，而对象是类的具体实现。</p>

<p>在C++中要使用一个类，首先要定义一个类。</p>

<h1>定义类</h1>

<p>定义类和声明结构体的结构是相似的。</p>

<h2>定义结构体</h2>

<figure class='code'><figcaption><span>定义结构体</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="k">struct</span> <span class="n">Student</span><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">128</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">age</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">add</span><span class="p">[</span><span class="mi">128</span><span class="p">];</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h2>类的定义格式</h2>

<figure class='code'><figcaption><span>类的定义格式</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="k">class</span> <span class="err">类名{</span>
</span><span class='line'>  <span class="k">private</span><span class="o">:</span>
</span><span class='line'>      <span class="err">成员数据</span><span class="p">;</span>
</span><span class='line'>      <span class="err">成员函数</span><span class="p">;</span>
</span><span class='line'>  <span class="k">public</span><span class="o">:</span>
</span><span class='line'>      <span class="err">成员数据</span><span class="p">;</span>
</span><span class='line'>      <span class="err">成员函数</span><span class="p">;</span>
</span><span class='line'>  <span class="k">protected</span><span class="o">:</span>
</span><span class='line'>      <span class="err">成员数据</span><span class="p">;</span>
</span><span class='line'>      <span class="err">成员函数</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>private,public,protected这3个限定符就不介绍了<br/>
建议把：<br/>
public放前面<br/>
private放最后</p>

<p>别忘了最后的分号哦。<br/>
struct默认是public<br/>
class默认是private</p>

<h2>一个简单的例子</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="c1">// test.cpp : 定义控制台应用程序的入口点。</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &quot;stdafx.h&quot;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Student</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">print</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">cout</span> <span class="o">&lt;&lt;</span>  <span class="n">age</span>  <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">getAge</span><span class="p">();</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">128</span><span class="p">]</span> <span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">addr</span><span class="p">[</span><span class="mi">128</span><span class="p">]</span> <span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="kr">inline</span> <span class="kt">int</span> <span class="n">Student</span><span class="o">::</span><span class="n">getAge</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">age</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">_tmain</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="n">_TCHAR</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">Student</span> <span class="n">stu</span><span class="p">;</span>
</span><span class='line'>  <span class="n">stu</span><span class="p">.</span><span class="n">print</span><span class="p">();</span>
</span><span class='line'>  <span class="n">stu</span><span class="p">.</span><span class="n">getAge</span><span class="p">();</span>
</span><span class='line'>  <span class="n">getchar</span><span class="p">();</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>类和对象的使用</h1>

<h2>对象成员的引用</h2>

<p>程序中访问对象成员有以下三种方法：<br/>
1、通过对象名和成员访问运算符".&ldquo;来访问<br/>
2、通过指向对象的指针来访问<br/>
3、通过引用来访问</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">Student</span> <span class="n">stu</span><span class="p">;</span>
</span><span class='line'><span class="c1">//通过对象名和成员访问运算符&quot;.&quot;来访问  </span>
</span><span class='line'><span class="n">stu</span><span class="p">.</span><span class="n">print</span><span class="p">();</span>
</span><span class='line'><span class="n">stu</span><span class="p">.</span><span class="n">getAge</span><span class="p">();</span>
</span><span class='line'><span class="c1">//通过指向对象的指针来访问  </span>
</span><span class='line'><span class="n">Student</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">stu</span><span class="p">;</span>
</span><span class='line'><span class="n">p</span><span class="o">-&gt;</span><span class="n">print</span><span class="p">();</span>
</span><span class='line'><span class="n">p</span><span class="o">-&gt;</span><span class="n">getAge</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//通过引用来访问  </span>
</span><span class='line'><span class="n">Student</span> <span class="o">&amp;</span><span class="n">s</span> <span class="o">=</span> <span class="n">stu</span><span class="p">;</span><span class="c1">//表明s是stu的别名</span>
</span><span class='line'><span class="n">s</span><span class="p">.</span><span class="n">print</span><span class="p">();</span>
</span><span class='line'><span class="n">s</span><span class="p">.</span><span class="n">getAge</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<h2>类声明和成员函数实现的分离</h2>

<p>类的定义和成员函数的实现一般不放在一起，而是放在不同的文件中。</p>

<p>一般来说，在大型项目中，将类的声明放在单独的头文件中，一般以类名命名。
成员函数的实现放在该类对应的cpp文件中。
这样就将类的声明和实现进行了分离.</p>

<p>如果需要使用某个对象，直接引用那个对象声明的头文件即可，而不需要再重复声明了！</p>

<p>这样工程的结构就清晰很多了。</p>

<p>这章很简单，没多少要写的，你有语言基础的话，这章用个5分钟就可以过了~~
这里我写了2个例子</p>

<h1>源代码下载地址：</h1>

<blockquote cite='陈浩翔'>
GITHUB源码下载地址:<strong>【<a href='https://github.com/chenhaoxiang/C-Study/tree/master/20170520' target='_blank'>点我进行下载</a>】</strong></p>
</blockquote>


<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【Redis】Java之Redis工具类]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/05/18/redisUtil/"/>
    <updated>2017-05-18T21:29:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/05/18/redisUtil</id>
    <content type="html"><![CDATA[<p>我就不介绍Redis是什么了。
(一个月前写的工具类，一直忘记分享了，算是比较全的Java-Redis工具类)
直接上代码吧。</p>

<p>先给出在spring 中配置Redis的代码。你在其他类用的时候，直接用注解自动注入就可以了。</p>

<!-- more -->


<hr />

<h2>redis.properties</h2>

<pre><code>##访问地址
redis.host=127.0.0.1
##访问端口
redis.port=6379
##注意，如果没有password，此处不设置值，但这一项要保留
redis.password=你的密码

#最大能够保持idel状态的对象数
redis.maxIdle=150
#连接池的最大数据库连接数。设为0表示无限制 最大分配的对象数
redis.maxActive=300
#连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true
redis.blockWhenExhausted=true
#获取连接时的最大等待毫秒数(如果设置为阻塞时BlockWhenExhausted),如果超时就抛异常, 小于零:阻塞不确定的时间,  默认-1
redis.maxWait=10000
#在borrow一个jedis实例时，是否提前进行alidate操作；如果为true，则得到的jedis实例均是可用的；
redis.testOnBorrow=true
#jedis调用returnObject方法时，是否进行有效检查 #
redis.testOnReturn=true
#在空闲时检查有效性, 默认false
redis.testWhileIdle=true
#表示idle object evitor两次扫描之间要sleep的毫秒数；
redis.timeBetweenEvictionRunsMillis=30000
#表示一个对象至少停留在idle状态的最短时间，
#然后才能被idle object evitor扫描并驱逐；这一项只有在timeBetweenEvictionRunsMillis大于0时才有意义；
redis.minEvictableIdleTimeMillis=-1

#连接空闲的最小时间,达到此值后空闲链接将会被移除,且保留“minIdle”个空闲连接数。
#如果minEvictableIdleTimeMillis&gt;0，则此项设置无意义，且只有在timeBetweenEvictionRunsMillis大于0时才有意义；
redis.softMinEvictableIdleTimeMillis=60000
</code></pre>

<h2>spring.xml中配置redis</h2>

<figure class='code'><figcaption><span>spring.xml中配置redis</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="c">&lt;!-- S Redis 配置--&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- scanner redis properties  --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;context:property-placeholder</span> <span class="na">location=</span><span class="s">&quot;classpath:redis.properties&quot;</span> <span class="na">ignore-unresolvable=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="c">&lt;!--（1）如果你有多个数据源需要通过</span>
</span><span class='line'><span class="c">    &lt;context:property-placeholder管理，且不愿意放在一个配置文件里，</span>
</span><span class='line'><span class="c">    那么一定要加上ignore-unresolvable=“true&quot;(每一个都需要加这个属性)--&gt;</span>
</span><span class='line'>    <span class="c">&lt;!--（2）注意新版的（从3.0版本开始弃用）JedisPoolConfig的property name，</span>
</span><span class='line'><span class="c">    不是maxActive而是maxTotal，而且没有maxWait属性，建议看一下Jedis源码。--&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- redis连接池 --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;jedisPoolConfig&quot;</span> <span class="na">class=</span><span class="s">&quot;redis.clients.jedis.JedisPoolConfig&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;maxTotal&quot;</span> <span class="na">value=</span><span class="s">&quot;${redis.maxActive}&quot;</span><span class="nt">&gt;&lt;/property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;maxIdle&quot;</span> <span class="na">value=</span><span class="s">&quot;${redis.maxIdle}&quot;</span><span class="nt">&gt;&lt;/property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;maxWaitMillis&quot;</span> <span class="na">value=</span><span class="s">&quot;${redis.maxWait}&quot;</span><span class="nt">&gt;&lt;/property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;testOnBorrow&quot;</span> <span class="na">value=</span><span class="s">&quot;${redis.testOnBorrow}&quot;</span><span class="nt">&gt;&lt;/property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;testOnReturn&quot;</span> <span class="na">value=</span><span class="s">&quot;${redis.testOnReturn}&quot;</span><span class="nt">&gt;&lt;/property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;blockWhenExhausted&quot;</span> <span class="na">value=</span><span class="s">&quot;${redis.blockWhenExhausted}&quot;</span><span class="nt">&gt;&lt;/property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;testWhileIdle&quot;</span> <span class="na">value=</span><span class="s">&quot;${redis.testWhileIdle}&quot;</span><span class="nt">&gt;&lt;/property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;timeBetweenEvictionRunsMillis&quot;</span> <span class="na">value=</span><span class="s">&quot;${redis.timeBetweenEvictionRunsMillis}&quot;</span><span class="nt">&gt;&lt;/property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;minEvictableIdleTimeMillis&quot;</span> <span class="na">value=</span><span class="s">&quot;${redis.minEvictableIdleTimeMillis}&quot;</span><span class="nt">&gt;&lt;/property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;softMinEvictableIdleTimeMillis&quot;</span> <span class="na">value=</span><span class="s">&quot;${redis.softMinEvictableIdleTimeMillis}&quot;</span><span class="nt">&gt;&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- redis连接工厂 --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;connectionFactory&quot;</span> <span class="na">class=</span><span class="s">&quot;org.springframework.data.redis.connection.jedis.JedisConnectionFactory&quot;</span>
</span><span class='line'>          <span class="na">p:host-name=</span><span class="s">&quot;${redis.host}&quot;</span> <span class="na">p:port=</span><span class="s">&quot;${redis.port}&quot;</span> <span class="na">p:password=</span><span class="s">&quot;${redis.password}&quot;</span>  <span class="na">p:pool-config-ref=</span><span class="s">&quot;jedisPoolConfig&quot;</span>
</span><span class='line'>          <span class="na">p:usePool=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- redis操作模板，这里采用尽量面向对象的模板 --&gt;</span>
</span><span class='line'>    <span class="c">&lt;!--&lt;bean id=&quot;redisTemplate&quot; class=&quot;org.springframework.data.redis.core.RedisTemplate&quot;&gt;</span>
</span><span class='line'><span class="c">        使用上句会无法使用模糊匹配</span>
</span><span class='line'><span class="c">    --&gt;</span>
</span><span class='line'>    <span class="c">&lt;!--</span>
</span><span class='line'><span class="c">        p:enable-transaction-support=&quot;false&quot;</span>
</span><span class='line'><span class="c">        设置setEnableTransactionSupport(true)，当前线程会强制先 MULTI命令</span>
</span><span class='line'><span class="c">     --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;redisTemplate&quot;</span> <span class="na">class=</span><span class="s">&quot;org.springframework.data.redis.core.StringRedisTemplate&quot;</span>
</span><span class='line'>          <span class="na">p:enable-transaction-support=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;connectionFactory&quot;</span> <span class="na">ref=</span><span class="s">&quot;connectionFactory&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- 如果不配置Serializer，那么存储的时候只能使用String，如果用对象类型存储，那么会提示错误 can&#39;t cast to String！！！--&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;keySerializer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="c">&lt;!--对key的默认序列化器。默认值是StringSerializer--&gt;</span>
</span><span class='line'>            <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;org.springframework.data.redis.serializer.StringRedisSerializer&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>        <span class="c">&lt;!--是对value的默认序列化器，默认值是取自DefaultSerializer的JdkSerializationRedisSerializer。--&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;valueSerializer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;org.springframework.data.redis.serializer.JdkSerializationRedisSerializer&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>        <span class="c">&lt;!--存储Map时key需要的序列化配置--&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;hashKeySerializer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;org.springframework.data.redis.serializer.StringRedisSerializer&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>        <span class="c">&lt;!--存储Map时value需要的序列化配置--&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;hashValueSerializer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;org.springframework.data.redis.serializer.JdkSerializationRedisSerializer&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>        <span class="c">&lt;!--开启事务</span>
</span><span class='line'><span class="c">        系统自动帮我们拿到了事务中绑定的连接。可以在一个方法的多次对Redis增删该查中，始终使用同一个连接。</span>
</span><span class='line'><span class="c">        --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;enableTransactionSupport&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="c">&lt;!--在Spring中@Transactional 也是可以进行事物控制的。--&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- 缓存管理器: 使用redis 当做缓存 --&gt;</span>
</span><span class='line'>    <span class="c">&lt;!--&lt;bean id=&quot;cacheManager&quot; class=&quot;org.springframework.data.redis.cache.RedisCacheManager&quot;&gt;--&gt;</span>
</span><span class='line'>        <span class="c">&lt;!--&lt;constructor-arg ref=&quot;redisTemplate&quot;/&gt;--&gt;</span>
</span><span class='line'>    <span class="c">&lt;!--&lt;/bean&gt;--&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- cache配置 --&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- E Redis 配置--&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Redis操作的接口</h2>

<figure class='code'><figcaption><span>Redis操作的接口</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
<span class='line-number'>409</span>
<span class='line-number'>410</span>
<span class='line-number'>411</span>
<span class='line-number'>412</span>
<span class='line-number'>413</span>
<span class='line-number'>414</span>
<span class='line-number'>415</span>
<span class='line-number'>416</span>
<span class='line-number'>417</span>
<span class='line-number'>418</span>
<span class='line-number'>419</span>
<span class='line-number'>420</span>
<span class='line-number'>421</span>
<span class='line-number'>422</span>
<span class='line-number'>423</span>
<span class='line-number'>424</span>
<span class='line-number'>425</span>
<span class='line-number'>426</span>
<span class='line-number'>427</span>
<span class='line-number'>428</span>
<span class='line-number'>429</span>
<span class='line-number'>430</span>
<span class='line-number'>431</span>
<span class='line-number'>432</span>
<span class='line-number'>433</span>
<span class='line-number'>434</span>
<span class='line-number'>435</span>
<span class='line-number'>436</span>
<span class='line-number'>437</span>
<span class='line-number'>438</span>
<span class='line-number'>439</span>
<span class='line-number'>440</span>
<span class='line-number'>441</span>
<span class='line-number'>442</span>
<span class='line-number'>443</span>
<span class='line-number'>444</span>
<span class='line-number'>445</span>
<span class='line-number'>446</span>
<span class='line-number'>447</span>
<span class='line-number'>448</span>
<span class='line-number'>449</span>
<span class='line-number'>450</span>
<span class='line-number'>451</span>
<span class='line-number'>452</span>
<span class='line-number'>453</span>
<span class='line-number'>454</span>
<span class='line-number'>455</span>
<span class='line-number'>456</span>
<span class='line-number'>457</span>
<span class='line-number'>458</span>
<span class='line-number'>459</span>
<span class='line-number'>460</span>
<span class='line-number'>461</span>
<span class='line-number'>462</span>
<span class='line-number'>463</span>
<span class='line-number'>464</span>
<span class='line-number'>465</span>
<span class='line-number'>466</span>
<span class='line-number'>467</span>
<span class='line-number'>468</span>
<span class='line-number'>469</span>
<span class='line-number'>470</span>
<span class='line-number'>471</span>
<span class='line-number'>472</span>
<span class='line-number'>473</span>
<span class='line-number'>474</span>
<span class='line-number'>475</span>
<span class='line-number'>476</span>
<span class='line-number'>477</span>
<span class='line-number'>478</span>
<span class='line-number'>479</span>
<span class='line-number'>480</span>
<span class='line-number'>481</span>
<span class='line-number'>482</span>
<span class='line-number'>483</span>
<span class='line-number'>484</span>
<span class='line-number'>485</span>
<span class='line-number'>486</span>
<span class='line-number'>487</span>
<span class='line-number'>488</span>
<span class='line-number'>489</span>
<span class='line-number'>490</span>
<span class='line-number'>491</span>
<span class='line-number'>492</span>
<span class='line-number'>493</span>
<span class='line-number'>494</span>
<span class='line-number'>495</span>
<span class='line-number'>496</span>
<span class='line-number'>497</span>
<span class='line-number'>498</span>
<span class='line-number'>499</span>
<span class='line-number'>500</span>
<span class='line-number'>501</span>
<span class='line-number'>502</span>
<span class='line-number'>503</span>
<span class='line-number'>504</span>
<span class='line-number'>505</span>
<span class='line-number'>506</span>
<span class='line-number'>507</span>
<span class='line-number'>508</span>
<span class='line-number'>509</span>
<span class='line-number'>510</span>
<span class='line-number'>511</span>
<span class='line-number'>512</span>
<span class='line-number'>513</span>
<span class='line-number'>514</span>
<span class='line-number'>515</span>
<span class='line-number'>516</span>
<span class='line-number'>517</span>
<span class='line-number'>518</span>
<span class='line-number'>519</span>
<span class='line-number'>520</span>
<span class='line-number'>521</span>
<span class='line-number'>522</span>
<span class='line-number'>523</span>
<span class='line-number'>524</span>
<span class='line-number'>525</span>
<span class='line-number'>526</span>
<span class='line-number'>527</span>
<span class='line-number'>528</span>
<span class='line-number'>529</span>
<span class='line-number'>530</span>
<span class='line-number'>531</span>
<span class='line-number'>532</span>
<span class='line-number'>533</span>
<span class='line-number'>534</span>
<span class='line-number'>535</span>
<span class='line-number'>536</span>
<span class='line-number'>537</span>
<span class='line-number'>538</span>
<span class='line-number'>539</span>
<span class='line-number'>540</span>
<span class='line-number'>541</span>
<span class='line-number'>542</span>
<span class='line-number'>543</span>
<span class='line-number'>544</span>
<span class='line-number'>545</span>
<span class='line-number'>546</span>
<span class='line-number'>547</span>
<span class='line-number'>548</span>
<span class='line-number'>549</span>
<span class='line-number'>550</span>
<span class='line-number'>551</span>
<span class='line-number'>552</span>
<span class='line-number'>553</span>
<span class='line-number'>554</span>
<span class='line-number'>555</span>
<span class='line-number'>556</span>
<span class='line-number'>557</span>
<span class='line-number'>558</span>
<span class='line-number'>559</span>
<span class='line-number'>560</span>
<span class='line-number'>561</span>
<span class='line-number'>562</span>
<span class='line-number'>563</span>
<span class='line-number'>564</span>
<span class='line-number'>565</span>
<span class='line-number'>566</span>
<span class='line-number'>567</span>
<span class='line-number'>568</span>
<span class='line-number'>569</span>
<span class='line-number'>570</span>
<span class='line-number'>571</span>
<span class='line-number'>572</span>
<span class='line-number'>573</span>
<span class='line-number'>574</span>
<span class='line-number'>575</span>
<span class='line-number'>576</span>
<span class='line-number'>577</span>
<span class='line-number'>578</span>
<span class='line-number'>579</span>
<span class='line-number'>580</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">uifuture</span><span class="o">.</span><span class="na">utils</span><span class="o">.</span><span class="na">redis</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.data.redis.connection.DataType</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.data.redis.core.ValueOperations</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.data.redis.core.ZSetOperations</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.util.CollectionUtils</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.Serializable</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.concurrent.TimeUnit</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Created with IntelliJ IDEA.</span>
</span><span class='line'><span class="cm"> * User: 陈浩翔.</span>
</span><span class='line'><span class="cm"> * Date: 2017/4/10.</span>
</span><span class='line'><span class="cm"> * Time: 上午 12:11.</span>
</span><span class='line'><span class="cm"> * Explain: Redis操作的接口</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">RedisCommand</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 用户排序通过注册时间的 权重值</span>
</span><span class='line'><span class="cm">     * @param date</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">double</span> <span class="nf">getCreateTimeScore</span><span class="o">(</span><span class="kt">long</span> <span class="n">date</span><span class="o">);</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 获取Redis中所有的键的key</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">Set</span><span class="o">&lt;</span><span class="n">K</span><span class="o">&gt;</span> <span class="nf">getAllKeys</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 获取所有的普通key-value</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">Map</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="nf">getAllString</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 获取所有的Set -key-value</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">Map</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">Set</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;&gt;</span> <span class="nf">getAllSet</span><span class="o">();</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 获取所有的ZSet正序  -key-value 不获取权重值</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">Map</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">Set</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;&gt;</span> <span class="nf">getAllZSetReverseRange</span><span class="o">();</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 获取所有的ZSet倒序  -key-value 不获取权重值</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">Map</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">Set</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;&gt;</span> <span class="nf">getAllZSetRange</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 获取所有的List -key-value</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">Map</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">List</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;&gt;</span> <span class="nf">getAllList</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 获取所有的Map -key-value</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">Map</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;&gt;</span> <span class="nf">getAllMap</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 添加一个list</span>
</span><span class='line'><span class="cm">     * @param key</span>
</span><span class='line'><span class="cm">     * @param objectList</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">addList</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">objectList</span><span class="o">);</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 向list中增加值</span>
</span><span class='line'><span class="cm">     * @param key</span>
</span><span class='line'><span class="cm">     * @param obj</span>
</span><span class='line'><span class="cm">     * @return 返回在list中的下标</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">long</span> <span class="nf">addList</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span><span class="n">V</span> <span class="n">obj</span><span class="o">);</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * 向list中增加值</span>
</span><span class='line'><span class="cm">     * @param key</span>
</span><span class='line'><span class="cm">     * @param obj</span>
</span><span class='line'><span class="cm">     * @return 返回在list中的下标</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">long</span> <span class="nf">addList</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span><span class="n">V</span> <span class="o">...</span><span class="na">obj</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * 输出list</span>
</span><span class='line'><span class="cm">     * @param key List的key</span>
</span><span class='line'><span class="cm">     * @param s 开始下标</span>
</span><span class='line'><span class="cm">     * @param e 结束的下标</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="nf">getList</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="kt">long</span> <span class="n">s</span><span class="o">,</span> <span class="kt">long</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 输出完整的list</span>
</span><span class='line'><span class="cm">     * @param key</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="nf">getList</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">);</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 获取list集合中元素的个数</span>
</span><span class='line'><span class="cm">     * @param key</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">long</span> <span class="nf">getListSize</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">);</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 移除list中某值</span>
</span><span class='line'><span class="cm">     * 移除list中 count个value为object的值,并且返回移除的数量,</span>
</span><span class='line'><span class="cm">     * 如果count为0,或者大于list中为value为object数量的总和,</span>
</span><span class='line'><span class="cm">     * 那么移除所有value为object的值,并且返回移除数量</span>
</span><span class='line'><span class="cm">     * @param key</span>
</span><span class='line'><span class="cm">     * @param object</span>
</span><span class='line'><span class="cm">     * @return 返回移除数量</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">long</span> <span class="nf">removeListValue</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span><span class="n">V</span> <span class="n">object</span><span class="o">);</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 移除list中某值</span>
</span><span class='line'><span class="cm">     * @param key</span>
</span><span class='line'><span class="cm">     * @param object</span>
</span><span class='line'><span class="cm">     * @return 返回移除数量</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">long</span> <span class="nf">removeListValue</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span><span class="n">V</span><span class="o">...</span> <span class="n">object</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 批量删除key对应的value</span>
</span><span class='line'><span class="cm">     * @param keys</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">remove</span><span class="o">(</span><span class="kd">final</span> <span class="n">K</span><span class="o">...</span> <span class="n">keys</span><span class="o">);</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 删除缓存</span>
</span><span class='line'><span class="cm">     * 根据key精确匹配删除</span>
</span><span class='line'><span class="cm">     * @param key</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">remove</span><span class="o">(</span><span class="kd">final</span> <span class="n">K</span> <span class="n">key</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 通过分数删除ZSet中的值</span>
</span><span class='line'><span class="cm">     * @param key</span>
</span><span class='line'><span class="cm">     * @param s</span>
</span><span class='line'><span class="cm">     * @param e</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">removeZSetRangeByScore</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span><span class="kt">double</span> <span class="n">s</span> <span class="o">,</span> <span class="kt">double</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 设置Set的过期时间</span>
</span><span class='line'><span class="cm">     * @param key</span>
</span><span class='line'><span class="cm">     * @param time</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">Boolean</span> <span class="nf">setSetExpireTime</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span><span class="n">Long</span> <span class="n">time</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 设置ZSet的过期时间</span>
</span><span class='line'><span class="cm">     * @param key</span>
</span><span class='line'><span class="cm">     * @param time</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">Boolean</span> <span class="nf">setZSetExpireTime</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span><span class="n">Long</span> <span class="n">time</span><span class="o">);</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 判断缓存中是否有key对应的value</span>
</span><span class='line'><span class="cm">     * @param key</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="nf">exists</span><span class="o">(</span><span class="kd">final</span> <span class="n">K</span> <span class="n">key</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 读取String缓存 可以是对象</span>
</span><span class='line'><span class="cm">     * @param key</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">V</span> <span class="nf">get</span><span class="o">(</span><span class="kd">final</span> <span class="n">K</span> <span class="n">key</span><span class="o">);</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 读取String缓存 可以是对象</span>
</span><span class='line'><span class="cm">     * @param key</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="nf">get</span><span class="o">(</span><span class="kd">final</span> <span class="n">K</span><span class="o">...</span> <span class="n">key</span><span class="o">);</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 读取缓存 可以是对象 根据正则表达式匹配</span>
</span><span class='line'><span class="cm">     * @param regKey</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="nf">getByRegular</span><span class="o">(</span><span class="kd">final</span> <span class="n">K</span> <span class="n">regKey</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 写入缓存 可以是对象</span>
</span><span class='line'><span class="cm">     * @param key</span>
</span><span class='line'><span class="cm">     * @param value</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">set</span><span class="o">(</span><span class="kd">final</span> <span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="n">V</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 写入缓存</span>
</span><span class='line'><span class="cm">     * @param key</span>
</span><span class='line'><span class="cm">     * @param value</span>
</span><span class='line'><span class="cm">     * @param expireTime 过期时间 -单位s</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">set</span><span class="o">(</span><span class="kd">final</span> <span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="n">V</span> <span class="n">value</span><span class="o">,</span> <span class="n">Long</span> <span class="n">expireTime</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 设置一个key的过期时间（单位：秒）</span>
</span><span class='line'><span class="cm">     * @param key</span>
</span><span class='line'><span class="cm">     * @param expireTime</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="nf">setExpireTime</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="n">Long</span> <span class="n">expireTime</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 获取key的类型</span>
</span><span class='line'><span class="cm">     * @param key</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">DataType</span> <span class="nf">getType</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 删除map中的某个对象</span>
</span><span class='line'><span class="cm">     * @param key   map对应的key</span>
</span><span class='line'><span class="cm">     * @param field map中该对象的key</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">removeMapField</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="n">V</span><span class="o">...</span> <span class="n">field</span><span class="o">);</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * 获取map对象</span>
</span><span class='line'><span class="cm">     * @param key map对应的key</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">Map</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="nf">getMap</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">);</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * 获取map对象</span>
</span><span class='line'><span class="cm">     * @param key map对应的key</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">Long</span> <span class="nf">getMapSize</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">);</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 获取map缓存中的某个对象</span>
</span><span class='line'><span class="cm">     * @param key map对应的key</span>
</span><span class='line'><span class="cm">     * @param field map中该对象的key</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="nf">getMapField</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="n">K</span> <span class="n">field</span><span class="o">);</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 判断map中对应key的key是否存在</span>
</span><span class='line'><span class="cm">     * @param key map对应的key</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">Boolean</span> <span class="nf">hasMapKey</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span><span class="n">K</span> <span class="n">field</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 获取map对应key的value</span>
</span><span class='line'><span class="cm">     * @param key map对应的key</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="nf">getMapFieldValue</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">);</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 获取map的key</span>
</span><span class='line'><span class="cm">     * @param key map对应的key</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">Set</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="nf">getMapFieldKey</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">);</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 添加map</span>
</span><span class='line'><span class="cm">     * @param key</span>
</span><span class='line'><span class="cm">     * @param map</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">addMap</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">map</span><span class="o">);</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 向key对应的map中添加缓存对象</span>
</span><span class='line'><span class="cm">     * @param key   cache对象key</span>
</span><span class='line'><span class="cm">     * @param field map对应的key</span>
</span><span class='line'><span class="cm">     * @param value     值</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">addMap</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="n">K</span> <span class="n">field</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 向key对应的map中添加缓存对象</span>
</span><span class='line'><span class="cm">     * @param key   cache对象key</span>
</span><span class='line'><span class="cm">     * @param field map对应的key</span>
</span><span class='line'><span class="cm">     * @param time 过期时间-整个MAP的过期时间</span>
</span><span class='line'><span class="cm">     * @param value     值</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">addMap</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="n">K</span> <span class="n">field</span><span class="o">,</span> <span class="n">V</span> <span class="n">value</span><span class="o">,</span><span class="kt">long</span> <span class="n">time</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 向set中加入对象</span>
</span><span class='line'><span class="cm">     * @param key  对象key</span>
</span><span class='line'><span class="cm">     * @param obj  值</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">addSet</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="n">V</span><span class="o">...</span> <span class="n">obj</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 处理事务时锁定key</span>
</span><span class='line'><span class="cm">     * @param key</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">watch</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 移除set中的某些值</span>
</span><span class='line'><span class="cm">     * @param key  对象key</span>
</span><span class='line'><span class="cm">     * @param obj  值</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">long</span> <span class="nf">removeSetValue</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="n">V</span> <span class="n">obj</span><span class="o">);</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 移除set中的某些值</span>
</span><span class='line'><span class="cm">     * @param key  对象key</span>
</span><span class='line'><span class="cm">     * @param obj  值</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">long</span> <span class="nf">removeSetValue</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="n">V</span><span class="o">...</span> <span class="n">obj</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 获取set的对象数</span>
</span><span class='line'><span class="cm">     * @param key  对象key</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">long</span> <span class="nf">getSetSize</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 判断set中是否存在这个值</span>
</span><span class='line'><span class="cm">     * @param key  对象key</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">Boolean</span> <span class="nf">hasSetValue</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span><span class="n">V</span> <span class="n">obj</span><span class="o">);</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 获得整个set</span>
</span><span class='line'><span class="cm">     * @param key  对象key</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">Set</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="nf">getSet</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 获得set 并集</span>
</span><span class='line'><span class="cm">     * @param key</span>
</span><span class='line'><span class="cm">     * @param otherKey</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">Set</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="nf">getSetUnion</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span><span class="n">K</span> <span class="n">otherKey</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 获得set 并集</span>
</span><span class='line'><span class="cm">     * @param key</span>
</span><span class='line'><span class="cm">     * @param set</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">Set</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="nf">getSetUnion</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span><span class="n">Set</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">set</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 获得set 交集</span>
</span><span class='line'><span class="cm">     * @param key</span>
</span><span class='line'><span class="cm">     * @param otherKey</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">Set</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="nf">getSetIntersect</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span><span class="n">K</span> <span class="n">otherKey</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 获得set 交集</span>
</span><span class='line'><span class="cm">     * @param key</span>
</span><span class='line'><span class="cm">     * @param set</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">Set</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="nf">getSetIntersect</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span><span class="n">Set</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">set</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 模糊移除 支持*号等匹配移除</span>
</span><span class='line'><span class="cm">     * @param blears</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">removeBlear</span><span class="o">(</span><span class="n">K</span><span class="o">...</span> <span class="n">blears</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 修改key名 如果不存在该key或者没有修改成功返回false</span>
</span><span class='line'><span class="cm">     * @param oldKey</span>
</span><span class='line'><span class="cm">     * @param newKey</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">Boolean</span> <span class="nf">renameIfAbsent</span><span class="o">(</span><span class="n">String</span> <span class="n">oldKey</span><span class="o">,</span><span class="n">String</span> <span class="n">newKey</span><span class="o">);</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 模糊移除 支持*号等匹配移除</span>
</span><span class='line'><span class="cm">     * @param blear</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">removeBlear</span><span class="o">(</span><span class="n">K</span> <span class="n">blear</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 根据正则表达式来移除key-value</span>
</span><span class='line'><span class="cm">     * @param blears</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">removeByRegular</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">blears</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 根据正则表达式来移除key-value</span>
</span><span class='line'><span class="cm">     * @param blears</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">removeByRegular</span><span class="o">(</span><span class="n">String</span> <span class="n">blears</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 根据正则表达式来移除 Map中的key-value</span>
</span><span class='line'><span class="cm">     * @param key</span>
</span><span class='line'><span class="cm">     * @param blears</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">removeMapFieldByRegular</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span><span class="n">K</span><span class="o">...</span> <span class="n">blears</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 根据正则表达式来移除 Map中的key-value</span>
</span><span class='line'><span class="cm">     * @param key</span>
</span><span class='line'><span class="cm">     * @param blear</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">removeMapFieldByRegular</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span><span class="n">K</span> <span class="n">blear</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 移除key 对应的value</span>
</span><span class='line'><span class="cm">     * @param key</span>
</span><span class='line'><span class="cm">     * @param value</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">Long</span> <span class="nf">removeZSetValue</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="n">V</span><span class="o">...</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 移除key ZSet</span>
</span><span class='line'><span class="cm">     * @param key</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">removeZSet</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">);</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     *删除，键为K的集合，索引start&lt;=index&lt;=end的元素子集</span>
</span><span class='line'><span class="cm">     * @param key</span>
</span><span class='line'><span class="cm">     * @param start</span>
</span><span class='line'><span class="cm">     * @param end</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">removeZSetRange</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span><span class="n">Long</span> <span class="n">start</span><span class="o">,</span><span class="n">Long</span> <span class="n">end</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 并集 将key对应的集合和key1对应的集合合并到key2中</span>
</span><span class='line'><span class="cm">     * 如果分数相同的值，都会保留</span>
</span><span class='line'><span class="cm">     * 原来key2的值会被覆盖</span>
</span><span class='line'><span class="cm">     * @param key</span>
</span><span class='line'><span class="cm">     * @param key1</span>
</span><span class='line'><span class="cm">     * @param key2</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">setZSetUnionAndStore</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span><span class="n">String</span> <span class="n">key1</span><span class="o">,</span> <span class="n">String</span> <span class="n">key2</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 获取整个有序集合ZSET，正序</span>
</span><span class='line'><span class="cm">     * @param key</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="nf">getZSetRange</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 获取有序集合ZSET</span>
</span><span class='line'><span class="cm">     * 键为K的集合，索引start&lt;=index&lt;=end的元素子集，正序</span>
</span><span class='line'><span class="cm">     * @param key</span>
</span><span class='line'><span class="cm">     * @param start 开始位置</span>
</span><span class='line'><span class="cm">     * @param end 结束位置</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="nf">getZSetRange</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span><span class="kt">long</span> <span class="n">start</span><span class="o">,</span><span class="kt">long</span> <span class="n">end</span><span class="o">);</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 获取整个有序集合ZSET，倒序</span>
</span><span class='line'><span class="cm">     * @param key</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">Set</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="nf">getZSetReverseRange</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 获取有序集合ZSET</span>
</span><span class='line'><span class="cm">     * 键为K的集合，索引start&lt;=index&lt;=end的元素子集，倒序</span>
</span><span class='line'><span class="cm">     * @param key</span>
</span><span class='line'><span class="cm">     * @param start 开始位置</span>
</span><span class='line'><span class="cm">     * @param end 结束位置</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">Set</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="nf">getZSetReverseRange</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span><span class="kt">long</span> <span class="n">start</span><span class="o">,</span><span class="kt">long</span> <span class="n">end</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 通过分数(权值)获取ZSET集合 正序 -从小到大</span>
</span><span class='line'><span class="cm">     * @param key</span>
</span><span class='line'><span class="cm">     * @param start</span>
</span><span class='line'><span class="cm">     * @param end</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">Set</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="nf">getZSetRangeByScore</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="kt">double</span> <span class="n">start</span><span class="o">,</span> <span class="kt">double</span> <span class="n">end</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 通过分数(权值)获取ZSET集合 倒序 -从大到小</span>
</span><span class='line'><span class="cm">     * @param key</span>
</span><span class='line'><span class="cm">     * @param start</span>
</span><span class='line'><span class="cm">     * @param end</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">Set</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="nf">getZSetReverseRangeByScore</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="kt">double</span> <span class="n">start</span><span class="o">,</span> <span class="kt">double</span> <span class="n">end</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 键为K的集合，索引start&lt;=index&lt;=end的元素子集</span>
</span><span class='line'><span class="cm">     * 返回泛型接口（包括score和value），正序</span>
</span><span class='line'><span class="cm">     * @param key</span>
</span><span class='line'><span class="cm">     * @param start</span>
</span><span class='line'><span class="cm">     * @param end</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">Set</span><span class="o">&lt;</span><span class="n">ZSetOperations</span><span class="o">.</span><span class="na">TypedTuple</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;&gt;</span> <span class="nf">getZSetRangeWithScores</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="kt">long</span> <span class="n">start</span><span class="o">,</span> <span class="kt">long</span> <span class="n">end</span><span class="o">);</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 键为K的集合，索引start&lt;=index&lt;=end的元素子集</span>
</span><span class='line'><span class="cm">     * 返回泛型接口（包括score和value），倒序</span>
</span><span class='line'><span class="cm">     * @param key</span>
</span><span class='line'><span class="cm">     * @param start</span>
</span><span class='line'><span class="cm">     * @param end</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">Set</span><span class="o">&lt;</span><span class="n">ZSetOperations</span><span class="o">.</span><span class="na">TypedTuple</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;&gt;</span> <span class="nf">getZSetReverseRangeWithScores</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="kt">long</span> <span class="n">start</span><span class="o">,</span> <span class="kt">long</span> <span class="n">end</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 键为K的集合</span>
</span><span class='line'><span class="cm">     * 返回泛型接口（包括score和value），正序</span>
</span><span class='line'><span class="cm">     * @param key</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">Set</span><span class="o">&lt;</span><span class="n">ZSetOperations</span><span class="o">.</span><span class="na">TypedTuple</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;&gt;</span> <span class="nf">getZSetRangeWithScores</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">);</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 键为K的集合</span>
</span><span class='line'><span class="cm">     * 返回泛型接口（包括score和value），倒序</span>
</span><span class='line'><span class="cm">     * @param key</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">Set</span><span class="o">&lt;</span><span class="n">ZSetOperations</span><span class="o">.</span><span class="na">TypedTuple</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;&gt;</span> <span class="nf">getZSetReverseRangeWithScores</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 键为K的集合，sMin&lt;=score&lt;=sMax的元素个数</span>
</span><span class='line'><span class="cm">     * @param key</span>
</span><span class='line'><span class="cm">     * @param sMin</span>
</span><span class='line'><span class="cm">     * @param sMax</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">long</span> <span class="nf">getZSetCountSize</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span><span class="kt">double</span> <span class="n">sMin</span><span class="o">,</span><span class="kt">double</span> <span class="n">sMax</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 获取Zset 键为K的集合元素个数</span>
</span><span class='line'><span class="cm">     * @param key</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">long</span> <span class="nf">getZSetSize</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 获取键为K的集合，value为obj的元素分数</span>
</span><span class='line'><span class="cm">     * @param key</span>
</span><span class='line'><span class="cm">     * @param value</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">double</span> <span class="nf">getZSetScore</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span><span class="n">V</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 元素分数增加，delta是增量</span>
</span><span class='line'><span class="cm">     * @param key</span>
</span><span class='line'><span class="cm">     * @param value</span>
</span><span class='line'><span class="cm">     * @param delta</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">double</span> <span class="nf">incrementZSetScore</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span><span class="n">V</span> <span class="n">value</span><span class="o">,</span><span class="kt">double</span> <span class="n">delta</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 添加有序集合ZSET</span>
</span><span class='line'><span class="cm">     * 默认按照score升序排列，存储格式K(1)==V(n)，V(1)=S(1)</span>
</span><span class='line'><span class="cm">     * @param key</span>
</span><span class='line'><span class="cm">     * @param score</span>
</span><span class='line'><span class="cm">     * @param value</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">Boolean</span> <span class="nf">addZSet</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span> <span class="o">,</span><span class="kt">double</span> <span class="n">score</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 添加有序集合ZSET</span>
</span><span class='line'><span class="cm">     * @param key</span>
</span><span class='line'><span class="cm">     * @param value</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">Long</span> <span class="nf">addZSet</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span><span class="n">TreeSet</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 添加有序集合ZSET</span>
</span><span class='line'><span class="cm">     * @param key</span>
</span><span class='line'><span class="cm">     * @param score</span>
</span><span class='line'><span class="cm">     * @param value</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">Boolean</span> <span class="nf">addZSet</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span><span class="kt">double</span><span class="o">[]</span> <span class="n">score</span><span class="o">,</span> <span class="n">Object</span><span class="o">[]</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Redis的工具类</h2>

<figure class='code'><figcaption><span>Redis的工具类</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
<span class='line-number'>409</span>
<span class='line-number'>410</span>
<span class='line-number'>411</span>
<span class='line-number'>412</span>
<span class='line-number'>413</span>
<span class='line-number'>414</span>
<span class='line-number'>415</span>
<span class='line-number'>416</span>
<span class='line-number'>417</span>
<span class='line-number'>418</span>
<span class='line-number'>419</span>
<span class='line-number'>420</span>
<span class='line-number'>421</span>
<span class='line-number'>422</span>
<span class='line-number'>423</span>
<span class='line-number'>424</span>
<span class='line-number'>425</span>
<span class='line-number'>426</span>
<span class='line-number'>427</span>
<span class='line-number'>428</span>
<span class='line-number'>429</span>
<span class='line-number'>430</span>
<span class='line-number'>431</span>
<span class='line-number'>432</span>
<span class='line-number'>433</span>
<span class='line-number'>434</span>
<span class='line-number'>435</span>
<span class='line-number'>436</span>
<span class='line-number'>437</span>
<span class='line-number'>438</span>
<span class='line-number'>439</span>
<span class='line-number'>440</span>
<span class='line-number'>441</span>
<span class='line-number'>442</span>
<span class='line-number'>443</span>
<span class='line-number'>444</span>
<span class='line-number'>445</span>
<span class='line-number'>446</span>
<span class='line-number'>447</span>
<span class='line-number'>448</span>
<span class='line-number'>449</span>
<span class='line-number'>450</span>
<span class='line-number'>451</span>
<span class='line-number'>452</span>
<span class='line-number'>453</span>
<span class='line-number'>454</span>
<span class='line-number'>455</span>
<span class='line-number'>456</span>
<span class='line-number'>457</span>
<span class='line-number'>458</span>
<span class='line-number'>459</span>
<span class='line-number'>460</span>
<span class='line-number'>461</span>
<span class='line-number'>462</span>
<span class='line-number'>463</span>
<span class='line-number'>464</span>
<span class='line-number'>465</span>
<span class='line-number'>466</span>
<span class='line-number'>467</span>
<span class='line-number'>468</span>
<span class='line-number'>469</span>
<span class='line-number'>470</span>
<span class='line-number'>471</span>
<span class='line-number'>472</span>
<span class='line-number'>473</span>
<span class='line-number'>474</span>
<span class='line-number'>475</span>
<span class='line-number'>476</span>
<span class='line-number'>477</span>
<span class='line-number'>478</span>
<span class='line-number'>479</span>
<span class='line-number'>480</span>
<span class='line-number'>481</span>
<span class='line-number'>482</span>
<span class='line-number'>483</span>
<span class='line-number'>484</span>
<span class='line-number'>485</span>
<span class='line-number'>486</span>
<span class='line-number'>487</span>
<span class='line-number'>488</span>
<span class='line-number'>489</span>
<span class='line-number'>490</span>
<span class='line-number'>491</span>
<span class='line-number'>492</span>
<span class='line-number'>493</span>
<span class='line-number'>494</span>
<span class='line-number'>495</span>
<span class='line-number'>496</span>
<span class='line-number'>497</span>
<span class='line-number'>498</span>
<span class='line-number'>499</span>
<span class='line-number'>500</span>
<span class='line-number'>501</span>
<span class='line-number'>502</span>
<span class='line-number'>503</span>
<span class='line-number'>504</span>
<span class='line-number'>505</span>
<span class='line-number'>506</span>
<span class='line-number'>507</span>
<span class='line-number'>508</span>
<span class='line-number'>509</span>
<span class='line-number'>510</span>
<span class='line-number'>511</span>
<span class='line-number'>512</span>
<span class='line-number'>513</span>
<span class='line-number'>514</span>
<span class='line-number'>515</span>
<span class='line-number'>516</span>
<span class='line-number'>517</span>
<span class='line-number'>518</span>
<span class='line-number'>519</span>
<span class='line-number'>520</span>
<span class='line-number'>521</span>
<span class='line-number'>522</span>
<span class='line-number'>523</span>
<span class='line-number'>524</span>
<span class='line-number'>525</span>
<span class='line-number'>526</span>
<span class='line-number'>527</span>
<span class='line-number'>528</span>
<span class='line-number'>529</span>
<span class='line-number'>530</span>
<span class='line-number'>531</span>
<span class='line-number'>532</span>
<span class='line-number'>533</span>
<span class='line-number'>534</span>
<span class='line-number'>535</span>
<span class='line-number'>536</span>
<span class='line-number'>537</span>
<span class='line-number'>538</span>
<span class='line-number'>539</span>
<span class='line-number'>540</span>
<span class='line-number'>541</span>
<span class='line-number'>542</span>
<span class='line-number'>543</span>
<span class='line-number'>544</span>
<span class='line-number'>545</span>
<span class='line-number'>546</span>
<span class='line-number'>547</span>
<span class='line-number'>548</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">uifuture</span><span class="o">.</span><span class="na">utils</span><span class="o">.</span><span class="na">redis</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.log4j.Logger</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.data.redis.connection.DataType</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.data.redis.core.RedisTemplate</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.data.redis.core.ZSetOperations</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.util.CollectionUtils</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.concurrent.TimeUnit</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.regex.Pattern</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Created with IntelliJ IDEA.</span>
</span><span class='line'><span class="cm"> * User: 陈浩翔.</span>
</span><span class='line'><span class="cm"> * Date: 2017/4/10.</span>
</span><span class='line'><span class="cm"> * Time: 上午 12:51.</span>
</span><span class='line'><span class="cm"> * Explain: Redis的工具类</span>
</span><span class='line'><span class="cm"> * 增删改 -不能在这里面抓取异常 -因为可能有事务处理</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nd">@Component</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedisHandle</span> <span class="kd">implements</span> <span class="n">RedisCommand</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">Logger</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">RedisHandle</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="n">RedisTemplate</span> <span class="n">redisTemplate</span><span class="o">;</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 出异常，重复操作的次数</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Integer</span> <span class="n">times</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">double</span> <span class="nf">getCreateTimeScore</span><span class="o">(</span><span class="kt">long</span> <span class="n">date</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">date</span><span class="o">/</span> <span class="mf">100000.0</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">getAllKeys</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">keys</span><span class="o">(</span><span class="s">&quot;*&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="nf">getAllString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">stringSet</span> <span class="o">=</span> <span class="n">getAllKeys</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;();</span>
</span><span class='line'>        <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">iterator</span> <span class="o">=</span> <span class="n">stringSet</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">iterator</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">k</span> <span class="o">=</span> <span class="n">iterator</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">getType</span><span class="o">(</span><span class="n">k</span><span class="o">)</span> <span class="o">==</span> <span class="n">DataType</span><span class="o">.</span><span class="na">STRING</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">k</span><span class="o">,</span> <span class="n">get</span><span class="o">(</span><span class="n">k</span><span class="o">));</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">map</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;&gt;</span> <span class="nf">getAllSet</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">stringSet</span> <span class="o">=</span> <span class="n">getAllKeys</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;&gt;();</span>
</span><span class='line'>        <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">iterator</span> <span class="o">=</span> <span class="n">stringSet</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">iterator</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">k</span> <span class="o">=</span> <span class="n">iterator</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">getType</span><span class="o">(</span><span class="n">k</span><span class="o">)</span> <span class="o">==</span> <span class="n">DataType</span><span class="o">.</span><span class="na">SET</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">k</span><span class="o">,</span> <span class="n">getSet</span><span class="o">(</span><span class="n">k</span><span class="o">));</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">map</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;&gt;</span> <span class="nf">getAllZSetRange</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">stringSet</span> <span class="o">=</span> <span class="n">getAllKeys</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;&gt;();</span>
</span><span class='line'>        <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">iterator</span> <span class="o">=</span> <span class="n">stringSet</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">iterator</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">k</span> <span class="o">=</span> <span class="n">iterator</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">getType</span><span class="o">(</span><span class="n">k</span><span class="o">)</span> <span class="o">==</span> <span class="n">DataType</span><span class="o">.</span><span class="na">ZSET</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">logger</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&quot;k:&quot;</span><span class="o">+</span><span class="n">k</span><span class="o">);</span>
</span><span class='line'>                <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">k</span><span class="o">,</span> <span class="n">getZSetRange</span><span class="o">(</span><span class="n">k</span><span class="o">));</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">map</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;&gt;</span> <span class="nf">getAllZSetReverseRange</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">stringSet</span> <span class="o">=</span> <span class="n">getAllKeys</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;&gt;();</span>
</span><span class='line'>        <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">iterator</span> <span class="o">=</span> <span class="n">stringSet</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">iterator</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">k</span> <span class="o">=</span> <span class="n">iterator</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">getType</span><span class="o">(</span><span class="n">k</span><span class="o">)</span> <span class="o">==</span> <span class="n">DataType</span><span class="o">.</span><span class="na">ZSET</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">k</span><span class="o">,</span> <span class="n">getZSetReverseRange</span><span class="o">(</span><span class="n">k</span><span class="o">));</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">map</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;&gt;</span> <span class="nf">getAllList</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">stringSet</span> <span class="o">=</span> <span class="n">getAllKeys</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;&gt;();</span>
</span><span class='line'>        <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">iterator</span> <span class="o">=</span> <span class="n">stringSet</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">iterator</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">k</span> <span class="o">=</span> <span class="n">iterator</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">getType</span><span class="o">(</span><span class="n">k</span><span class="o">)</span> <span class="o">==</span> <span class="n">DataType</span><span class="o">.</span><span class="na">LIST</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">k</span><span class="o">,</span> <span class="n">getList</span><span class="o">(</span><span class="n">k</span><span class="o">));</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">map</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;&gt;</span> <span class="nf">getAllMap</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">stringSet</span> <span class="o">=</span> <span class="n">getAllKeys</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;&gt;();</span>
</span><span class='line'>        <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">iterator</span> <span class="o">=</span> <span class="n">stringSet</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">iterator</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">k</span> <span class="o">=</span> <span class="n">iterator</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">getType</span><span class="o">(</span><span class="n">k</span><span class="o">)</span> <span class="o">==</span> <span class="n">DataType</span><span class="o">.</span><span class="na">HASH</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">k</span><span class="o">,</span> <span class="n">getMap</span><span class="o">(</span><span class="n">k</span><span class="o">));</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">map</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addList</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">objectList</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Object</span> <span class="n">obj</span> <span class="o">:</span> <span class="n">objectList</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">addList</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">obj</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">addList</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundListOps</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">rightPush</span><span class="o">(</span><span class="n">obj</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">addList</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">Object</span><span class="o">...</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundListOps</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">rightPushAll</span><span class="o">(</span><span class="n">obj</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="nf">getList</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="kt">long</span> <span class="n">s</span><span class="o">,</span> <span class="kt">long</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundListOps</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">range</span><span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="nf">getList</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundListOps</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">range</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">getListSize</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getListSize</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundListOps</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">size</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">removeListValue</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">Object</span> <span class="n">object</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundListOps</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">remove</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">object</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">removeListValue</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">Object</span><span class="o">...</span> <span class="n">objects</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">r</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Object</span> <span class="n">object</span> <span class="o">:</span> <span class="n">objects</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">r</span> <span class="o">+=</span> <span class="n">removeListValue</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">object</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">r</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">remove</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">key</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">key</span><span class="o">.</span><span class="na">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">key</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">remove</span><span class="o">(</span><span class="n">key</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">redisTemplate</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">CollectionUtils</span><span class="o">.</span><span class="na">arrayToList</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">removeBlear</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">blears</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">blear</span> <span class="o">:</span> <span class="n">blears</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">removeBlear</span><span class="o">(</span><span class="n">blear</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Boolean</span> <span class="nf">renameIfAbsent</span><span class="o">(</span><span class="n">String</span> <span class="n">oldKey</span><span class="o">,</span> <span class="n">String</span> <span class="n">newKey</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">renameIfAbsent</span><span class="o">(</span><span class="n">oldKey</span><span class="o">,</span> <span class="n">newKey</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">removeBlear</span><span class="o">(</span><span class="n">String</span> <span class="n">blear</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">redisTemplate</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">redisTemplate</span><span class="o">.</span><span class="na">keys</span><span class="o">(</span><span class="n">blear</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">removeByRegular</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">blears</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">blear</span> <span class="o">:</span> <span class="n">blears</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">removeBlear</span><span class="o">(</span><span class="n">blear</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">removeByRegular</span><span class="o">(</span><span class="n">String</span> <span class="n">blear</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">stringSet</span> <span class="o">=</span> <span class="n">getAllKeys</span><span class="o">();</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">stringSet</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">Pattern</span><span class="o">.</span><span class="na">compile</span><span class="o">(</span><span class="n">blear</span><span class="o">).</span><span class="na">matcher</span><span class="o">(</span><span class="n">s</span><span class="o">).</span><span class="na">matches</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">redisTemplate</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">removeMapFieldByRegular</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">String</span><span class="o">...</span> <span class="n">blears</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">blear</span> <span class="o">:</span> <span class="n">blears</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">removeMapFieldByRegular</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">blear</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">removeMapFieldByRegular</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">String</span> <span class="n">blear</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="n">getMap</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">stringSet</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">keySet</span><span class="o">();</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">stringSet</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">Pattern</span><span class="o">.</span><span class="na">compile</span><span class="o">(</span><span class="n">blear</span><span class="o">).</span><span class="na">matcher</span><span class="o">(</span><span class="n">s</span><span class="o">).</span><span class="na">matches</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundHashOps</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">delete</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Long</span> <span class="nf">removeZSetValue</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">Object</span><span class="o">...</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundZSetOps</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">remove</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">removeZSet</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">removeZSetRange</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="mi">0L</span><span class="o">,</span> <span class="n">getZSetSize</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">removeZSetRange</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">Long</span> <span class="n">start</span><span class="o">,</span> <span class="n">Long</span> <span class="n">end</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundZSetOps</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">removeRange</span><span class="o">(</span><span class="n">start</span><span class="o">,</span> <span class="n">end</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setZSetUnionAndStore</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span><span class="n">String</span> <span class="n">key1</span><span class="o">,</span> <span class="n">String</span> <span class="n">key2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundZSetOps</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">unionAndStore</span><span class="o">(</span><span class="n">key1</span><span class="o">,</span><span class="n">key2</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="nf">getZSetRange</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">getZSetRange</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">getZSetSize</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="nf">getZSetRange</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="kt">long</span> <span class="n">s</span><span class="o">,</span> <span class="kt">long</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundZSetOps</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">range</span><span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="nf">getZSetReverseRange</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">getZSetReverseRange</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">getZSetSize</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="nf">getZSetReverseRange</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="kt">long</span> <span class="n">start</span><span class="o">,</span> <span class="kt">long</span> <span class="n">end</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundZSetOps</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">reverseRange</span><span class="o">(</span><span class="n">start</span><span class="o">,</span> <span class="n">end</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="nf">getZSetRangeByScore</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="kt">double</span> <span class="n">start</span><span class="o">,</span> <span class="kt">double</span> <span class="n">end</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundZSetOps</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">rangeByScore</span><span class="o">(</span><span class="n">start</span><span class="o">,</span> <span class="n">end</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="nf">getZSetReverseRangeByScore</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="kt">double</span> <span class="n">start</span><span class="o">,</span> <span class="kt">double</span> <span class="n">end</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundZSetOps</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">reverseRangeByScore</span><span class="o">(</span><span class="n">start</span><span class="o">,</span> <span class="n">end</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">ZSetOperations</span><span class="o">.</span><span class="na">TypedTuple</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;&gt;</span> <span class="nf">getZSetRangeWithScores</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="kt">long</span> <span class="n">start</span><span class="o">,</span> <span class="kt">long</span> <span class="n">end</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundZSetOps</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">rangeWithScores</span><span class="o">(</span><span class="n">start</span><span class="o">,</span> <span class="n">end</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">ZSetOperations</span><span class="o">.</span><span class="na">TypedTuple</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;&gt;</span> <span class="nf">getZSetReverseRangeWithScores</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="kt">long</span> <span class="n">start</span><span class="o">,</span> <span class="kt">long</span> <span class="n">end</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundZSetOps</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">reverseRangeWithScores</span><span class="o">(</span><span class="n">start</span><span class="o">,</span> <span class="n">end</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">ZSetOperations</span><span class="o">.</span><span class="na">TypedTuple</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;&gt;</span> <span class="nf">getZSetRangeWithScores</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">getZSetRangeWithScores</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">getZSetSize</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">ZSetOperations</span><span class="o">.</span><span class="na">TypedTuple</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;&gt;</span> <span class="nf">getZSetReverseRangeWithScores</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">getZSetReverseRangeWithScores</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">getZSetSize</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getZSetCountSize</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="kt">double</span> <span class="n">sMin</span><span class="o">,</span> <span class="kt">double</span> <span class="n">sMax</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundZSetOps</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">count</span><span class="o">(</span><span class="n">sMin</span><span class="o">,</span> <span class="n">sMax</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getZSetSize</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundZSetOps</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">size</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">double</span> <span class="nf">getZSetScore</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundZSetOps</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">score</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">double</span> <span class="nf">incrementZSetScore</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">,</span> <span class="kt">double</span> <span class="n">delta</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundZSetOps</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">incrementScore</span><span class="o">(</span><span class="n">value</span><span class="o">,</span> <span class="n">delta</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Boolean</span> <span class="nf">addZSet</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="kt">double</span> <span class="n">score</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundZSetOps</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="n">value</span><span class="o">,</span> <span class="n">score</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Long</span> <span class="nf">addZSet</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">TreeSet</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundZSetOps</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Boolean</span> <span class="nf">addZSet</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="kt">double</span><span class="o">[]</span> <span class="n">score</span><span class="o">,</span> <span class="n">Object</span><span class="o">[]</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">score</span><span class="o">.</span><span class="na">length</span> <span class="o">!=</span> <span class="n">value</span><span class="o">.</span><span class="na">length</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">score</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">addZSet</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">score</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">value</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">==</span> <span class="kc">false</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">remove</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">exists</span><span class="o">(</span><span class="n">key</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">redisTemplate</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">removeZSetRangeByScore</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span><span class="kt">double</span> <span class="n">s</span> <span class="o">,</span> <span class="kt">double</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundZSetOps</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">removeRangeByScore</span><span class="o">(</span><span class="n">s</span><span class="o">,</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Boolean</span> <span class="nf">setSetExpireTime</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">Long</span> <span class="n">time</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundSetOps</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">expire</span><span class="o">(</span><span class="n">time</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Boolean</span> <span class="nf">setZSetExpireTime</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">Long</span> <span class="n">time</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundZSetOps</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">expire</span><span class="o">(</span><span class="n">time</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">exists</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">hasKey</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">get</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundValueOps</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="nf">get</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">keys</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;();</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">key</span> <span class="o">:</span> <span class="n">keys</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">list</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="nf">getByRegular</span><span class="o">(</span><span class="n">String</span> <span class="n">regKey</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">stringSet</span> <span class="o">=</span> <span class="n">getAllKeys</span><span class="o">();</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">objectList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;();</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">stringSet</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">Pattern</span><span class="o">.</span><span class="na">compile</span><span class="o">(</span><span class="n">regKey</span><span class="o">).</span><span class="na">matcher</span><span class="o">(</span><span class="n">s</span><span class="o">).</span><span class="na">matches</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">getType</span><span class="o">(</span><span class="n">s</span><span class="o">)</span> <span class="o">==</span> <span class="n">DataType</span><span class="o">.</span><span class="na">STRING</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">objectList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="n">s</span><span class="o">));</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">objectList</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">set</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundValueOps</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">set</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">set</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">,</span> <span class="n">Long</span> <span class="n">expireTime</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundValueOps</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">set</span><span class="o">(</span><span class="n">value</span><span class="o">,</span> <span class="n">expireTime</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">setExpireTime</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">Long</span> <span class="n">expireTime</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">expire</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">expireTime</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">DataType</span> <span class="nf">getType</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">type</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">removeMapField</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">Object</span><span class="o">...</span> <span class="n">field</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundHashOps</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">delete</span><span class="o">(</span><span class="n">field</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Long</span> <span class="nf">getMapSize</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundHashOps</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">size</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="nf">getMap</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundHashOps</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">entries</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="nf">getMapField</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">String</span> <span class="n">field</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">(</span><span class="n">T</span><span class="o">)</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundHashOps</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="n">field</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Boolean</span> <span class="nf">hasMapKey</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">String</span> <span class="n">field</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundHashOps</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">hasKey</span><span class="o">(</span><span class="n">field</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="nf">getMapFieldValue</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundHashOps</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">values</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="nf">getMapFieldKey</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundHashOps</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">keys</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addMap</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">map</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundHashOps</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">putAll</span><span class="o">(</span><span class="n">map</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addMap</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">String</span> <span class="n">field</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundHashOps</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">put</span><span class="o">(</span><span class="n">field</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addMap</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">String</span> <span class="n">field</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">,</span> <span class="kt">long</span> <span class="n">time</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundHashOps</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">put</span><span class="o">(</span><span class="n">field</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'>        <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundHashOps</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">expire</span><span class="o">(</span><span class="n">time</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">watch</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">redisTemplate</span><span class="o">.</span><span class="na">watch</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addSet</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">Object</span><span class="o">...</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundSetOps</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="n">obj</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">removeSetValue</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundSetOps</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">remove</span><span class="o">(</span><span class="n">obj</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">removeSetValue</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">Object</span><span class="o">...</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">obj</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">obj</span><span class="o">.</span><span class="na">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundSetOps</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">remove</span><span class="o">(</span><span class="n">obj</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0L</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getSetSize</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundSetOps</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">size</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Boolean</span> <span class="nf">hasSetValue</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Boolean</span> <span class="n">boo</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">t</span> <span class="o">=</span><span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">){</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">boo</span> <span class="o">=</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundSetOps</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">isMember</span><span class="o">(</span><span class="n">obj</span><span class="o">);</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;key[&quot;</span> <span class="o">+</span> <span class="n">key</span> <span class="o">+</span> <span class="s">&quot;],obj[&quot;</span> <span class="o">+</span> <span class="n">obj</span> <span class="o">+</span> <span class="s">&quot;]判断Set中的值是否存在失败,异常信息:&quot;</span> <span class="o">+</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span><span class='line'>                <span class="n">t</span><span class="o">++;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">if</span><span class="o">(</span><span class="n">t</span><span class="o">&gt;</span><span class="n">times</span><span class="o">){</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;key[&quot;</span> <span class="o">+</span> <span class="n">key</span> <span class="o">+</span> <span class="s">&quot;],obj[&quot;</span> <span class="o">+</span> <span class="n">obj</span> <span class="o">+</span> <span class="s">&quot;]是否存在,boo:&quot;</span> <span class="o">+</span> <span class="n">boo</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">boo</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="nf">getSet</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundSetOps</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">members</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="nf">getSetUnion</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">String</span> <span class="n">otherKey</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundSetOps</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">union</span><span class="o">(</span><span class="n">otherKey</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="nf">getSetUnion</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">set</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundSetOps</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">union</span><span class="o">(</span><span class="n">set</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="nf">getSetIntersect</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">String</span> <span class="n">otherKey</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundSetOps</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">intersect</span><span class="o">(</span><span class="n">otherKey</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="nf">getSetIntersect</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">set</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundSetOps</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">intersect</span><span class="o">(</span><span class="n">set</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个是我当时写一个Web项目的时候，慢慢整合而成的，比较完整的Redis操作工具类，基本上可以满足你操纵Redis的绝大多数需要了。</p>

<p>因为不是个什么完整的项目，就没有上传到github上为大家提供这几个代码的下载了，只能麻烦需要的朋友直接拷贝下了。</p>

<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【设计模式】Java设计模式之模板方法模式]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/05/14/study-in-imooc/"/>
    <updated>2017-05-14T22:18:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/05/14/study-in-imooc</id>
    <content type="html"><![CDATA[<p>我们先这样来想象一个生活中的场景，<br/>
就是我们在银行柜台进行办理业务的时候，会进行这几步:<br/>
Step1:进门取号<br/>
Step2:填写单据<br/>
Step3:等待叫号<br/>
Step4:窗口办理</p>

<p>在这里，无论是你我还是他/她，都会遵循这个模板进行业务的办理！
我们具体看Step2，银行是无法知道我们的信息的，所以无法由银行具体实现了，所以留下接口，需要我们自己去实现。<br/>
现在我们再继续看下去</p>

<!-- more -->


<hr />

<h2>什么是模板方法</h2>

<p>模板方法模式是类的行为模式。准备一个抽象类，将部分逻辑以具体方法以及具体构造函数的形式实现，然后声明一些抽象方法来迫使子类实现剩余的逻辑。不同的子类可以以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。这就是模板方法模式的用意。
比如定义一个操作中的算法的骨架，将步骤延迟到子类中。模板方法使得子类能够不去改变一个算法的结构即可重定义算法的某些特定步骤。</p>

<p>前面那个例子可以这样用图来描述：</p>

<p><img src="http://chenhaoxiang.github.io/images/20170514/222935.png"></p>

<p>简单明了，就是Step2自己去具体实现。</p>

<hr />

<h1>模板方法模式的代码实现</h1>

<h2>具体子类实现延迟步骤</h2>

<figure class='code'><figcaption><span>抽象基类 为所有子类提供一个算法框架</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">chenhaoxiang</span><span class="o">.</span><span class="na">template</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 抽象基类 为所有子类提供一个算法框架</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * 提神饮料</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * @author chenhaoxiang</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">RefreshBeverage</span> <span class="o">{</span>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * final阻止子类对方法的复写 制备饮料的模板方法 封装了所有子类共同遵循的算法框架</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">prepareBeverageTemplate</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// 步骤1:将水煮沸</span>
</span><span class='line'>      <span class="n">boilWater</span><span class="o">();</span>
</span><span class='line'>      <span class="c1">// 步骤2:泡制饮料</span>
</span><span class='line'>      <span class="n">brew</span><span class="o">();</span>
</span><span class='line'>      <span class="c1">// 步骤3:将饮料倒入杯中</span>
</span><span class='line'>      <span class="n">pourInCup</span><span class="o">();</span>
</span><span class='line'>      <span class="c1">// 步骤4: 加入调味料</span>
</span><span class='line'>      <span class="n">addCondiments</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * 基本方法:将水煮沸</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">boilWater</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;将水煮沸&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * 抽象的基本方法</span>
</span><span class='line'><span class="cm">  * 泡制饮料</span>
</span><span class='line'><span class="cm">  * 注意访问权限为protected</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">brew</span><span class="o">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * 通用方法</span>
</span><span class='line'><span class="cm">  * 将饮料倒入杯中</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">pourInCup</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;将饮料倒入杯子中&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * 抽象的基本方法</span>
</span><span class='line'><span class="cm">  * 加入调味料</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">addCondiments</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>具体子类,提供了咖啡制备的具体实现</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">chenhaoxiang</span><span class="o">.</span><span class="na">template</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 具体子类</span>
</span><span class='line'><span class="cm"> * 提供了咖啡制备的具体实现</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * @author chenhaoxiang</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Coffee</span> <span class="kd">extends</span> <span class="n">RefreshBeverage</span><span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">brew</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;冲泡咖啡...&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">addCondiments</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;加入咖啡调料...&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>具体子类,提供了制备茶的具体实现</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">chenhaoxiang</span><span class="o">.</span><span class="na">template</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 具体子类</span>
</span><span class='line'><span class="cm"> * 提供了制备茶的具体实现</span>
</span><span class='line'><span class="cm"> * @author chenhaoxiang</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Tea</span> <span class="kd">extends</span> <span class="n">RefreshBeverage</span><span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">brew</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;用80度的热水浸泡茶叶5分钟...&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">addCondiments</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;茶也要调味品？反正我不加.&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>测试类</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">chenhaoxiang</span><span class="o">.</span><span class="na">template</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RefreshBeverageTest</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;制备咖啡...&quot;</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">RefreshBeverage</span> <span class="n">beverage</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Coffee</span><span class="o">();</span>
</span><span class='line'>      <span class="n">beverage</span><span class="o">.</span><span class="na">prepareBeverageTemplate</span><span class="o">();</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;咖啡制作好了.&quot;</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;---------------------&quot;</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;开始制备茶.&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">RefreshBeverage</span> <span class="n">beverage2</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Tea</span><span class="o">();</span>
</span><span class='line'>      <span class="n">beverage2</span><span class="o">.</span><span class="na">prepareBeverageTemplate</span><span class="o">();</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;茶制作成功.&quot;</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      
</span><span class='line'>      
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>结果:</p>

<p><img src="http://chenhaoxiang.github.io/images/20170514/223014.png"></p>

<h2>钩子使子类更灵活</h2>

<p>看上面代码实现的步骤:
1、把水煮沸
2、泡饮料
3、把饮料倒入杯子
4、加调味品</p>

<p>上面的代码中，我们的子类是必须进行上面的4步的，因为那是在我们的模板方法中定义的。
如果我们不需要加调味品呢，这个时候就需要引入钩子方法的概念了。</p>

<p>对上面的代码进行变化</p>

<p>未写的是未进行修改的类</p>

<figure class='code'><figcaption><span>抽象基类 为所有子类提供一个算法框架</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">chenhaoxiang</span><span class="o">.</span><span class="na">template</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 抽象基类 为所有子类提供一个算法框架</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * 提神饮料</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * @author chenhaoxiang</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">RefreshBeverage</span> <span class="o">{</span>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * final阻止子类对方法的复写 制备饮料的模板方法 封装了所有子类共同遵循的算法框架</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">prepareBeverageTemplate</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// 步骤1:将水煮沸</span>
</span><span class='line'>      <span class="n">boilWater</span><span class="o">();</span>
</span><span class='line'>      <span class="c1">// 步骤2:泡制饮料</span>
</span><span class='line'>      <span class="n">brew</span><span class="o">();</span>
</span><span class='line'>      <span class="c1">// 步骤3:将饮料倒入杯中</span>
</span><span class='line'>      <span class="n">pourInCup</span><span class="o">();</span>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span> <span class="n">isCustomerWantsCondiments</span><span class="o">()</span> <span class="o">){</span>
</span><span class='line'>          <span class="c1">// 步骤4: 加入调味料</span>
</span><span class='line'>          <span class="n">addCondiments</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * 钩子(Hook)函数</span>
</span><span class='line'><span class="cm">  * 提供一个默认或空的实现</span>
</span><span class='line'><span class="cm">  * 具体的子类可以自行决定是否挂钩以及如何挂钩</span>
</span><span class='line'><span class="cm">  * (让子类选择性的可以钩或者不钩中实现)</span>
</span><span class='line'><span class="cm">  * 询问用户是否需要加入调料</span>
</span><span class='line'><span class="cm">  * @return</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">boolean</span> <span class="nf">isCustomerWantsCondiments</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * 基本方法:将水煮沸</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">boilWater</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;将水煮沸&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * 抽象的基本方法</span>
</span><span class='line'><span class="cm">  * 泡制饮料</span>
</span><span class='line'><span class="cm">  * 注意访问权限为protected</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">brew</span><span class="o">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * 通用方法</span>
</span><span class='line'><span class="cm">  * 将饮料倒入杯中</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">pourInCup</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;将饮料倒入杯子中&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * 抽象的基本方法</span>
</span><span class='line'><span class="cm">  * 加入调味料</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">addCondiments</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>提供了制备茶的具体实现</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">chenhaoxiang</span><span class="o">.</span><span class="na">template</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 具体子类</span>
</span><span class='line'><span class="cm"> * 提供了制备茶的具体实现</span>
</span><span class='line'><span class="cm"> * @author chenhaoxiang</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Tea</span> <span class="kd">extends</span> <span class="n">RefreshBeverage</span><span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">brew</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;用80度的热水浸泡茶叶5分钟...&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">addCondiments</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;茶也要调味品？反正我不加.&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * 子类通过覆盖的形式选择挂载钩子函数并且提供了一个符合自己需求的实现</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">boolean</span> <span class="nf">isCustomerWantsCondiments</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">false</span><span class="o">;</span><span class="c1">//返回false ，addCondiments方法不会执行</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>演示结果:</p>

<p><img src="http://chenhaoxiang.github.io/images/20170514/225603.png"></p>

<h1>总结</h1>

<p>抽象基类：<br/>
1、基本方法<br/>
我们知道所有的子类的实现细节都是一样的，具有共性的<br/>
可以直接在基类中定义实现<br/>
2、抽象方法<br/>
对于只知道原则而不知道细节的方法<br/>
3、可选钩子函数<br/>
只在基类中提供默认或者空的实现，由子类来选择是否使用钩子<br/>
4、Template方法<br/>
把前面的方法按照一定顺序来执行，写成模板方法。<br/>
注意，该方法一定要写成final！</p>

<p>也就是，你不能改变基类规定的基本原则，执行顺序！</p>

<p>具体子类：<br/>
1、实现基类中的抽象方法<br/>
执行子类的个性化行为<br/>
2、可选择覆盖钩子方法<br/>
可更加个性化的来影响局部行为</p>

<p>模板方法的适用场景：<br/>
1、算法或操作遵循相似的逻辑<br/>
例如上面代码样例中的茶和咖啡，对饮料的泡制具有相似的逻辑，所以可以抽象成模板方法，供所有子类使用！<br/>
2、重构时(把相同的代码抽取到父类中)<br/>
新功能加入时<br/>
3、重要、复杂的算法，核心算法设计为模板算法</p>

<p>模板方法模式的优点:<br/>
1、封装性好<br/>
2、复用性好<br/>
3、屏蔽细节<br/>
4、便于维护<br/>
优点具体就不说了，百度一下有很多解释。<br/>
模板方法模式的缺点:<br/>
1、继承<br/>
继承是面向对象的语言的一个核心的特性！<br/>
Java是单继承语言，也就是一个类只能有一个父类！<br/>
这种情况下，设想一个情况，在已有的历史系统中，这个系统的类有大量继承，如果我们想做一些重构，用模板方法的模式抽取共性，以及增加架构的弹性的时候，因为我们的类已经处于继承的某个继承的结构之中，如果想引用模板方法，可能就会遇到一些问题！</p>

<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/05/08/hello/"/>
    <updated>2017-05-08T13:17:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/05/08/hello</id>
    <content type="html"><![CDATA[<h1>浏览博客请移步我的CSDN</h1>

<p>现在因事情比较多，博客还在CSDN尚未搬过来。
今天有点时间，花费了一下午弄了下这个博客。
等哪天有时间了，受朋友的启发(他用Python写了个CSDN的博客导出工具)
，打算用Java写个CSDN的博客导出工具。</p>

<!--more-->


<p>CSDN网址在友情链接！</p>
]]></content>
  </entry>
  
</feed>
