<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[谙忆-人生之旅]]></title>
  <link href="http://chenhaoxiang.github.io/atom.xml" rel="self"/>
  <link href="http://chenhaoxiang.github.io/"/>
  <updated>2018-01-27T20:08:08+08:00</updated>
  <id>http://chenhaoxiang.github.io/</id>
  <author>
    <name><![CDATA[陈浩翔]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[【Shiro】Shiro从小白到大神(三)-权限认证(授权)]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/09/09/Shiro-went-from-white-to-great-3/"/>
    <updated>2017-09-09T18:27:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/09/09/Shiro-went-from-white-to-great-3</id>
    <content type="html"><![CDATA[<p>本节讲权限认证，也就是授权<br/>
基于角色的访问控制和基于权限的访问控制的小实例<br/>
以及注解式授权和JSP标签授权详解</p>

<!-- more -->


<hr />

<h1>权限认证</h1>

<h2>权限认证核心要素</h2>

<p>权限认证，也就是访问控制，即在应用中控制谁能访问哪些资源<br/>
在权限认证中，最核心的三个要素是：权限，角色和用户 (资源也算一个要素，但不是最核心的)<br/>
权限，即操作资源的 权限，比如访问某个页面，以及对某个模块的数据的添加，修改，删除，查看的权利(整合以后，其实就是一些对URL请求的权限)<br/>
角色，是权限的集合，一种角色可以包含多种权限(将权限赋给角色)  <br/>
用户，在Shiro中，代表访问系统的用户，即Subject(将角色赋给用户)<br/>
英文好的，可以去看官方文档介绍: <a href="http://shiro.apache.org/authorization.html">http://shiro.apache.org/authorization.html</a></p>

<h2>授权</h2>

<p><img src="https://i.imgur.com/UNEeLs2.png" alt="" /></p>

<h3>编程式授权(Programmatic Authorization)</h3>

<h4>&mdash;-基于角色的访问控制</h4>

<p>首先配置ini文件:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[users]
</span><span class='line'>;基于角色的访问控制的配置文件
</span><span class='line'>chx=123456,role1,role2
</span><span class='line'>;加角色，密码后面是拥有的角色
</span><span class='line'>jack=123456,role1</span></code></pre></td></tr></table></div></figure>


<p>测试类</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">cn</span><span class="o">.</span><span class="na">chenhaoxiang</span><span class="o">.</span><span class="na">shiro</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">cn.chenhaoxiang.common.ShiroUtils</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.shiro.subject.Subject</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 基于角色的访问控制</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RoleTest</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">RoleTest</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * hasRole(String roleName)  Returns true if the Subject is assigned the specified role, false otherwise.</span>
</span><span class='line'><span class="cm">     * hasRoles(List&lt;String&gt; roleNames) Returns a array of hasRole results corresponding to the indices in the method argument. Useful as a performance enhancement if many role checks need to be performed (e.g. when customizing a complex view)</span>
</span><span class='line'><span class="cm">     * hasAllRoles(Collection&lt;String&gt; roleNames) Returns true if the Subject is assigned all of the specified roles, false otherwise.</span>
</span><span class='line'><span class="cm">     * hasRole 判断是否拥有某个角色</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * hasRoles 判断拥有某个角色  返回的是boolean[]  用来高效判断对应角色拥有</span>
</span><span class='line'><span class="cm">     * hasAllRoles 判断拥有所有角色  拥有传入的全部角色的话，才返回true</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testHasRole</span><span class="o">(){</span>
</span><span class='line'>        <span class="n">Subject</span> <span class="n">subject</span> <span class="o">=</span> <span class="n">ShiroUtils</span><span class="o">.</span><span class="na">login</span><span class="o">(</span><span class="s">&quot;classpath:shiro_role.ini&quot;</span><span class="o">,</span><span class="s">&quot;chx&quot;</span><span class="o">,</span><span class="s">&quot;123456&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">subject</span><span class="o">.</span><span class="na">hasRole</span><span class="o">(</span><span class="s">&quot;role1&quot;</span><span class="o">)?</span><span class="s">&quot;有role1这个角色&quot;</span><span class="o">:</span><span class="s">&quot;没有role1这个角色&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">subject</span><span class="o">.</span><span class="na">hasRole</span><span class="o">(</span><span class="s">&quot;role2&quot;</span><span class="o">)?</span><span class="s">&quot;有role2这个角色&quot;</span><span class="o">:</span><span class="s">&quot;没有role2这个角色&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Subject</span> <span class="n">subject2</span> <span class="o">=</span> <span class="n">ShiroUtils</span><span class="o">.</span><span class="na">login</span><span class="o">(</span><span class="s">&quot;classpath:shiro_role.ini&quot;</span><span class="o">,</span><span class="s">&quot;jack&quot;</span><span class="o">,</span><span class="s">&quot;123456&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">subject2</span><span class="o">.</span><span class="na">hasRole</span><span class="o">(</span><span class="s">&quot;role1&quot;</span><span class="o">)?</span><span class="s">&quot;有role1这个角色&quot;</span><span class="o">:</span><span class="s">&quot;没有role1这个角色&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">subject2</span><span class="o">.</span><span class="na">hasRole</span><span class="o">(</span><span class="s">&quot;role2&quot;</span><span class="o">)?</span><span class="s">&quot;有role2这个角色&quot;</span><span class="o">:</span><span class="s">&quot;没有role2这个角色&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// hasRoles 判断拥有某个角色  返回的是boolean[]  用来高效判断对应角色拥有</span>
</span><span class='line'>        <span class="kt">boolean</span><span class="o">[]</span> <span class="n">results</span> <span class="o">=</span> <span class="n">subject</span><span class="o">.</span><span class="na">hasRoles</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&quot;role1&quot;</span><span class="o">,</span><span class="s">&quot;role2&quot;</span><span class="o">,</span><span class="s">&quot;role3&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">results</span><span class="o">[</span><span class="mi">0</span><span class="o">]?</span><span class="s">&quot;有role1这个角色&quot;</span><span class="o">:</span><span class="s">&quot;没有role1这个角色&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">results</span><span class="o">[</span><span class="mi">1</span><span class="o">]?</span><span class="s">&quot;有role2这个角色&quot;</span><span class="o">:</span><span class="s">&quot;没有role2这个角色&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">results</span><span class="o">[</span><span class="mi">2</span><span class="o">]?</span><span class="s">&quot;有role2这个角色&quot;</span><span class="o">:</span><span class="s">&quot;没有role3这个角色&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//hasAllRoles 判断拥有所有角色  拥有传入的全部角色的话，才返回true</span>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">subject</span><span class="o">.</span><span class="na">hasAllRoles</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&quot;role1&quot;</span><span class="o">,</span><span class="s">&quot;role2&quot;</span><span class="o">))?</span><span class="s">&quot;有role1和role2这两个个角色&quot;</span><span class="o">:</span><span class="s">&quot;role1，role2这两个角色不全部有&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">subject</span><span class="o">.</span><span class="na">logout</span><span class="o">();</span><span class="c1">//退出</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * CheckRole</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testCheckRole</span><span class="o">(){</span>
</span><span class='line'>        <span class="n">Subject</span> <span class="n">subject</span> <span class="o">=</span> <span class="n">ShiroUtils</span><span class="o">.</span><span class="na">login</span><span class="o">(</span><span class="s">&quot;classpath:shiro_role.ini&quot;</span><span class="o">,</span><span class="s">&quot;chx&quot;</span><span class="o">,</span><span class="s">&quot;123456&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">subject</span><span class="o">.</span><span class="na">checkRole</span><span class="o">(</span><span class="s">&quot;role1&quot;</span><span class="o">);</span><span class="c1">//没有返回值</span>
</span><span class='line'>        <span class="c1">//subject.checkRole(&quot;role3&quot;);//没有这个角色会抛出异常 //org.apache.shiro.authz.UnauthorizedException: Subject does not have role [role211]</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//checkRoles(Collection&lt;String&gt; roleNames)</span>
</span><span class='line'>        <span class="n">subject</span><span class="o">.</span><span class="na">checkRoles</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&quot;role1&quot;</span><span class="o">,</span><span class="s">&quot;role2&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="c1">//subject.checkRoles(Arrays.asList(&quot;role1&quot;,&quot;role2&quot;,&quot;role3&quot;));//没有全部角色会抛出异常 //org.apache.shiro.authz.UnauthorizedException: Subject does not have role [role3]</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//checkRoles(String... roleNames)和checkRoles(Collection&lt;String&gt; roleNames)意思一样，传入的参数类型不同</span>
</span><span class='line'>        <span class="n">subject</span><span class="o">.</span><span class="na">checkRoles</span><span class="o">(</span><span class="s">&quot;role1&quot;</span><span class="o">,</span><span class="s">&quot;role2&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">subject</span><span class="o">.</span><span class="na">logout</span><span class="o">();</span><span class="c1">//退出</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>演示结果自己跑一遍就出来啦</p>

<h4>&mdash;-基于权限的访问控制</h4>

<p>配置ini文件:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">[</span><span class="n">users</span><span class="o">]</span>
</span><span class='line'><span class="o">;</span><span class="n">基于权限的访问控制的配置文件</span>
</span><span class='line'><span class="n">chx</span><span class="o">=</span><span class="mi">123456</span><span class="o">,</span><span class="n">role1</span><span class="o">,</span><span class="n">role2</span>
</span><span class='line'><span class="o">;</span><span class="n">加角色</span><span class="err">，</span><span class="n">密码后面是拥有的角色</span>
</span><span class='line'><span class="n">jack</span><span class="o">=</span><span class="mi">123456</span><span class="o">,</span><span class="n">role1</span>
</span><span class='line'><span class="o">[</span><span class="n">roles</span><span class="o">]</span>
</span><span class='line'><span class="o">;</span><span class="n">不判断角色</span><span class="err">，</span><span class="n">直接判断权限</span>
</span><span class='line'><span class="n">role1</span><span class="o">=</span><span class="nl">user:</span><span class="n">select</span>
</span><span class='line'><span class="o">;</span><span class="n">role1拥有select权限</span> <span class="nl">这里的user:</span><span class="n">select权限名字是自己定义的</span>
</span><span class='line'><span class="n">role2</span><span class="o">=</span><span class="nl">user:</span><span class="n">add</span><span class="o">,</span><span class="nl">user:</span><span class="n">update</span><span class="o">,</span><span class="nl">user:</span><span class="n">delete</span>
</span><span class='line'><span class="o">;</span><span class="n">权限无非就是增删改查</span>
</span></code></pre></td></tr></table></div></figure>


<p>测试类:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">cn</span><span class="o">.</span><span class="na">chenhaoxiang</span><span class="o">.</span><span class="na">shiro</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">cn.chenhaoxiang.common.ShiroUtils</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.shiro.subject.Subject</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 基于权限的访问控制</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PermissionTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">PermissionTest</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * isPermitted(Permission p)  isPermitted(String str)  如果是拥有访问某个资源的权限,返回true  单个权限判断</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * isPermitted(String... var1);  分别判断多个权限  返回boolean[]</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * isPermittedAll(String... var1);  拥有所有权限才返回true</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testIsPermitted</span><span class="o">(){</span>
</span><span class='line'>        <span class="c1">//Subject subject = ShiroUtils.login(&quot;classpath:shiro_permission.ini&quot;,&quot;chx&quot;,&quot;123456&quot;);</span>
</span><span class='line'>        <span class="n">Subject</span> <span class="n">subject</span> <span class="o">=</span> <span class="n">ShiroUtils</span><span class="o">.</span><span class="na">login</span><span class="o">(</span><span class="s">&quot;classpath:shiro_permission.ini&quot;</span><span class="o">,</span><span class="s">&quot;jack&quot;</span><span class="o">,</span><span class="s">&quot;123456&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">subject</span><span class="o">.</span><span class="na">isPermitted</span><span class="o">(</span><span class="s">&quot;user:select&quot;</span><span class="o">)?</span><span class="s">&quot;有user:select权限&quot;</span><span class="o">:</span><span class="s">&quot;没有user:select权限&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">subject</span><span class="o">.</span><span class="na">isPermitted</span><span class="o">(</span><span class="s">&quot;user:update&quot;</span><span class="o">)?</span><span class="s">&quot;有user:update权限&quot;</span><span class="o">:</span><span class="s">&quot;没有user:update权限&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">results</span><span class="o">[]</span> <span class="o">=</span> <span class="n">subject</span><span class="o">.</span><span class="na">isPermitted</span><span class="o">(</span><span class="s">&quot;user:select&quot;</span><span class="o">,</span><span class="s">&quot;user:update&quot;</span><span class="o">,</span><span class="s">&quot;user:delete&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">results</span><span class="o">[</span><span class="mi">0</span><span class="o">]?</span><span class="s">&quot;有user:select权限&quot;</span><span class="o">:</span><span class="s">&quot;没有user:select权限&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">results</span><span class="o">[</span><span class="mi">1</span><span class="o">]?</span><span class="s">&quot;有user:update权限&quot;</span><span class="o">:</span><span class="s">&quot;没有user:update权限&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">results</span><span class="o">[</span><span class="mi">2</span><span class="o">]?</span><span class="s">&quot;有user:delete权限&quot;</span><span class="o">:</span><span class="s">&quot;没有user:delete权限&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">subject</span><span class="o">.</span><span class="na">isPermittedAll</span><span class="o">(</span><span class="s">&quot;user:select&quot;</span><span class="o">,</span><span class="s">&quot;user:update&quot;</span><span class="o">)?</span><span class="s">&quot;有user:select和user:update权限&quot;</span><span class="o">:</span><span class="s">&quot;user:select和user:update权限不全有&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">subject</span><span class="o">.</span><span class="na">logout</span><span class="o">();</span><span class="c1">//退出</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * checkPermission(String var1)  没有这一个权限就抛出异常</span>
</span><span class='line'><span class="cm">     * checkPermissions(String... var1)  没有这些权限就抛出异常</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testCheckPermitted</span><span class="o">(){</span>
</span><span class='line'>        <span class="c1">//Subject subject = ShiroUtils.login(&quot;classpath:shiro_permission.ini&quot;,&quot;chx&quot;,&quot;123456&quot;);</span>
</span><span class='line'>        <span class="n">Subject</span> <span class="n">subject</span> <span class="o">=</span> <span class="n">ShiroUtils</span><span class="o">.</span><span class="na">login</span><span class="o">(</span><span class="s">&quot;classpath:shiro_permission.ini&quot;</span><span class="o">,</span><span class="s">&quot;jack&quot;</span><span class="o">,</span><span class="s">&quot;123456&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">subject</span><span class="o">.</span><span class="na">checkPermission</span><span class="o">(</span><span class="s">&quot;user:select&quot;</span><span class="o">);</span><span class="c1">//检查是否有某个权限  没有权限则抛出异常</span>
</span><span class='line'>        <span class="c1">//subject.checkPermission(&quot;user:delete&quot;);//org.apache.shiro.authz.UnauthorizedException: Subject does not have permission [user:delete]</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">subject</span><span class="o">.</span><span class="na">checkPermissions</span><span class="o">(</span><span class="s">&quot;user:select&quot;</span><span class="o">,</span><span class="s">&quot;user:update&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">subject</span><span class="o">.</span><span class="na">logout</span><span class="o">();</span><span class="c1">//退出</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>讲了几个org.apache.shiro.subject.Subject的函数。<br/>
其实官方文档都有介绍的</p>

<h3>注解式授权</h3>

<p>更加详细的介绍可以去官网查看： <a href="http://shiro.apache.org/authorization.html">http://shiro.apache.org/authorization.html</a></p>

<p>首先你的Java版本5+才能集成shiro的注解</p>

<h4>RequiresAuthentication注解</h4>

<p>RequiresAuthentication注解需要在当前会话中对当前的Subject进行身份验证，以便访问或调用该注解的类/实例/方法。
也就是要求当前Subject已经在当前的Session中被验证通过才能被访问或调用<br/>
比如:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="nd">@RequiresAuthentication</span> <span class="c1">//判断验证有没有通过</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">updateAccount</span><span class="o">(</span><span class="n">Account</span> <span class="n">userAccount</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//this method will only be invoked by a</span>
</span><span class='line'>    <span class="c1">//Subject that is guaranteed authenticated</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>基本等同于下面的代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">updateAccount</span><span class="o">(</span><span class="n">Account</span> <span class="n">userAccount</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">SecurityUtils</span><span class="o">.</span><span class="na">getSubject</span><span class="o">().</span><span class="na">isAuthenticated</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">AuthorizationException</span><span class="o">(...);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Subject is guaranteed authenticated here</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>RequiresGuest注解</h4>

<p>要求当前的Subject是一个'guest'(游客),也就是说，必须是在之前的session中没有被验证或被记住才能被访问和调用<br/>
例如:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RequiresGuest</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">signUp</span><span class="o">(</span><span class="n">User</span> <span class="n">newUser</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//this method will only be invoked by a</span>
</span><span class='line'>    <span class="c1">//Subject that is unknown/anonymous</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>基本等价于下面的代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">signUp</span><span class="o">(</span><span class="n">User</span> <span class="n">newUser</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Subject</span> <span class="n">currentUser</span> <span class="o">=</span> <span class="n">SecurityUtils</span><span class="o">.</span><span class="na">getSubject</span><span class="o">();</span>
</span><span class='line'>    <span class="n">PrincipalCollection</span> <span class="n">principals</span> <span class="o">=</span> <span class="n">currentUser</span><span class="o">.</span><span class="na">getPrincipals</span><span class="o">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">principals</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">principals</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//known identity - not a guest:</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">AuthorizationException</span><span class="o">(...);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Subject is guaranteed to be a &#39;guest&#39; here</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>RequiresPermissions注解</h4>

<p>RequiresPermissions注解要求当前Subject允许一个或多个权限来执行带注释的方法。<br/>
也就是说，必须有这个权限才能访问<br/>
例如:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RequiresPermissions</span><span class="o">(</span><span class="s">&quot;account:create&quot;</span><span class="o">)</span> <span class="c1">//必须有account:create权限,多个权限之间用逗号隔开</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">createAccount</span><span class="o">(</span><span class="n">Account</span> <span class="n">account</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//this method will only be invoked by a Subject</span>
</span><span class='line'>    <span class="c1">//that is permitted to create an account</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>基本等价于：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">createAccount</span><span class="o">(</span><span class="n">Account</span> <span class="n">account</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Subject</span> <span class="n">currentUser</span> <span class="o">=</span> <span class="n">SecurityUtils</span><span class="o">.</span><span class="na">getSubject</span><span class="o">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">subject</span><span class="o">.</span><span class="na">isPermitted</span><span class="o">(</span><span class="s">&quot;account:create&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">AuthorizationException</span><span class="o">(...);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Subject is guaranteed to be permitted here</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>RequiresRoles注解</h4>

<p>RequiresRoles注解要求当前Subject拥有所有指定的角色。如果它们没有所有的角色，则不会执行该方法，并抛出AuthorizationException</p>

<p>例如:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RequiresRoles</span><span class="o">(</span><span class="s">&quot;administrator&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">deleteUser</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//this method will only be invoked by an administrator</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>基本等同于以下代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">deleteUser</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Subject</span> <span class="n">currentUser</span> <span class="o">=</span> <span class="n">SecurityUtils</span><span class="o">.</span><span class="na">getSubject</span><span class="o">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">subject</span><span class="o">.</span><span class="na">hasRole</span><span class="o">(</span><span class="s">&quot;administrator&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">AuthorizationException</span><span class="o">(...);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Subject is guaranteed to be an &#39;administrator&#39; here</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>RequiresUser注解</h4>

<p>RequiresUser注解 需要当前的Subject是一个应用程序的用户 才能被所注解的类/实例/方法访问或者调用。<br/>
一个"应用程序用户"被定义一个拥有已知身份，或在当前session中通过验证被确认，或者在之前的session中的"RememberMe"服务被记住<br/>
也就是说，必须是某个用户</p>

<p>例如:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RequiresUser</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">updateAccount</span><span class="o">(</span><span class="n">Account</span> <span class="n">account</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//this method will only be invoked by a &#39;user&#39;</span>
</span><span class='line'>    <span class="c1">//i.e. a Subject with a known identity</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
基本等同于下面代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">updateAccount</span><span class="o">(</span><span class="n">Account</span> <span class="n">account</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Subject</span> <span class="n">currentUser</span> <span class="o">=</span> <span class="n">SecurityUtils</span><span class="o">.</span><span class="na">getSubject</span><span class="o">();</span>
</span><span class='line'>    <span class="n">PrincipalCollection</span> <span class="n">principals</span> <span class="o">=</span> <span class="n">currentUser</span><span class="o">.</span><span class="na">getPrincipals</span><span class="o">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">principals</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">principals</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//no identity - they&#39;re anonymous, not allowed:</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">AuthorizationException</span><span class="o">(...);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Subject is guaranteed to have a known identity here</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>JSP标签授权</h3>

<p>必须添加shiro-web.jar</p>

<p>在jsp页面中引入:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='jsp'><span class='line'><span class="k">&lt;%@</span> <span class="n">taglib</span> <span class="n">prefix</span><span class="o">=</span><span class="s">&quot;shiro&quot;</span> <span class="n">uri</span><span class="o">=</span><span class="s">&quot;http://shiro.apache.org/tags&quot;</span> <span class="k">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h4>guest标签</h4>

<p>用户没有身份验证时显示相应信息，即游客访问信息<br/>
例如:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='jsp'><span class='line'><span class="nt">&lt;shiro:guest&gt;</span>
</span><span class='line'>    Hi there!  Please <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;login.jsp&quot;</span><span class="nt">&gt;</span>Login<span class="nt">&lt;/a&gt;</span> or <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;signup.jsp&quot;</span><span class="nt">&gt;</span>Signup<span class="nt">&lt;/a&gt;</span> today!
</span><span class='line'><span class="nt">&lt;/shiro:guest&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这里&lt;shiro:guest>标签内的文字，如果用户没有登录才会显示出来,也就是游客</p>

<h4>user标签</h4>

<p>只有在当前Subject被认为是“用户”时，用户标记才会显示其包装内容。<br/>
在这个上下文中，“用户”被定义为一个具有已知身份的主题，要么是成功的身份验证，要么是来自“记住我”的服务。  <br/>
注意，这个标记与经过身份验证的标记有语义上的不同，它比这个标记更加严格。<br/>
例如:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='jsp'><span class='line'><span class="nt">&lt;shiro:user&gt;</span>
</span><span class='line'>    Welcome back John!  Not John? Click <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;login.jsp&quot;</span><span class="nt">&gt;</span>here<span class="nt">&lt;a&gt;</span> to login.
</span><span class='line'><span class="nt">&lt;/shiro:user&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>user标签和guest标签逻辑相反</p>

<h4>authenticated标签</h4>

<p>仅当当前用户在当前会话中成功验证时才显示正文内容。<br/>
它比“用户”标签更具限制性。它在逻辑上与“notAuthenticated”标记相反。<br/>
只有在当前Subject在当前会话中成功验证的情况下，经过身份验证的标记才会显示其包装内容。<br/>
它是一个比用户更严格的标记，用来保证敏感工作流中的标识。也就是说，通过记住我登录的无法访问到！！！<br/>
例如:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='jsp'><span class='line'><span class="nt">&lt;shiro:authenticated&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;updateAccount.jsp&quot;</span><span class="nt">&gt;</span>Update your contact information<span class="nt">&lt;/a&gt;</span>.
</span><span class='line'><span class="nt">&lt;/shiro:authenticated&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>notAuthenticated标签</h4>

<p>如果当前Subject在当前会话中尚未成功验证，则未验证标记将显示其包装内容。<br/>
也就是用户没有身份验证通过，即没有调用Subject.login进行登录，包括记住我自动登录的也属于未进行身份验证这个notAuthenticated标签！</p>

<p>例如:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='jsp'><span class='line'><span class="nt">&lt;shiro:notAuthenticated&gt;</span>
</span><span class='line'>    Please <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;login.jsp&quot;</span><span class="nt">&gt;</span>login<span class="nt">&lt;/a&gt;</span> in order to update your credit card information.
</span><span class='line'><span class="nt">&lt;/shiro:notAuthenticated&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>principal标签</h4>

<p>输出用户信息，会调用toString()方法<br/>
例如:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='jsp'><span class='line'>Hello, <span class="nt">&lt;shiro:principal/&gt;</span>, how are you today?
</span></code></pre></td></tr></table></div></figure>


<p>相当于调用以下代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='jsp'><span class='line'>Hello, <span class="k">&lt;%=</span> <span class="n">SecurityUtils</span><span class="o">.</span><span class="na">getSubject</span><span class="o">().</span><span class="na">getPrincipal</span><span class="o">().</span><span class="na">toString</span><span class="o">()</span> <span class="k">%&gt;</span>, how are you today?
</span></code></pre></td></tr></table></div></figure>


<h5>通过类型</h5>

<p>如果你不想获取所有的，比如在用户名和用户id之间，我想获取用户id，可以通过下面这种方式:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='jsp'><span class='line'>User ID: <span class="nt">&lt;principal</span> <span class="na">type=</span><span class="s">&quot;java.lang.Integer&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>等同于:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='jsp'><span class='line'>User ID: <span class="k">&lt;%=</span> <span class="n">SecurityUtils</span><span class="o">.</span><span class="na">getSubject</span><span class="o">().</span><span class="na">getPrincipals</span><span class="o">().</span><span class="na">oneByType</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">toString</span><span class="o">()</span> <span class="k">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h5>通过属性名</h5>

<p>但是，当遇到复杂的情况时，上面的就不行了，毕竟可能不止一个Integer，这个时候就可以通过属性名了。<br/>
通过getter方法获取的<br/>
例如:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='jsp'><span class='line'>Hello, <span class="nt">&lt;shiro:principal</span> <span class="na">property=</span><span class="s">&quot;firstName&quot;</span><span class="nt">/&gt;</span>, how are you today?
</span></code></pre></td></tr></table></div></figure>


<p>相当于下面的代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='jsp'><span class='line'>Hello, <span class="k">&lt;%=</span> <span class="n">SecurityUtils</span><span class="o">.</span><span class="na">getSubject</span><span class="o">().</span><span class="na">getPrincipal</span><span class="o">().</span><span class="na">getFirstName</span><span class="o">().</span><span class="na">toString</span><span class="o">()</span> <span class="k">%&gt;</span>, how are you today?
</span></code></pre></td></tr></table></div></figure>


<p>或者说，可以结合type属性：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='jsp'><span class='line'>Hello, <span class="nt">&lt;shiro:principal</span> <span class="na">type=</span><span class="s">&quot;com.foo.User&quot;</span> <span class="na">property=</span><span class="s">&quot;firstName&quot;</span><span class="nt">/&gt;</span>, how are you today?
</span></code></pre></td></tr></table></div></figure>


<p>也就是如下代码的逻辑:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='jsp'><span class='line'>Hello, <span class="k">&lt;%=</span> <span class="n">SecurityUtils</span><span class="o">.</span><span class="na">getSubject</span><span class="o">().</span><span class="na">getPrincipals</span><span class="o">().</span><span class="na">oneByType</span><span class="o">(</span><span class="n">com</span><span class="o">.</span><span class="na">foo</span><span class="o">.</span><span class="na">User</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">getFirstName</span><span class="o">().</span><span class="na">toString</span><span class="o">()</span> <span class="k">%&gt;</span>, how are you today?
</span></code></pre></td></tr></table></div></figure>


<h4>hasRole标签</h4>

<p>只有当当前Subject被分配指定角色时，hasRole标记才会显示其包装内容</p>

<p>例如:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='jsp'><span class='line'><span class="nt">&lt;shiro:hasRole</span> <span class="na">name=</span><span class="s">&quot;administrator&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;admin.jsp&quot;</span><span class="nt">&gt;</span>Administer the system<span class="nt">&lt;/a&gt;</span>
</span><span class='line'><span class="nt">&lt;/shiro:hasRole&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>lacksRole标签</h4>

<p>如果当前Subject没有分配指定的角色，则将显示其包装内容。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='jsp'><span class='line'><span class="nt">&lt;shiro:lacksRole</span> <span class="na">name=</span><span class="s">&quot;administrator&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    Sorry, you are not allowed to administer the system.
</span><span class='line'><span class="nt">&lt;/shiro:lacksRole&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>lacksRole标签与hasRole标签的逻辑相反。</p>

<h4>hasAnyRole标签</h4>

<p>如果当前Subject从一个由逗号分隔的角色名称列表中具有了任一指定的角色，那么hasAnyRole标记将显示其包装内容。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='jsp'><span class='line'><span class="nt">&lt;shiro:hasAnyRoles</span> <span class="na">name=</span><span class="s">&quot;developer, project manager, administrator&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    You are either a developer, project manager, or administrator.
</span><span class='line'><span class="nt">&lt;/shiro:hasAnyRoles&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>只要有其中一个角色，即显示主体内容</p>

<h4>hasPermission标签</h4>

<p>如果当前Subject有权限则显示其包装的内容</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='jsp'><span class='line'><span class="nt">&lt;shiro:hasPermission</span> <span class="na">name=</span><span class="s">&quot;user:create&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;createUser.jsp&quot;</span><span class="nt">&gt;</span>Create a new User<span class="nt">&lt;/a&gt;</span>
</span><span class='line'><span class="nt">&lt;/shiro:hasPermission&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>lacksPermission标签</h4>

<p>如果当前Subject没有该权限则显示其包装的内容</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='jsp'><span class='line'><span class="nt">&lt;shiro:lacksPermission</span> <span class="na">name=</span><span class="s">&quot;user:delete&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    Sorry, you are not allowed to delete user accounts.
</span><span class='line'><span class="nt">&lt;/shiro:lacksPermission&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>lacksPermission标签与hasPermission标签的逻辑相反</p>

<h2>深入理解Apache Shiro的Permissions</h2>

<h3>通配符的权限</h3>

<h4>单个权限: 直接起一个字符串名即可</h4>

<p>例如: queryPrinter权限-查询权限</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">subject</span><span class="o">.</span><span class="na">isPermitted</span><span class="o">(</span><span class="s">&quot;queryPrinter&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>基本等同于:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">subject</span><span class="o">.</span><span class="na">isPermitted</span><span class="o">(</span> <span class="k">new</span> <span class="nf">WildcardPermission</span><span class="o">(</span><span class="s">&quot;queryPrinter&quot;</span><span class="o">)</span> <span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>第二种方式基本不用，用第一种方式即可</p>

<h4>多个权限: 通配符权限支持多个级别或部分的概念。</h4>

<p>下面使用":&ldquo;用于分隔权限字符串下一部分的特殊字符。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nl">printer:</span><span class="n">query</span>
</span><span class='line'><span class="nl">printer:</span><span class="n">print</span>
</span><span class='line'><span class="nl">printer:</span><span class="n">manage</span>
</span></code></pre></td></tr></table></div></figure>


<p>即可配置多个权限</p>

<p>也可以用多值来配置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nl">printer:</span><span class="n">print</span><span class="o">,</span><span class="n">query</span>
</span></code></pre></td></tr></table></div></figure>


<p>验证查询权限:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">subject</span><span class="o">.</span><span class="na">isPermitted</span><span class="o">(</span><span class="s">&quot;printer:query&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>单个资源的所有权限</h4>

<p>比如我们有这些权限:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nl">printer:</span><span class="n">query</span><span class="o">,</span><span class="n">print</span><span class="o">,</span><span class="n">manage</span>
</span></code></pre></td></tr></table></div></figure>


<p>相当于:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nl">printer:</span><span class="o">*</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用第二种方法使用通配符比显式地列出动作要更好，因为如果以后向应用程序添加了一个新操作，则不需要更新在该部分中使用通配符的权限。</p>

<h4>所有资源的某个权限</h4>

<p>还可以在通配符权限字符串的任何部分使用通配符令牌</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">*:</span><span class="n">view</span>
</span></code></pre></td></tr></table></div></figure>


<p>所有资源的view权限<br/>
也就是说对“foo:view”(或其他的:view)的任何权限检查将返回true</p>

<h4>实例级别的权限控制</h4>

<p>通配符权限的另一个常见用法是建立实例级访问控制列表。<br/>
在这个权限中，您将使用三个部分——第一个是域，第二个是动作，第三个是被执行的实例(标识)。</p>

<h4>单个实例的单个权限</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nl">printer:query:</span><span class="n">lp7200</span>
</span><span class='line'><span class="nl">printer:print:</span><span class="n">epsoncolor</span>
</span></code></pre></td></tr></table></div></figure>


<p>比如你拥有printer的query权限，打印机的id为lp7200，也就是拥有这类printer的query权限</p>

<p>如果您将这些权限授予用户，那么它们就可以在特定的实例上执行特定的行为。然后你可以在代码中做一个检查:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span> <span class="n">SecurityUtils</span><span class="o">.</span><span class="na">getSubject</span><span class="o">().</span><span class="na">isPermitted</span><span class="o">(</span><span class="s">&quot;printer:query:lp7200&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Return the current jobs on printer lp7200 }</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>所有实例的单个权限</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nl">printer:print:</span><span class="o">*</span>
</span></code></pre></td></tr></table></div></figure>


<p>也就是说，具有所有printer的print权限，相当于前面的单个资源的多个权限</p>

<h4>所有实例的所有权限</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nl">printer:</span><span class="o">*:*</span>
</span></code></pre></td></tr></table></div></figure>


<h4>单个实例的所有权限</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nl">printer:</span><span class="o">*:</span><span class="n">lp7200</span>
</span></code></pre></td></tr></table></div></figure>


<h4>单个实例的多个权限</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nl">printer:</span><span class="n">query</span><span class="o">,</span><span class="nl">print:</span><span class="n">lp7200</span>
</span></code></pre></td></tr></table></div></figure>


<p>query和print之间用逗号隔开<br/>
在实际开发中，基本上用不到实例级别的权限控制</p>

<p>关于权限分配的最后一件事是:末尾丢失的部分意味着用户可以访问与该部分对应的所有值。换句话说,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nl">printer:</span><span class="n">print</span>
</span><span class='line'><span class="nl">就相当于:</span>
</span><span class='line'><span class="nl">printer:print:</span><span class="o">*</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">printer</span>
</span><span class='line'><span class="n">单个权限相当于</span>
</span><span class='line'><span class="nl">printer:</span><span class="o">*:*</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是注意！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nl">printer:</span><span class="n">lp7200</span>
</span><span class='line'><span class="n">和</span>
</span><span class='line'><span class="nl">printer:</span><span class="o">*:</span><span class="n">lp7200</span>
</span><span class='line'><span class="n">是不同的</span><span class="err">！！！</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为这不是末尾的*</p>

<h3>检查权限</h3>

<p>虽然权限分配使用通配符构造相当多(“printer:*”=打印到任何printer)，但在运行时的权限检查应该始终基于可能的最特定的权限字符串。<br/>
比如:如果用户有一个用户界面，他们想要打印一个文档到lp7200打印机，你应该检查用户是否允许执行这个代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span> <span class="n">SecurityUtils</span><span class="o">.</span><span class="na">getSubject</span><span class="o">().</span><span class="na">isPermitted</span><span class="o">(</span><span class="s">&quot;printer:print:lp7200&quot;</span><span class="o">)</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//print the document to the lp7200 printer }</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个检查非常具体，并且明确地反映了用户在那个时候正在尝试做什么。<br/>
但是，如下代码是不对的:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span> <span class="n">SecurityUtils</span><span class="o">.</span><span class="na">getSubject</span><span class="o">().</span><span class="na">isPermitted</span><span class="o">(</span><span class="s">&quot;printer:print&quot;</span><span class="o">)</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//print the document }</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为第二个示例说“您必须能够打印到任何打印机，以便执行以下代码块”。但请记住，“printer:print”等同于“printer:print:*”!</p>

<p>因此，这是一个不正确的检查。<br/>
如果当前用户没有能力打印到任何打印机，但他们确实有打印的能力，比如lp7200和epsoncolor打印机。<br/>
然而，上面的第二个例子永远不会允许他们打印到lp7200打印机，即使他们已经获得了这种能力!</p>

<p>因此，经验法则是在执行权限检查时使用最特殊的权限字符串。<br/>
当然，如果您真的只想执行代码块，如果用户被允许打印到任何打印机(可能)，那么第二个方法可能是应用程序中的另一个有效的检查。<br/>
您的应用程序将决定什么检查是有意义的，但是一般来说，越具体越好。</p>

<p>为什么运行时权限检查应该尽可能具体，但是权限分配可以更通用一些呢?<br/>
这是因为权限检查是由隐含逻辑计算的，而不是平等检查。</p>

<p>也就是说，如果用户被分配给"user:<em>&ldquo;权限，这意味着用户可以执行"user:view"操作。字符串"user:</em>"显然不等于"user:view"，但前者暗示后者。"user:*"描述了由"user:view"定义的功能的超集。</p>

<p>为了支持隐含规则，所有权限都被翻译到实现org.apache.shiro.authz的对象实例的权限接口中。<br/>
这就是说，隐含逻辑可以在运行时执行，而且隐含逻辑通常比简单的字符串等式检查更复杂。<br/>
本文档中描述的所有通配符行为实际上都是由org.apache.shiro.authz.permission.WildcardPermission类实现</p>

<p>下面是一些通配符的权限字符串，它显示了访问的含义:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nl">user:</span><span class="o">*</span>
</span></code></pre></td></tr></table></div></figure>


<p>暗指还能删除用户的能力:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nl">user:</span><span class="n">delete</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nl">user:</span><span class="o">*:</span><span class="mi">12345</span>
</span></code></pre></td></tr></table></div></figure>


<p>也就是说，还可以使用实例12345更新用户帐户:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nl">user:update:</span><span class="mi">12345</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">printer</span>
</span><span class='line'><span class="n">暗示了打印机的任何功能</span><span class="err">，</span><span class="nl">比如:</span>
</span><span class='line'><span class="nl">printer:</span><span class="n">print</span>
</span></code></pre></td></tr></table></div></figure>


<h2>授权流程</h2>

<p><img src="https://i.imgur.com/Pm5Z7DE.png" alt="" /></p>

<p>授权其实就是查看有没有权限，有就授权给它</p>

<p>授权步骤:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Step</span> <span class="mi">1</span><span class="o">:</span> <span class="n">Application</span> <span class="n">or</span> <span class="n">framework</span> <span class="n">code</span> <span class="n">invokes</span> <span class="n">any</span> <span class="n">of</span> <span class="n">the</span> <span class="n">Subject</span> <span class="n">hasRole</span><span class="o">*,</span> <span class="n">checkRole</span><span class="o">*,</span> <span class="n">isPermitted</span><span class="o">*,</span> <span class="n">or</span> <span class="n">checkPermission</span><span class="o">*</span> <span class="n">method</span> <span class="n">variants</span><span class="o">,</span> <span class="n">passing</span> <span class="n">in</span> <span class="n">whatever</span> <span class="n">permission</span> <span class="n">or</span> <span class="n">role</span> <span class="n">representation</span> <span class="n">is</span> <span class="n">required</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">Step</span> <span class="mi">2</span><span class="o">:</span> <span class="n">The</span> <span class="n">Subject</span> <span class="n">instance</span><span class="o">,</span> <span class="n">typically</span> <span class="n">a</span> <span class="nf">DelegatingSubject</span> <span class="o">(</span><span class="n">or</span> <span class="n">a</span> <span class="n">subclass</span><span class="o">)</span> <span class="n">delegates</span> <span class="n">to</span> <span class="n">the</span> <span class="n">application</span><span class="err">’</span><span class="n">s</span> <span class="n">SecurityManager</span> <span class="n">by</span> <span class="n">calling</span> <span class="n">the</span> <span class="n">securityManager</span><span class="err">’</span><span class="n">s</span> <span class="n">nearly</span> <span class="n">identical</span> <span class="n">respective</span> <span class="n">hasRole</span><span class="o">*,</span> <span class="n">checkRole</span><span class="o">*,</span> <span class="n">isPermitted</span><span class="o">*,</span> <span class="n">or</span> <span class="n">checkPermission</span><span class="o">*</span> <span class="n">method</span> <span class="nf">variants</span> <span class="o">(</span><span class="n">the</span> <span class="n">securityManager</span> <span class="kd">implements</span> <span class="n">the</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">shiro</span><span class="o">.</span><span class="na">authz</span><span class="o">.</span><span class="na">Authorizer</span> <span class="n">interface</span><span class="o">,</span> <span class="n">which</span> <span class="n">defines</span> <span class="n">all</span> <span class="n">Subject</span><span class="o">-</span><span class="n">specific</span> <span class="n">authorization</span> <span class="n">methods</span><span class="o">).</span>
</span><span class='line'>
</span><span class='line'><span class="n">Step</span> <span class="mi">3</span><span class="o">:</span> <span class="n">The</span> <span class="n">SecurityManager</span><span class="o">,</span> <span class="n">being</span> <span class="n">a</span> <span class="n">basic</span> <span class="err">‘</span><span class="n">umbrella</span><span class="err">’</span> <span class="n">component</span><span class="o">,</span> <span class="n">relays</span><span class="o">/</span><span class="n">delegates</span> <span class="n">to</span> <span class="n">its</span> <span class="n">internal</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">shiro</span><span class="o">.</span><span class="na">authz</span><span class="o">.</span><span class="na">Authorizer</span> <span class="n">instance</span> <span class="n">by</span> <span class="n">calling</span> <span class="n">the</span> <span class="n">authorizer</span><span class="err">’</span><span class="n">s</span> <span class="n">respective</span> <span class="n">hasRole</span><span class="o">*,</span> <span class="n">checkRole</span><span class="o">*,</span> <span class="n">isPermitted</span><span class="o">*,</span> <span class="n">or</span> <span class="n">checkPermission</span><span class="o">*</span> <span class="n">method</span><span class="o">.</span> <span class="n">The</span> <span class="n">authorizer</span> <span class="n">instance</span> <span class="n">is</span> <span class="n">by</span> <span class="k">default</span> <span class="n">a</span> <span class="n">ModularRealmAuthorizer</span> <span class="n">instance</span><span class="o">,</span> <span class="n">which</span> <span class="n">supports</span> <span class="n">coordinating</span> <span class="n">one</span> <span class="n">or</span> <span class="n">more</span> <span class="n">Realm</span> <span class="n">instances</span> <span class="n">during</span> <span class="n">any</span> <span class="n">authorization</span> <span class="n">operation</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">Step</span> <span class="mi">4</span><span class="o">:</span> <span class="n">Each</span> <span class="n">configured</span> <span class="n">Realm</span> <span class="n">is</span> <span class="n">checked</span> <span class="n">to</span> <span class="n">see</span> <span class="k">if</span> <span class="n">it</span> <span class="kd">implements</span> <span class="n">the</span> <span class="n">same</span> <span class="n">Authorizer</span> <span class="n">interface</span><span class="o">.</span> <span class="n">If</span> <span class="n">so</span><span class="o">,</span> <span class="n">the</span> <span class="n">Realm</span><span class="err">’</span><span class="n">s</span> <span class="n">own</span> <span class="n">respective</span> <span class="n">hasRole</span><span class="o">*,</span> <span class="n">checkRole</span><span class="o">*,</span> <span class="n">isPermitted</span><span class="o">*,</span> <span class="n">or</span> <span class="n">checkPermission</span><span class="o">*</span> <span class="n">method</span> <span class="n">is</span> <span class="n">called</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>有兴趣的可以去官网看看:<a href="http://shiro.apache.org/authorization.html">http://shiro.apache.org/authorization.html</a></p>

<h1>源代码下载地址：</h1>

<blockquote cite='陈浩翔'>
GITHUB源码下载地址:<strong>【<a href='https://github.com/chenhaoxiang/Shiro/tree/master/20170909/code/Shiro3' target='_blank'>点我进行下载</a>】</strong>
</blockquote>


<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【Shiro】Shiro从小白到大神(二)-Subject认证结合MySQL]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/09/08/Shiro-went-from-white-to-great-2/"/>
    <updated>2017-09-08T11:38:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/09/08/Shiro-went-from-white-to-great-2</id>
    <content type="html"><![CDATA[<p>上一节博客讲的文本数据验证，基本不会在项目中用到，只是方便用来学习和测试<br/>
在本节，进行简单的数据库安全验证实例</p>

<!-- more -->


<hr />

<h1>Subject认证主体</h1>

<p>Subject认证主体包含两个信息:<br/>
Principals: 身份，可以是用户名，邮件，手机号码等等，只要能用来标识一个登陆主体身份的东西都可以 <br/>
Credentials: 凭证(比如你说你叫张三，你凭什么说叫张三，你这个时候会拿出身份证说你就是叫张三，这个凭证和身份证差不多)，常见有密码，数字证书等等</p>

<h1>认证流程</h1>

<p><img src="https://i.imgur.com/uzTsCic.png" alt="" /><br/>
细节可以自己去官网链接查看: <a href="http://shiro.apache.org/authentication.html">http://shiro.apache.org/authentication.html</a><br/>
1.身份凭证登录:.login(token)<br/>
2.SecurityManager - 管理者<br/>
3.4.涉及安全数据。在这里涉及到了Realm(意思是域)，Shiro从Realm中获取验证数据(或者叫安全数据)；<br/>
Realm有很多种类，例如常见的jdbc realm,jndi realm,text realm(上节的博客就是text Realm).<br/>
我们可以去Shiro的源码查看:<br/>
<img src="https://i.imgur.com/BijTwuc.png" alt="" /><br/>
可以看到还是有比较多的。<br/>
本节讲解jdbc Realm。</p>

<h1>实例</h1>

<p>既然是数据库操作，首先当然是去建数据库和表啦</p>

<figure class='code'><figcaption><span>sql语句</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">SQLyog Ultimate v12.3.1 (64 bit)</span>
</span><span class='line'><span class="cm">MySQL - 5.7.19-log : Database - db_shiro</span>
</span><span class='line'><span class="cm">*********************************************************************</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/*!40101 SET NAMES utf8 */</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*!40101 SET SQL_MODE=&#39;&#39;*/</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */</span><span class="p">;</span>
</span><span class='line'><span class="cm">/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */</span><span class="p">;</span>
</span><span class='line'><span class="cm">/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=&#39;NO_AUTO_VALUE_ON_ZERO&#39; */</span><span class="p">;</span>
</span><span class='line'><span class="cm">/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */</span><span class="p">;</span>
</span><span class='line'><span class="k">CREATE</span> <span class="k">DATABASE</span> <span class="cm">/*!32312 IF NOT EXISTS*/</span><span class="o">`</span><span class="n">db_shiro</span><span class="o">`</span> <span class="cm">/*!40100 DEFAULT CHARACTER SET utf8 */</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">USE</span> <span class="o">`</span><span class="n">db_shiro</span><span class="o">`</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*Table structure for table `users` */</span>
</span><span class='line'>
</span><span class='line'><span class="k">DROP</span> <span class="k">TABLE</span> <span class="n">IF</span> <span class="k">EXISTS</span> <span class="o">`</span><span class="n">users</span><span class="o">`</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="o">`</span><span class="n">users</span><span class="o">`</span> <span class="p">(</span>
</span><span class='line'>  <span class="o">`</span><span class="n">id</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="n">AUTO_INCREMENT</span><span class="p">,</span>
</span><span class='line'>  <span class="o">`</span><span class="n">username</span><span class="o">`</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span> <span class="k">DEFAULT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="o">`</span><span class="n">password</span><span class="o">`</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span> <span class="k">DEFAULT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="p">(</span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span> <span class="n">ENGINE</span><span class="o">=</span><span class="n">InnoDB</span> <span class="n">AUTO_INCREMENT</span><span class="o">=</span><span class="mi">3</span> <span class="k">DEFAULT</span> <span class="n">CHARSET</span><span class="o">=</span><span class="n">utf8</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*Data for the table `users` */</span>
</span><span class='line'>
</span><span class='line'><span class="k">insert</span>  <span class="k">into</span> <span class="o">`</span><span class="n">users</span><span class="o">`</span><span class="p">(</span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="p">,</span><span class="o">`</span><span class="n">username</span><span class="o">`</span><span class="p">,</span><span class="o">`</span><span class="n">password</span><span class="o">`</span><span class="p">)</span> <span class="k">values</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="s1">&#39;chx&#39;</span><span class="p">,</span><span class="s1">&#39;123456&#39;</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="s1">&#39;jack&#39;</span><span class="p">,</span><span class="s1">&#39;12345&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*!40101 SET SQL_MODE=@OLD_SQL_MODE */</span><span class="p">;</span>
</span><span class='line'><span class="cm">/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */</span><span class="p">;</span>
</span><span class='line'><span class="cm">/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */</span><span class="p">;</span>
</span><span class='line'><span class="cm">/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>直接拷贝进数据库运行即可(数据库文件在项目src\sql目录下)<br/>
<strong>注意事项：</strong><br/>
<strong>表名一定要是: users</strong><br/>
<strong>用户名列名必须是: userName(大小写不区分)</strong>  **</p>

<p>jdbc_realm.ini配置文件</p>

<figure class='code'><figcaption><span>jdbc_realm.ini配置文件</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[main]</span>
</span><span class='line'><span class="na">jdbcRealm</span><span class="o">=</span><span class="s">org.apache.shiro.realm.jdbc.JdbcRealm</span>
</span><span class='line'><span class="c1">;定义JdbcRealm实例-固定语法</span>
</span><span class='line'><span class="na">dataSource</span><span class="o">=</span><span class="s">com.mchange.v2.c3p0.ComboPooledDataSource</span>
</span><span class='line'><span class="c1">;数据库链接池-查看JdbcRealm类的源码可以看到需要dataSource数据源 在om.xml导入c3p0的jar包</span>
</span><span class='line'><span class="na">dataSource.driverClass</span><span class="o">=</span><span class="s">com.mysql.jdbc.Driver</span>
</span><span class='line'><span class="c1">;设置dataSource的jdbc驱动包 - 相当于dataSource调用了setriverClass</span>
</span><span class='line'><span class="na">dataSource.jdbcUrl</span><span class="o">=</span><span class="s">jdbc:mysql://localhost:3306/db_shiroD</span>
</span><span class='line'><span class="c1">;数据库连接地址</span>
</span><span class='line'><span class="na">dataSource.user</span><span class="o">=</span><span class="s">root</span>
</span><span class='line'><span class="c1">;数据库账号</span>
</span><span class='line'><span class="na">dataSource.password</span><span class="o">=</span><span class="s">123456</span>
</span><span class='line'><span class="c1">;数据库密码</span>
</span><span class='line'><span class="na">jdbcRealm.dataSource</span><span class="o">=</span><span class="s">$dataSource</span>
</span><span class='line'><span class="c1">;为jdbcRealm赋值dataSource,jdbcRealm调用set</span>
</span><span class='line'><span class="na">securityManager.realms</span><span class="o">=</span><span class="s">$jdbcRealm</span>
</span><span class='line'><span class="c1">;这个realms可以有多个，多个之间用英文逗号隔开</span>
</span></code></pre></td></tr></table></div></figure>


<p>&ldquo;;"为ini文件的注释</p>

<p>测试类:</p>

<figure class='code'><figcaption><span>JdbcRealmTest.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">cn</span><span class="o">.</span><span class="na">chenhaoxiang</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.shiro.SecurityUtils</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.shiro.authc.AuthenticationException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.shiro.authc.UsernamePasswordToken</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.shiro.config.IniSecurityManagerFactory</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.shiro.mgt.SecurityManager</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.shiro.subject.Subject</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.shiro.util.Factory</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JdbcRealmTest</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">JdbcRealmTest</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//IniSecurityManagerFactory方法在1.4.0中被注解标志为不建议使用</span>
</span><span class='line'>        <span class="c1">//读取配置文件，初始化SecurityManager工厂</span>
</span><span class='line'>        <span class="n">Factory</span><span class="o">&lt;</span><span class="n">SecurityManager</span><span class="o">&gt;</span> <span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">IniSecurityManagerFactory</span><span class="o">(</span><span class="s">&quot;classpath:jdbc_realm.ini&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">//获取securityManager 实例</span>
</span><span class='line'>        <span class="n">SecurityManager</span> <span class="n">securityManager</span><span class="o">=</span><span class="n">factory</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
</span><span class='line'>        <span class="c1">//把securityManager实例绑定到SecurityUtils</span>
</span><span class='line'>        <span class="n">SecurityUtils</span><span class="o">.</span><span class="na">setSecurityManager</span><span class="o">(</span><span class="n">securityManager</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">//得到当前执行的用户</span>
</span><span class='line'>        <span class="n">Subject</span> <span class="n">subject</span> <span class="o">=</span>  <span class="n">SecurityUtils</span><span class="o">.</span><span class="na">getSubject</span><span class="o">();</span><span class="c1">//认证实体，当前进来的用户</span>
</span><span class='line'>        <span class="c1">//创建token令牌，用户名/密码</span>
</span><span class='line'>        <span class="n">UsernamePasswordToken</span> <span class="n">token</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">UsernamePasswordToken</span><span class="o">(</span><span class="s">&quot;jack&quot;</span><span class="o">,</span><span class="s">&quot;12345&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">//身份认证</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">subject</span><span class="o">.</span><span class="na">login</span><span class="o">(</span><span class="n">token</span><span class="o">);</span>
</span><span class='line'>            <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;登录成功！&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">AuthenticationException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;登录失败！&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="c1">//登出</span>
</span><span class='line'>        <span class="n">subject</span><span class="o">.</span><span class="na">logout</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://i.imgur.com/kFIvVI7.png" alt="" /><br/>
如果验证失败会报异常，可以自己测试</p>

<h1>源代码下载地址：</h1>

<blockquote cite='陈浩翔'>
GITHUB源码下载地址:<strong>【<a href='https://github.com/chenhaoxiang/Shiro/tree/master/20170908/code/Shiro2' target='_blank'>点我进行下载</a>】</strong>
</blockquote>


<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【Shiro】Shiro从小白到大神(一)-Shiro入门]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/09/07/Shiro-went-from-white-to-great-1/"/>
    <updated>2017-09-07T19:38:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/09/07/Shiro-went-from-white-to-great-1</id>
    <content type="html"><![CDATA[<p>本系列是我在学习Shiro的路上的笔记，第一篇是属于非常入门级别的。<br/>
首先是介绍了下shiro，然后进行了一个小例子进行实际的操作<br/>
本节操作不涉及数据库，只是文本字符操作认证</p>

<!-- more -->


<hr />

<h1>Shiro简介:</h1>

<p>百度百科上的介绍:<br/>
Apache Shiro（日语“堡垒（Castle）”的意思）是一个强大易用的Java安全框架，提供了认证、授权、加密和会话管理功能，可为任何应用提供安全保障 - 从命令行应用、移动应用到大型网络及企业应用。<br/>
Shiro为解决下列问题（我喜欢称它们为应用安全的四要素）提供了保护应用的API：<br/>
认证 - 用户身份识别，常被称为用户“登录”；<br/>
授权 - 访问控制；<br/>
密码加密 - 保护或隐藏数据防止被偷窥；<br/>
会话管理 - 每用户相关的时间敏感的状态。<br/>
Shiro还支持一些辅助特性，如Web应用安全、单元测试和多线程，它们的存在强化了上面提到的四个要素。</p>

<p>Apache Shiro官网的介绍链接:<a href="http://shiro.apache.org/introduction.html">http://shiro.apache.org/introduction.html</a></p>

<p>Shiro targets what the Shiro development team calls “the four cornerstones of application security” - Authentication(身份认证), Authorization(权限控制), Session Management(Session管理), and Cryptography(加密):</p>

<p>Authentication: Sometimes referred to as ‘login’, this is the act of proving a user is who they say they are.<br/>
Authorization: The process of access control, i.e. determining ‘who’ has access to ‘what’.<br/>
Session Management: Managing user-specific sessions, even in non-web or EJB applications.<br/>
Cryptography: Keeping data secure using cryptographic algorithms while still being easy to use.<br/>
前面四个是核心的。<br/>
还具有Web支持，缓存，并发，伪装，"记住我"等</p>

<p>本节实例使用Maven，如不熟悉Maven的，建议先去学习Maven</p>

<h1>Shiro实例-模拟最简单的HelloWord</h1>

<p>引入Shiro的Jar包:</p>

<figure class='code'><figcaption><span>pom.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'> <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>       <span class="nt">&lt;groupId&gt;</span>org.apache.shiro<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>       <span class="nt">&lt;artifactId&gt;</span>shiro-core<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>       <span class="nt">&lt;version&gt;</span>1.3.2<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>配置配置文件(放在resource文件下):<br/>
最简单的账户密码形式</p>

<figure class='code'><figcaption><span>shiro.ini</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[users]</span>
</span><span class='line'><span class="na">chx</span><span class="o">=</span><span class="s">123456</span>
</span><span class='line'><span class="na">jack</span><span class="o">=</span><span class="s">12345</span>
</span></code></pre></td></tr></table></div></figure>


<p>Java-HelloWord类</p>

<figure class='code'><figcaption><span>HelloWord类</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">cn</span><span class="o">.</span><span class="na">chenhaoxiang</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.shiro.SecurityUtils</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.shiro.authc.AuthenticationException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.shiro.authc.UsernamePasswordToken</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.shiro.config.IniSecurityManagerFactory</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.shiro.mgt.SecurityManager</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.shiro.subject.Subject</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.shiro.util.Factory</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWord</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">HelloWord</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//IniSecurityManagerFactory方法在1.4.0中被注解标志为不建议使用</span>
</span><span class='line'>        <span class="c1">//读取配置文件，初始化SecurityManager工厂</span>
</span><span class='line'>        <span class="n">Factory</span><span class="o">&lt;</span><span class="n">SecurityManager</span><span class="o">&gt;</span> <span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">IniSecurityManagerFactory</span><span class="o">(</span><span class="s">&quot;classpath:shiro.ini&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">//获取securityManager 实例</span>
</span><span class='line'>        <span class="n">SecurityManager</span> <span class="n">securityManager</span><span class="o">=</span><span class="n">factory</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
</span><span class='line'>        <span class="c1">//把securityManager实例绑定到SecurityUtils</span>
</span><span class='line'>        <span class="n">SecurityUtils</span><span class="o">.</span><span class="na">setSecurityManager</span><span class="o">(</span><span class="n">securityManager</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">//得到当前执行的用户</span>
</span><span class='line'>        <span class="n">Subject</span> <span class="n">subject</span> <span class="o">=</span>  <span class="n">SecurityUtils</span><span class="o">.</span><span class="na">getSubject</span><span class="o">();</span><span class="c1">//认证实体，当前进来的用户</span>
</span><span class='line'>        <span class="c1">//创建token令牌，用户名/密码</span>
</span><span class='line'>        <span class="n">UsernamePasswordToken</span> <span class="n">token</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">UsernamePasswordToken</span><span class="o">(</span><span class="s">&quot;jack&quot;</span><span class="o">,</span><span class="s">&quot;12345&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">//身份认证</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">subject</span><span class="o">.</span><span class="na">login</span><span class="o">(</span><span class="n">token</span><span class="o">);</span>
</span><span class='line'>            <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;登录成功！&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">AuthenticationException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="c1">//login的接口函数  void login(AuthenticationToken var1) throws AuthenticationException;所以直接抓AuthenticationException异常即可</span>
</span><span class='line'><span class="c1">//身份认证失败即抛出此异常</span>
</span><span class='line'>            <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;登录失败！&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="c1">//登出</span>
</span><span class='line'>        <span class="n">subject</span><span class="o">.</span><span class="na">logout</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>源代码下载地址：</h1>

<blockquote cite='陈浩翔'>
GITHUB源码下载地址:<strong>【<a href='https://github.com/chenhaoxiang/Shiro/tree/master/20170907/code/Shiro01' target='_blank'>点我进行下载</a>】</strong>
</blockquote>


<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【C++】流插入、提取运算符和类型转换]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/09/05/Flow-insert-extract-operator-and-type-conversion/"/>
    <updated>2017-09-05T17:28:34+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/09/05/Flow-insert-extract-operator-and-type-conversion</id>
    <content type="html"><![CDATA[<p>流插入,流提取运算符重载和类型转换的讲解和实例</p>

<p>重载流插入和提取运算符的运算符函数，不能作为类的成员函数，只能作为普通函数</p>

<!-- more -->


<hr />

<h1>流插入,流提取运算符重载</h1>

<p>流插入运算符"&lt;&lt;&ldquo;和流提取运算符&rdquo;>>&ldquo;也可以被用来重载。</p>

<p>我们可以使用cout对一个int，string等等类型的数据进行输出，我们却不可以对我们自己定义的一个类的对象进行直接输出，因为我们这个类是没有"&lt;&lt;&ldquo;运算符的。</p>

<p>&ldquo;&lt;&lt;"运算符是有两个操作数的，它是一个双目运算符，平时貌似只给了它一个操作数,形如cout&lt;&lt;a;我们只知道a是一个变量，是它的一个操作数，还有一个操作数其实是cout！</p>

<p>cout也是它的一个操作数，cout是一个在ostream类里面已经定义好了的对象，ostream类还为我们定义好了系统中已经存在的类型的输出，如int，double…..这个对象作为了它的左操作数。显然cout这个对象是不属于我们新声明的类的，但是它又需要作为第一个参数，它是没有办法调用我们这个类的成员函数的，所以只能将"&lt;&lt;&ldquo;运算符的重载声明为友元函数。</p>

<p>可以为CTime类定义重载的流插入和流提取运算符。</p>

<p>重载之后就可以直接对CTime对象进行输入和输出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">time</span><span class="p">;</span>
</span><span class='line'><span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">time</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>重载流插入和提取运算符的运算符函数，不能作为类的成员函数，只能作为普通函数</strong> 这是一个规定，没有为什么</p>

<p>&ldquo;&lt;&lt;"和&rdquo;>>&ldquo;重载的函数声明如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">istream</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">&gt;&gt;</span> <span class="p">(</span><span class="n">istream</span><span class="o">&amp;</span> <span class="n">input</span><span class="p">,</span> <span class="n">CTime</span><span class="o">&amp;</span> <span class="n">time</span><span class="p">);</span><span class="c1">//输入流</span>
</span><span class='line'><span class="n">ostream</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">output</span><span class="p">,</span> <span class="n">CTime</span><span class="o">&amp;</span> <span class="n">time</span><span class="p">);</span><span class="c1">//输出流</span>
</span></code></pre></td></tr></table></div></figure>


<p>istream和ostream分别是输入流类和输出流类。cin和cout就分别是istream和ostream的对象。<br/>
注意:<br/>
<strong>重载"&lt;&lt;&ldquo;流插入运算符的函数第一个参数和返回类型必须是ostream&amp;类型。<br/>
重载&rdquo;>>&ldquo;流提取运算符的函数第一个参数和返回类型必须是istream&amp;类型。</strong><br/>
第二个参数是用户自定义的类</p>

<h2>流提取运算符"&lt;&lt;&ldquo;重载</h2>

<figure class='code'><figcaption><span>流提取运算符重载</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">ostream</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">output</span><span class="p">,</span> <span class="n">CTime</span><span class="o">&amp;</span> <span class="n">time</span><span class="p">)</span> <span class="c1">//返回ostream类的对象output的引用是为了实现连续输出，如cout&lt;&lt;a&lt;&lt;b;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">time</span><span class="p">.</span><span class="n">getHour</span><span class="p">()</span><span class="o">&lt;&lt;</span><span class="n">time</span><span class="p">.</span><span class="n">getMinute</span><span class="p">()</span><span class="o">&lt;&lt;</span><span class="n">time</span><span class="p">.</span><span class="n">getSecond</span><span class="p">()</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="k">return</span> <span class="n">output</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>流输入运算符">>&ldquo;重载</h2>

<figure class='code'><figcaption><span>流输入运算符">>"重载</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="c1">//因为要用到CTime类的成员，所以把流提取运算符作为CTime类的友元</span>
</span><span class='line'><span class="n">istream</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">&gt;&gt;</span><span class="p">(</span><span class="n">istream</span><span class="o">&amp;</span> <span class="n">input</span><span class="p">,</span> <span class="n">CTime</span><span class="o">&amp;</span> <span class="n">time</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">//可以直接使用CTIme类的数据成员了</span>
</span><span class='line'>  <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">time</span><span class="p">.</span><span class="n">m_nHour</span> <span class="o">&gt;&gt;</span> <span class="n">time</span><span class="p">.</span><span class="n">m_nMinute</span> <span class="o">&gt;&gt;</span> <span class="n">time</span><span class="p">.</span><span class="n">m_nSecond</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">input</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>Time.h声明友元</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="k">friend</span> <span class="n">istream</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">&gt;&gt;</span><span class="p">(</span><span class="n">istream</span><span class="o">&amp;</span> <span class="n">input</span><span class="p">,</span> <span class="n">CTime</span><span class="o">&amp;</span> <span class="n">time</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>在重载完流插入和提取运算符后，我们就可以对该类使用&lt;&lt;输出数据，使用>>输入数据。这样是非常直观的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">CTime</span> <span class="nf">time</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">20</span><span class="p">);</span>
</span><span class='line'><span class="n">CTime</span> <span class="nf">time2</span><span class="p">(</span><span class="mi">12</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">time</span><span class="p">;</span>  <span class="c1">//在我们重载了输入输出运算符之后，我们也可以像C++里面预定义好的数据类型一样对这个类的对象进行输入输出</span>
</span><span class='line'>
</span><span class='line'><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">time</span> <span class="o">&lt;&lt;</span> <span class="n">time2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">operator</span><span class="o">&gt;&gt;</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">time</span><span class="p">);</span>
</span><span class='line'><span class="k">operator</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">cout</span><span class="p">,</span> <span class="n">time</span><span class="p">);</span>
</span><span class='line'><span class="k">operator</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">cout</span><span class="p">,</span> <span class="n">time2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>结果</h3>

<p><img src="https://i.imgur.com/umGMKFJ.png" alt="" /></p>

<h1>类型转换</h1>

<h2>使用构造函数进行类型转换</h2>

<p>在为CTime类重载+运算符后，我们就可以对两个CTime对象使用+运算符进行操作。<br/>
但仍然不能使用+运算符将一个CTime对象和一个int类型相加。为了实现它，我们可以先将int类型转换为一个CTime的临时对象，然后在进行相加。<br/>
如下：  <code>time + CTime(3)</code></p>

<p>CTime(3)这种形式很类似于强制类型转换，将int类型转换为CTime类型。之所以可以进行此种转换，是因为已经为CTime对象定义了具有一个int类型参数的构造函数。因此具有一个参数的构造函数可以用来做类型转换，称之为<strong>转换构造函数</strong></p>

<p>有了类型转换函数，在需要CTime类型参数的地方可以使用int类型代替</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">CTime</span> <span class="nf">time3</span><span class="p">(</span><span class="mi">20</span><span class="p">);</span>
</span><span class='line'><span class="n">CTime</span> <span class="n">time4</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span><span class="c1">//和下面那句效果一样的,自动类型转换</span>
</span><span class='line'><span class="n">CTime</span> <span class="n">time5</span> <span class="o">=</span> <span class="n">CTime</span><span class="p">(</span><span class="mi">20</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">func</span><span class="p">(</span><span class="n">time</span><span class="p">);</span>
</span><span class='line'><span class="n">func</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span><span class="c1">//编译器会自动构造一个CTime的临时对象</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果我们期望避免这种转换，我们可以在含有一个参数的构造函数前面加上声明explicit<br/>
如:</p>

<figure class='code'><figcaption><span>Time.h文件</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">explicit</span> <span class="nf">CTime</span><span class="p">(</span><span class="kt">int</span> <span class="n">value</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>
这样，我们使用前面的func(10),CTime time4 = 20;的时候，编译器就会报错<br/>
<img src="https://i.imgur.com/PU5wW9T.png" alt="" /></p>

<h2>类型转换函数进行类型转换</h2>

<p>类型转换函数用以将类的对象转换另一种数据类型的函数。<br/>
类型转换函数没有参数，没有返回类型。它是成员函数。</p>

<p>如 可以将CTime类对象转换int类型。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="kt">int</span> <span class="n">nSecond</span> <span class="o">=</span> <span class="n">time</span><span class="p">;</span>  <span class="c1">//执行了将对象转换为int类型的操作，调用类型转换函数</span>
</span></code></pre></td></tr></table></div></figure>


<p>类型转换函数的声明形式：</p>

<figure class='code'><figcaption><span>Time.h</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="k">operator</span> <span class="nf">int</span><span class="p">();</span>  <span class="c1">//int为它的返回类型</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面定义一个类型转换函数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">CTime</span><span class="o">::</span><span class="k">operator</span> <span class="kt">int</span><span class="p">()</span> <span class="c1">//将一个CTime类的对象转换成秒数</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">m_nHour</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">+</span> <span class="n">m_nMinute</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">+</span> <span class="n">m_nSecond</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="kt">int</span> <span class="n">nSecond</span> <span class="o">=</span> <span class="n">time</span><span class="p">;</span>
</span><span class='line'><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">nSecond</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://i.imgur.com/tBo8bmZ.png" alt="" /><br/>
最后面的那行输出 6:3:3的秒数</p>

<p>类型转换函数在平时比较少见，在这里只介绍了一下如何使用的。</p>

<h1>源代码下载地址：</h1>

<blockquote cite='陈浩翔'>
GITHUB源码下载地址:<strong>【<a href='https://github.com/chenhaoxiang/C-Study/tree/master/20170905/code/FlowInsertExtractOperator' target='_blank'>点我进行下载</a>】</strong>
</blockquote>


<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【C++】成员函数重载二元和一元运算符]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/09/04/Member-functions-overload-binary-and-unary-operators/"/>
    <updated>2017-09-04T15:54:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/09/04/Member-functions-overload-binary-and-unary-operators</id>
    <content type="html"><![CDATA[<p>重载双目运算符时，运算符函数中应该具有两个参数，若运算符函数作为类的成员函数(当运算符重载函数作为类的成员函数时，要求操作数左边必须是一个对象，而函数的参数可以是同类的对象也可以是普通的变量)，则只需要一个参数。</p>

<!-- more -->


<hr />

<h1>双目运算符</h1>

<p>双目运算符就是具有两个操作数的运算符。如 +、-、==等。</p>

<p>对双目运算符而言，成员函数重载运算符的函数参数表中只有一个参数，而用友元函数重载运算符函数参数表中含有两个参数。</p>

<h2>成员函数重载 == 、>运算符:</h2>

<figure class='code'><figcaption><span>声明</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="kt">bool</span> <span class="k">operator</span><span class="o">==</span><span class="p">(</span><span class="n">CTime</span><span class="o">&amp;</span> <span class="n">time</span><span class="p">);</span>
</span><span class='line'><span class="kt">bool</span> <span class="k">operator</span><span class="o">&gt;</span><span class="p">(</span><span class="n">CTime</span><span class="o">&amp;</span> <span class="n">time</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>实现</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="c1">//判断对象的每个成员变量是否相等</span>
</span><span class='line'><span class="kt">bool</span> <span class="n">CTime</span><span class="o">::</span><span class="k">operator</span><span class="o">==</span><span class="p">(</span><span class="n">CTime</span><span class="o">&amp;</span> <span class="n">time</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">m_nHour</span> <span class="o">==</span> <span class="n">time</span><span class="p">.</span><span class="n">m_nHour</span><span class="o">&amp;&amp;</span><span class="n">m_nMinute</span> <span class="o">==</span> <span class="n">time</span><span class="p">.</span><span class="n">m_nMinute</span><span class="o">&amp;&amp;</span><span class="n">m_nSecond</span> <span class="o">==</span> <span class="n">time</span><span class="p">.</span><span class="n">m_nSecond</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="n">CTime</span><span class="o">::</span><span class="k">operator</span><span class="o">&gt;</span><span class="p">(</span><span class="n">CTime</span><span class="o">&amp;</span> <span class="n">time</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">m_nHour</span> <span class="o">&gt;</span> <span class="n">time</span><span class="p">.</span><span class="n">m_nHour</span><span class="p">)</span> <span class="c1">//先判断两个对象的小时数的大小</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">m_nHour</span> <span class="o">&lt;</span> <span class="n">time</span><span class="p">.</span><span class="n">m_nHour</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="c1">//这是两个对象小时数相等的情况，接下来就判断分钟数</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">m_nMinute</span><span class="o">&gt;</span> <span class="n">time</span><span class="p">.</span><span class="n">m_nMinute</span><span class="p">)</span> <span class="c1">//再判断两个对象的分钟数的大小</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">m_nMinute</span> <span class="o">&lt;</span> <span class="n">time</span><span class="p">.</span><span class="n">m_nMinute</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span> <span class="c1">//这是两个对象的时钟和分钟相等的情况下</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">m_nSecond</span><span class="o">&gt;</span><span class="n">time</span><span class="p">.</span><span class="n">m_nSecond</span><span class="p">)</span> <span class="c1">//最后比较秒钟</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">else</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>  <span class="c1">//最后就是两个对象相等，也不满足一个对象大于另外一个对象的情况，返回false</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>成员函数重载++运算符</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">CTime</span> <span class="k">operator</span><span class="o">++</span><span class="p">();</span><span class="c1">//前置的++</span>
</span><span class='line'><span class="n">CTime</span> <span class="k">operator</span><span class="o">++</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span><span class="c1">//后置++，这个int类型的参数只是为了区分，我们并不会使用这个参数，所以我们不需要形参的名字</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="c1">//前置的++</span>
</span><span class='line'><span class="n">CTime</span> <span class="n">CTime</span><span class="o">::</span><span class="k">operator</span><span class="o">++</span><span class="p">()</span> <span class="c1">//重载++(前置)运算符</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">CTime</span> <span class="n">time</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span> <span class="c1">//定义了一个秒数为1的对象</span>
</span><span class='line'>  <span class="o">*</span><span class="k">this</span> <span class="o">=</span> <span class="o">*</span><span class="k">this</span> <span class="o">+</span> <span class="n">time</span><span class="p">;</span><span class="c1">//由于前面的函数已经重载了加号运算符，里面已经定义好了相关的操作，所以这句代码调用了加号运算符的重载函数，并将对象的秒数加一</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span> <span class="c1">//前置++的操作顺序就是先加再返回它的值</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">CTime</span> <span class="n">CTime</span><span class="o">::</span><span class="k">operator</span><span class="o">++</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="c1">//重载++(后置)运算符</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">CTime</span> <span class="n">time</span> <span class="o">=</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span><span class="c1">//后置++的操作规则是先返回再加，所以需要创建一个临时变量保存好这个对象的值</span>
</span><span class='line'>  <span class="n">CTime</span> <span class="nf">time2</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span><span class="c1">//定义了一个秒数为1的对象</span>
</span><span class='line'>  <span class="o">*</span><span class="k">this</span> <span class="o">=</span> <span class="o">*</span><span class="k">this</span> <span class="o">+</span> <span class="n">time2</span><span class="p">;</span><span class="c1">//同上调用了加法运算符的重载函数</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span><span class="c1">//返回加法操作之前的对象的值</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>测试</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">CTime</span> <span class="nf">time</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">20</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">++</span><span class="n">time</span><span class="p">;</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">time</span><span class="p">.</span><span class="n">getHour</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">time</span><span class="p">.</span><span class="n">getMinute</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">time</span><span class="p">.</span><span class="n">getSecond</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">time</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">time</span><span class="p">.</span><span class="n">getHour</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">time</span><span class="p">.</span><span class="n">getMinute</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">time</span><span class="p">.</span><span class="n">getSecond</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<h3>结果</h3>

<p><img src="https://i.imgur.com/iUU9UYt.png" alt="" /></p>

<h1>源代码下载地址：</h1>

<blockquote cite='陈浩翔'>
GITHUB源码下载地址:<strong>【<a href='https://github.com/chenhaoxiang/C-Study/tree/master/20170904/code/OverloadOperator' target='_blank'>点我进行下载</a>】</strong>
</blockquote>


<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【C++】C++运算符重载的规则]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/09/02/Rules-for-operator-overloading/"/>
    <updated>2017-09-02T18:40:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/09/02/Rules-for-operator-overloading</id>
    <content type="html"><![CDATA[<p>本篇博客讲解:<br/>
运算符重载的规则，以及实例</p>

<!-- more -->


<hr />

<h1>运算符重载的规则</h1>

<p><strong>被重载的运算符必须是已经存在的C++运算符，不能重载自己创建的运算符</strong>。<br/>
运算符被重载之后，<strong>原有功能仍然保留</strong>。只是扩展了原有功能。<br/>
重载不能改变运算符运算对象的个数。<br/>
+运算符具有两个操作数，在+运算符函数作为类(例如上个例子中的CTime)的成员函数的时候，有一个参数是隐含的，也就是当前的对象，使用this指针来引用。<br/>
另一个参数通过函数参数指定。</p>

<p>可以重载的运算符：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1.算术运算符：+，-，*，/，%，   
</span><span class='line'>2.逻辑运算符：&&，||，！  
</span><span class='line'>3.关系运算符：&gt;,&lt;,=,&gt;=,&lt;=,==,!=  
</span><span class='line'>4.位操作符：～，&lt;&lt;(左移)，&gt;&gt;(右移)，&，^），|  
</span><span class='line'>5.自增自减运算符：++，--  
</span><span class='line'>6.复合赋值运算符：+=，-=，*=，/=，%=  
</span><span class='line'>7.其他：&(取地址符)、*、 () 、-&gt;(成员访问运算符) 、[] (下标运算符)、.new/delete、&gt;&gt;、&lt;&lt;  </span></code></pre></td></tr></table></div></figure>


<p>不能重载的运算符：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>?:(条件运算符) 
</span><span class='line'>.(成员访问运算符)
</span><span class='line'>*(成员指针访问运算符)
</span><span class='line'>::(域运算符)
</span><span class='line'>sizeof(sizeof 是运算符,而不是函数)</span></code></pre></td></tr></table></div></figure>


<p>不需要重载的运算符</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>=（赋值）和&(取地址符)</span></code></pre></td></tr></table></div></figure>


<p>
因为编译器会为每个类自动实现一个默认的赋值运算符/取地址符的成员函数  <br/>
当然，我们可以重写这个默认的成员函数。</p>

<figure class='code'><figcaption><span>CTime.h声明</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">CTime</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="n">CTime</span><span class="o">&amp;</span> <span class="n">time</span><span class="p">);</span><span class="c1">//返回的是对象的引用形式</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>CTime.cpp定义</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">CTime</span><span class="o">&amp;</span> <span class="n">CTime</span><span class="o">::</span><span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="n">CTime</span><span class="o">&amp;</span> <span class="n">time</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">//为了防止同一个对象进行赋值，需要先判断一下,判断地址是不是一样</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="k">this</span> <span class="o">==</span> <span class="o">&amp;</span><span class="n">time</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//默认的是各个成员分别赋值</span>
</span><span class='line'>  <span class="n">m_nHour</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="n">m_nHour</span><span class="p">;</span>
</span><span class='line'>  <span class="n">m_nMinute</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="n">m_nMinute</span><span class="p">;</span>
</span><span class='line'>  <span class="n">m_nSecond</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="n">m_nSecond</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span><span class="c1">//返回当前这个对象</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>友元函数的运算符重载</p>

<figure class='code'><figcaption><span>CTime.h声明</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="c1">//friend为友元函数的关键字,这个符号运算符重载函数的参数类型至少有一个类类型或者类的引用,也就是说，可以有一个参数不是对象</span>
</span><span class='line'><span class="k">friend</span> <span class="n">CTime</span> <span class="k">operator</span><span class="o">+</span><span class="p">(</span><span class="n">CTime</span><span class="o">&amp;</span> <span class="n">time1</span><span class="p">,</span> <span class="n">CTime</span><span class="o">&amp;</span> <span class="n">time2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>main.cpp实现-使用类来实现</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="c1">//友元函数的运算符重载</span>
</span><span class='line'><span class="n">CTime</span> <span class="k">operator</span><span class="o">+</span><span class="p">(</span><span class="n">CTime</span><span class="o">&amp;</span> <span class="n">time1</span><span class="p">,</span> <span class="n">CTime</span><span class="o">&amp;</span> <span class="n">time2</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">hour</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">minute</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">second</span> <span class="o">=</span> <span class="n">time1</span><span class="p">.</span><span class="n">m_nSecond</span> <span class="o">+</span> <span class="n">time2</span><span class="p">.</span><span class="n">m_nSecond</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">second</span> <span class="o">&gt;</span> <span class="mi">60</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">minute</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="n">second</span> <span class="o">-=</span> <span class="mi">60</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">minute</span> <span class="o">+=</span> <span class="p">(</span><span class="n">time1</span><span class="p">.</span><span class="n">m_nMinute</span> <span class="o">+</span> <span class="n">time2</span><span class="p">.</span><span class="n">m_nMinute</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">minute</span> <span class="o">&gt;</span> <span class="mi">60</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">hour</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="n">minute</span> <span class="o">-=</span> <span class="mi">60</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">hour</span> <span class="o">+=</span> <span class="p">(</span><span class="n">time1</span><span class="p">.</span><span class="n">m_nHour</span> <span class="o">+</span> <span class="n">time2</span><span class="p">.</span><span class="n">m_nHour</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">hour</span> <span class="o">&gt;</span> <span class="mi">24</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">hour</span> <span class="o">-=</span> <span class="mi">24</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">CTime</span><span class="p">(</span><span class="n">hour</span><span class="p">,</span> <span class="n">minute</span><span class="p">,</span> <span class="n">second</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>赋值函数<br/>
普通函数和类的成员函数都可以作为类的友元，但什么时候应该使用普通函数，什么时候应该使用成员函数方式呢？</p>

<p><strong>普通函数形式的运算符函数一般都声明为类的友元函数</strong>，用以访问类的私有数据成员。<br/>
这样可以减低开销，但破坏封装性。因此建议尽量使用成员函数形式。</p>

<p><strong>一般将单目运算符重载为成员函数，将双目运算符重载为友元函数</strong></p>

<p>成员函数方式要求左侧的参数要与类的类型相同。而普通函数则要求实参顺序与形参类型顺序一致。</p>

<p>如<br/>
有的运算符必须定义为类的成员函数</p>

<figure class='code'><figcaption><span>main.cpp实现-使用类来实现</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="o">=</span><span class="err">、赋值运算符</span>
</span><span class='line'><span class="p">[]</span><span class="err">、下标运算符</span>
</span><span class='line'><span class="p">()</span> <span class="err">函数调用运算符</span>
</span></code></pre></td></tr></table></div></figure>


<p>有的运算符不能定义为类的成员函数，只能定义为类的友元</p>

<figure class='code'><figcaption><span>main.cpp实现-使用类来实现</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="o">&lt;&lt;</span><span class="err">、</span><span class="o">&gt;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>运算符重载可以在函数内执行任意的操作，比如可以将+定义成两个对象相减的操作<br/>
但是这样违背我们日常使用的习惯，容易使用误用，减低程序可读性，因此必须保证重载的运算符与该运算符应用于标准数据类型时所具有的功能。 </p>

<h1>源代码下载地址：</h1>

<blockquote cite='陈浩翔'>
GITHUB源码下载地址:<strong>【<a href='https://github.com/chenhaoxiang/C-Study/tree/master/20170902/code/operatorOverloadingBase' target='_blank'>点我进行下载</a>】</strong></p>
</blockquote>


<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【Cocos2d-x】Cocos2d-x精灵的性能优化]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/08/24/cocos2dx-sprite-sheet-optimize/"/>
    <updated>2017-08-24T13:38:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/08/24/cocos2dx-sprite-sheet-optimize</id>
    <content type="html"><![CDATA[<p>Cocos2d-x精灵的性能优化-使用纹理图集和精灵帧缓存</p>

<!-- more -->


<hr />

<h1>使用纹理图集</h1>

<p>纹理图集(Texture)也称为精灵表(Sprite Sheet)</p>

<p>使用纹理图集的优点:
1、减少文件读取次数，读取一张图片比读取一推小文件要快<br/>
2、减少OpenGL ES绘制调用并且加速渲染<br/>
OpenGL ES 1.1仅仅能够使用2的n次幂大小的图片(即宽度或者高度是2、4、8、64&hellip;)。<br/>
如果采用小图片OpenGL ES1.1会分配给每个图片2的n次幂大小的内存空间，即使这张图片达不到这样的宽度和高度也会分配大于此图片的2的n次幂大小的空间。那么运用这种图片集的方式将会减少内存碎片。<br/>
虽然在Cocos2d-x v2.0后使用OpenGL ES2.0,它不会再分配2的几次幂的内存块了，但是减少读取次数和绘制的优势依然存在。<br/>
3、减少内存消耗。<br/>
4、Cocos2d-x全面支持Zwoptex和TexturePacker，所以创建和使用纹理图集是很容易的</p>

<p><img src="http://i.imgur.com/g2Z6XnO.png" alt="" /><br/>
这样一张大图，可以让美工来完成，但是记得需要记下坐标，图集中小图的左上角坐标是多少，宽和高是多少，这是需要知道的。<br/>
这是很耗时的。实际上这是可以由软件(Zwoptex和TexturePacker)来完成的。<br/>
做出来的纹理图集由两部分构成。一部分是存有纹理的，也就是大图文件。另一部分就是里面精灵/小图的坐标等信息文件</p>

<p><img src="http://i.imgur.com/0CWjIUB.png" alt="" /><br/>
plist文件是属性列表文件，一种xml文件。每一个小图称为帧(frame),每一个frame包含了该帧的名(key)，坐标,高宽。是否旋转等。这是给程序读的</p>

<figure class='code'><figcaption><span>加载纹理缓存图片/大图</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="kt">bool</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">init</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">Layer</span><span class="o">::</span><span class="n">init</span><span class="p">()</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Size</span> <span class="n">visibleSize</span> <span class="o">=</span> <span class="n">Director</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getVisibleSize</span><span class="p">();</span>
</span><span class='line'>  <span class="n">Vec2</span> <span class="n">origin</span> <span class="o">=</span> <span class="n">Director</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getVisibleOrigin</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">auto</span> <span class="n">background</span> <span class="o">=</span> <span class="n">Sprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;background.png&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">background</span><span class="o">-&gt;</span><span class="n">setAnchorPoint</span><span class="p">(</span><span class="n">Vec2</span><span class="o">::</span><span class="n">ZERO</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">background</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">auto</span> <span class="n">mountain1</span> <span class="o">=</span> <span class="n">Sprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;SpriteSheet.png&quot;</span><span class="p">,</span><span class="n">Rect</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">391</span><span class="p">,</span> <span class="mi">934</span><span class="p">,</span> <span class="mi">388</span><span class="p">));</span><span class="c1">//截取图片</span>
</span><span class='line'>  <span class="n">mountain1</span><span class="o">-&gt;</span><span class="n">setAnchorPoint</span><span class="p">(</span><span class="n">Vec2</span><span class="o">::</span><span class="n">ZERO</span><span class="p">);</span><span class="c1">//设置锚点</span>
</span><span class='line'>    <span class="n">mountain1</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="o">-</span><span class="mi">200</span><span class="p">,</span><span class="mi">80</span><span class="p">));</span><span class="c1">//设置坐标</span>
</span><span class='line'>    <span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">mountain1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Texture2D</span><span class="o">*</span> <span class="n">cache</span> <span class="o">=</span> <span class="n">Director</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getTextureCache</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">addImage</span><span class="p">(</span><span class="s">&quot;SpriteSheet.png&quot;</span><span class="p">);</span><span class="c1">//加载整个图片到纹理缓存</span>
</span><span class='line'>    <span class="k">auto</span> <span class="n">hero1</span> <span class="o">=</span> <span class="n">Sprite</span><span class="o">::</span><span class="n">create</span><span class="p">();</span>
</span><span class='line'>    <span class="n">hero1</span><span class="o">-&gt;</span><span class="n">setTexture</span><span class="p">(</span><span class="n">cache</span><span class="p">);</span>
</span><span class='line'>    <span class="n">hero1</span><span class="o">-&gt;</span><span class="n">setTextureRect</span><span class="p">(</span><span class="n">Rect</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1706</span><span class="p">,</span><span class="mi">391</span><span class="p">,</span><span class="mi">327</span><span class="p">));</span><span class="c1">//在纹理缓存中截取图片  左上角坐标 以及截取图片的宽高</span>
</span><span class='line'>    <span class="n">hero1</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="mi">800</span><span class="p">,</span><span class="mi">200</span><span class="p">));</span>
</span><span class='line'>    <span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">hero1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>源代码下载地址：</h2>

<blockquote cite='陈浩翔'>
GITHUB源码下载地址:<strong>【<a href='https://github.com/chenhaoxiang/cocos2d-x/tree/master/20170824/code/Cocos2dSpriteSheet' target='_blank'>点我进行下载</a>】</strong></p>
</blockquote>


<h1>精灵帧缓存</h1>

<p>精灵帧缓存是缓存的一种，缓存有如下几种:<br/>
1、纹理缓存(TextureCache)<br/>
使用纹理缓存可以创建纹理对象<br/>
2、精灵帧缓存(SpriteFrameCache)<br/>
和纹理图集相对应，把plist文件读到内存，到文件里面创建精灵帧缓存，然后再从精灵帧缓存中获得精灵对象，反复使用精灵对象时候，使用精灵帧缓存可以节省内存消耗<br/>
将一个图读到精灵帧缓存中，同时也会加载到纹理缓存中</p>

<p>3、动画缓存(AnimationCache)<br/>
动画缓存主要用于精灵动画，精灵动画中的每一帧是从动画缓存中获取的</p>

<figure class='code'><figcaption><span>精灵帧缓存</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">SpriteFrameCache</span> <span class="o">*</span><span class="n">frameCache</span> <span class="o">=</span> <span class="n">SpriteFrameCache</span><span class="o">::</span><span class="n">getInstance</span><span class="p">();</span>
</span><span class='line'><span class="n">frameCache</span><span class="o">-&gt;</span><span class="n">addSpriteFramesWithFile</span><span class="p">(</span><span class="s">&quot;SpriteSheet.plist&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//单例-将精灵图集的坐标读进去 根据这个坐标获取图集，这个加载过程是在游戏启动的时候加载，并不是在用的时候加载(肯定会占用很多内存的,不过现在手机一般内存都挺多的)  </span>
</span><span class='line'><span class="k">auto</span> <span class="n">mountain1</span> <span class="o">=</span> <span class="n">Sprite</span><span class="o">::</span><span class="n">createWithSpriteFrameName</span><span class="p">(</span><span class="s">&quot;mountain1.png&quot;</span><span class="p">);</span><span class="c1">//缓存被创建后，可以通过frame名字(**注意名字冲突的问题，名字一样的精灵帧，后面的会覆盖前面的,可以加前缀以区分**)指定精灵帧来创建一个精灵   这个过程并不是通过大图去创建的，而是通过SpriteFrameCache缓存取出来的，这个速度很快  </span>
</span><span class='line'><span class="c1">//还可以通过精灵帧来创建精灵  </span>
</span><span class='line'><span class="n">SpriteFrame</span> <span class="o">*</span><span class="n">heroSpriteFrame</span> <span class="o">=</span> <span class="n">frameCache</span><span class="o">-&gt;</span><span class="n">getSpriteFrameByName</span><span class="p">(</span><span class="s">&quot;hero1.png&quot;</span><span class="p">);</span><span class="c1">//通过精灵帧名字获取精灵帧</span>
</span><span class='line'><span class="n">Sprite</span> <span class="o">*</span><span class="n">hero1</span> <span class="o">=</span> <span class="n">Sprite</span><span class="o">::</span><span class="n">createWithSpriteFrame</span><span class="p">(</span><span class="n">heroSpriteFrame</span><span class="p">);</span><span class="c1">//通过精灵帧创建精灵</span>
</span></code></pre></td></tr></table></div></figure>


<p>清空或移除精灵帧的缓存函数:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="kt">void</span> <span class="nf">removeSpriteFrameByName</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">name</span><span class="p">);</span><span class="c1">//指定具体的精灵帧名将精灵帧从缓存中移除，具体到精灵帧</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">removeSpriteFrames</span><span class="p">();</span><span class="c1">//指定清空所有的精灵帧缓存</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">removeSpriteFramesFromFile</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">plist</span><span class="p">);</span><span class="c1">//指定具体的坐标文件(plist文件)移除精灵帧</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">removeUnusedSpriteFrames</span><span class="p">();</span><span class="c1">//移除没有使用的精灵帧</span>
</span></code></pre></td></tr></table></div></figure>


<p>建议初学者不要轻易使用清除缓存函数！</p>

<h1>小项目实例</h1>

<p>现在还做不了太复杂的项目，在目前这个阶段<br/>
项目描述:<br/>
我们有这样一个场景，一个背景草地，山，和一个精灵牛仔(还没学帧动画，先做个静态的)。 把这三个精灵放到一个场景中<br/>
利用精灵帧缓存完成<br/>
<img src="http://i.imgur.com/6IbcWnk.png" alt="" /></p>

<p>背景没有放到精灵图集中去，这是因为背景是不需要透明的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="kt">bool</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">init</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">Layer</span><span class="o">::</span><span class="n">init</span><span class="p">()</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Size</span> <span class="n">visibleSize</span> <span class="o">=</span> <span class="n">Director</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getVisibleSize</span><span class="p">();</span>
</span><span class='line'>  <span class="n">Vec2</span> <span class="n">origin</span> <span class="o">=</span> <span class="n">Director</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getVisibleOrigin</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">auto</span> <span class="n">background</span> <span class="o">=</span> <span class="n">Sprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;background.png&quot;</span><span class="p">);</span><span class="c1">//加载背景精灵</span>
</span><span class='line'>  <span class="n">background</span><span class="o">-&gt;</span><span class="n">setAnchorPoint</span><span class="p">(</span><span class="n">Vec2</span><span class="o">::</span><span class="n">ZERO</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">background</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">SpriteFrameCache</span> <span class="o">*</span><span class="n">frameCache</span> <span class="o">=</span> <span class="n">SpriteFrameCache</span><span class="o">::</span><span class="n">getInstance</span><span class="p">();</span><span class="c1">//单例对象</span>
</span><span class='line'>  <span class="n">frameCache</span><span class="o">-&gt;</span><span class="n">addSpriteFramesWithFile</span><span class="p">(</span><span class="s">&quot;SpriteSheet.plist&quot;</span><span class="p">);</span><span class="c1">//加载精灵图集</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">auto</span> <span class="n">mountain1</span> <span class="o">=</span> <span class="n">Sprite</span><span class="o">::</span><span class="n">createWithSpriteFrameName</span><span class="p">(</span><span class="s">&quot;mountain1.png&quot;</span><span class="p">);</span><span class="c1">//通过精灵帧名创建精灵</span>
</span><span class='line'>  <span class="n">mountain1</span><span class="o">-&gt;</span><span class="n">setAnchorPoint</span><span class="p">(</span><span class="n">Vec2</span><span class="o">::</span><span class="n">ZERO</span><span class="p">);</span><span class="c1">//设置锚点</span>
</span><span class='line'>    <span class="n">mountain1</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="o">-</span><span class="mi">200</span><span class="p">,</span><span class="mi">80</span><span class="p">));</span>
</span><span class='line'>    <span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">mountain1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">SpriteFrame</span> <span class="o">*</span><span class="n">heroSpriteFrame</span> <span class="o">=</span> <span class="n">frameCache</span><span class="o">-&gt;</span><span class="n">getSpriteFrameByName</span><span class="p">(</span><span class="s">&quot;hero1.png&quot;</span><span class="p">);</span><span class="c1">//通过精灵帧名字获取精灵帧</span>
</span><span class='line'>  <span class="n">Sprite</span> <span class="o">*</span><span class="n">hero1</span> <span class="o">=</span> <span class="n">Sprite</span><span class="o">::</span><span class="n">createWithSpriteFrame</span><span class="p">(</span><span class="n">heroSpriteFrame</span><span class="p">);</span><span class="c1">//通过精灵帧创建精灵</span>
</span><span class='line'><span class="c1">//上面的两条语句相当于前面一条语句的效果auto mountain1 = Sprite::createWithSpriteFrameName(&quot;mountain1.png&quot;);</span>
</span><span class='line'>    <span class="n">hero1</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="mi">800</span><span class="p">,</span><span class="mi">200</span><span class="p">));</span>
</span><span class='line'>    <span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">hero1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>源代码下载地址：</h2>

<blockquote cite='陈浩翔'>
GITHUB源码下载地址:<strong>【<a href='https://github.com/chenhaoxiang/cocos2d-x/tree/master/20170824/code/Cocos2dxHero' target='_blank'>点我进行下载</a>】</strong></p>
</blockquote>


<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【安卓】安卓集成魔窗-完整实例]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/08/23/android-magicwindow/"/>
    <updated>2017-08-23T13:38:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/08/23/android-magicwindow</id>
    <content type="html"><![CDATA[<p>前些日子，公司安卓应用的魔窗出现问题，需要重新写过。于是，就有了此篇魔窗HelloWord。 <br/>
没有包含微信分享，如果有微信分享，无非就是再集成微信分享，将分享链接改为魔窗的mLink深度链接即可</p>

<!-- more -->


<hr />

<p>魔窗官网:<a href="http://www.magicwindow.cn/">http://www.magicwindow.cn/</a></p>

<p>魔窗介绍就不重复了，想去了解的可以去官网看看、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>企业级的深度链接（Deeplink）解决方案mLink
</span><span class='line'>场景式连接/服务连接
</span><span class='line'>内容分发
</span><span class='line'>跨App Store/应用市场的渠道分析</span></code></pre></td></tr></table></div></figure>


<p>可以这么理解，通过浏览器访问某一链接(可以带参数)，直接在本机上打开安装的应用(通过scheme)，通过配置或者参数跳转到不同的场景</p>

<p>首先当然是去注册账号咯。 <br/>
然后进入到管理后台，也就是<a href="http://mgnt.magicwindow.cn">http://mgnt.magicwindow.cn</a></p>

<p><img src="http://i.imgur.com/9d9Zn1E.png" alt="" /></p>

<p>填写产品信息：<br/>
<img src="http://i.imgur.com/O0xpipe.png" alt="" /><br/>
这里的微信分享AppID，是你集成微信分享(微信会分配给你一个appid)后需要填写的。</p>

<p>填写APP信息:
<img src="http://i.imgur.com/4OK2wSh.png" alt="" /><br/>
iOS应用的填写先不管，这里讲的是安卓。<br/>
包名就是你的项目AndroidManifest.xml里面的包名：<br/>
<img src="http://i.imgur.com/LwT2SXa.png" alt="" /><br/>
URL Scheme其实填写的是你的应用的唯一标识，你可以自定义，记住后面需要加<code>://</code>
下载地址是你没有安装应用时，访问链接后跳转的链接，一般填写应用下载地址</p>

<p>魔窗位信息:<br/>
<img src="http://i.imgur.com/wHpDWIO.png" alt="" /><br/>
不需要填写，直接点完成即可。</p>

<p>下面就是选择添加mLink服务，选择好产品之后，点击添加mLink服务<br/>
<img src="http://i.imgur.com/N2B1kxL.png" alt="" /></p>

<p>接下来就是填写信息了：<br/>
<img src="http://i.imgur.com/Ml1sLgh.png" alt="" /></p>

<p>mLink服务名称自定义。可以有中文。<br/>
mLink服务key： 页面key只能包含英文字母,数字和下划线，且只能以英文字母或者下划线开头,且长度不得大于50<br/>
也就是mLink的唯一标识<br/>
iOS URL我现在不管。<br/>
Android URL： 第一个参数mLinkHello我是随便写的(可以自定义为其他的)，我到现在都不明白配置这个有什么用。<br/>
官方文档解释为:<br/>
<img src="http://i.imgur.com/zpUfGIi.png" alt="" /><br/>
貌似这是一个动态参数，我没用到这个，不管，我随便填写的。<br/>
?问号后面的也是动态参数，这是我比较熟悉的传参。id和name为参数名。记得中间需要填写的是<code>=:</code>这两个符号不能分开写。<br/>
点击保存即可。<br/>
不出意外的话，会这样:<br/>
<img src="http://i.imgur.com/nDlsJxM.png" alt="" /></p>

<p>现在配置完了，直接看代码吧。</p>

<p>首先你需要创建一个启动页(Cocos2d-x开发的游戏也可以)，记得是启动页而不是首页。<br/>
在AndroidManifest.xml中配置启动页:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;activity</span> <span class="na">android:name=</span><span class="s">&quot;.HomeMWActivity&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;intent-filter&gt;</span>
</span><span class='line'>            <span class="nt">&lt;action</span> <span class="na">android:name=</span><span class="s">&quot;android.intent.action.MAIN&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;category</span> <span class="na">android:name=</span><span class="s">&quot;android.intent.category.LAUNCHER&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/intent-filter&gt;</span>
</span><span class='line'>        <span class="nt">&lt;intent-filter&gt;</span>
</span><span class='line'>            <span class="nt">&lt;data</span> <span class="na">android:scheme=</span><span class="s">&quot;chenhaoxiang&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;action</span> <span class="na">android:name=</span><span class="s">&quot;android.intent.action.VIEW&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;category</span> <span class="na">android:name=</span><span class="s">&quot;android.intent.category.DEFAULT&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;category</span> <span class="na">android:name=</span><span class="s">&quot;android.intent.category.BROWSABLE&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/intent-filter&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/activity&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>首页:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;activity</span> <span class="na">android:name=</span><span class="s">&quot;.MainActivity&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;intent-filter&gt;</span>
</span><span class='line'>            <span class="nt">&lt;category</span> <span class="na">android:name=</span><span class="s">&quot;android.intent.category.DEFAULT&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/intent-filter&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/activity&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要跳转的页面:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;activity</span>
</span><span class='line'>        <span class="na">android:name=</span><span class="s">&quot;.ParaSetActivity&quot;</span>
</span><span class='line'>        <span class="na">android:label=</span><span class="s">&quot;ParaSetActivity&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;intent-filter&gt;</span>
</span><span class='line'>            <span class="nt">&lt;category</span> <span class="na">android:name=</span><span class="s">&quot;android.intent.category.DEFAULT&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/intent-filter&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/activity&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>ParaSetActivity类上的注解的值为mLink的key</p>

<p>实例说明，没有集成微信分享，想测试的，可以直接用mLink短链接带上参数，例如：<a href="https://aevcir.mlinks.cc/A0dY?id=1&amp;name=chx">https://aevcir.mlinks.cc/A0dY?id=1&amp;name=chx</a><br/>
在浏览器中直接访问，即可跳转到ParaSetActivity页面,参数值也可在app中读出<br/>
实例中的MW_APPID请替换为自己的魔窗App Key，可以在产品管理中看到：<br/>
<img src="http://i.imgur.com/i6h5nAB.png" alt="" /></p>

<p>更多的理解，可以通过下面的实例(使用android studio开发)去看看。也可以直接下载官方的DEMO</p>

<h1>源代码下载地址：</h1>

<blockquote cite='陈浩翔'>
GITHUB源码下载地址:<strong>【<a href='https://github.com/chenhaoxiang/cocos2d-x/tree/master/20170823/code/testMagicWindow' target='_blank'>点我进行下载</a>】</strong></p>
</blockquote>


<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【Cocos2d-x】Sprite精灵类-创建Sprite精灵对象]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/08/22/cocos2d-x-create-sprite-object/"/>
    <updated>2017-08-22T13:38:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/08/22/cocos2d-x-create-sprite-object</id>
    <content type="html"><![CDATA[<p>精灵在Cocos2d-x中的地位就像一场电影中的主角，男主角/女主角，是一场电影中的灵魂所在。也是我们游戏中的灵魂<br/>
无论我们控制的对象还是电脑控制的对象，我们都称之为精灵，或者背景中的图片，也可以称为精灵、只要在游戏场景中的东西，都是可以用精灵来做的。比如菜单，可以做成精灵菜单。<br/>
还有些精灵是和物理引擎有关的，有一些物理特效。<br/>
本章讲的精灵，只是一般意义上的精灵。</p>

<!-- more -->


<hr />

<h1>创建Sprite精灵对象</h1>

<h2>创建精灵对象</h2>

<p>创建精灵对象有多种方式，其中常用的函数如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="k">static</span> <span class="n">Sprite</span><span class="o">*</span> <span class="nf">create</span><span class="p">();</span> <span class="c1">//创建一个精灵对象，纹理等属性需要在创建后设置</span>
</span><span class='line'><span class="k">static</span> <span class="n">Sprite</span><span class="o">*</span> <span class="nf">create</span><span class="p">(</span><span class="k">const</span> <span class="nl">std</span><span class="p">:</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">filename</span><span class="p">);</span> <span class="c1">//指定图片创建精灵  这种方式在实际项目中很少用。我们不会简单的把每个精灵做一个图片，这样会消耗更多的IO读写时间  </span>
</span><span class='line'><span class="c1">//可以放在大图中(合成图)，进行一次读取，在使用中再截取，也就是下面的创建方法(这样内存会消耗多,但是IO操作少)</span>
</span><span class='line'><span class="c1">//如果使用的是iOS系统(苹果)，图片不能超过2048*2048，这是系统的限制</span>
</span><span class='line'><span class="k">static</span> <span class="n">Sprite</span><span class="o">*</span> <span class="nf">create</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">filename</span><span class="p">,</span><span class="k">const</span> <span class="n">Rect</span> <span class="o">&amp;</span><span class="n">rect</span><span class="p">);</span> <span class="c1">//指定图片和裁剪的矩形区域来创建精灵</span>
</span><span class='line'><span class="k">static</span> <span class="n">Sprite</span><span class="o">*</span> <span class="nf">createWithTexture</span><span class="p">(</span><span class="n">Texture2D</span> <span class="o">*</span><span class="n">texture</span><span class="p">);</span><span class="c1">//指定纹理创建精灵  如果已经有纹理对象了，直接把纹理对象拿过来创建精灵对象</span>
</span><span class='line'><span class="k">static</span> <span class="n">Sprite</span><span class="o">*</span> <span class="nf">createWithTexture</span><span class="p">(</span><span class="n">Texture2D</span> <span class="o">*</span><span class="n">texture</span><span class="p">,</span><span class="k">const</span> <span class="n">Rect</span> <span class="o">&amp;</span><span class="n">rect</span><span class="p">,</span><span class="kt">bool</span> <span class="n">rotated</span><span class="o">=</span><span class="nb">false</span><span class="p">);</span><span class="c1">//指定纹理和裁剪的矩形区域来创建精灵，第三个参数是否旋转纹理，默认不旋转  从纹理缓存区来裁剪矩形区域创建精灵</span>
</span><span class='line'><span class="c1">//旋转就是，可能某些情况下，我们合图时为了节省空间，将小图旋转再合图了，这个时候就需要旋转了</span>
</span><span class='line'><span class="k">static</span> <span class="n">Sprite</span><span class="o">*</span> <span class="nf">createWithSpriteFrame</span><span class="p">(</span><span class="n">SpriteFrame</span> <span class="o">*</span><span class="n">pSpriteFrame</span><span class="p">);</span><span class="c1">//通过一个精灵帧对象创建另一个精灵对象 帧缓存</span>
</span><span class='line'><span class="k">static</span> <span class="n">Sprite</span><span class="o">*</span> <span class="nf">createWithSpriteFrameName</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">spriteFrameName</span><span class="p">);</span><span class="c1">//通过精灵帧的名字的创建</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Sprite继承关系图:</h2>

<p><img src="http://i.imgur.com/QsLMq4Z.png" alt="" /></p>

<h2>纹理</h2>

<p>无论是计算机中的CPU还是GPU，做运算做处理，它不是对图片进行处理。图片读入到计算机里，需要对图片进行解码。最后，在计算机放的东西，就可以叫做纹理！ <br/>
实际上，纹理就是由图片或者计算机本身用绘图工具绘画出来的对象。这个东西本身最后的目的是为了放在图片上面，这个过程叫纹理贴图。<br/>
在实际中，我们有时候是把纹理叫成图片的。或者图片叫成纹理。一般而言，在游戏里叫纹理或纹理图片，这是没问题的</p>

<h1>使用纹理对象创建Sprite对象</h1>

<p>场景设计: <br/>
<img src="http://i.imgur.com/kSgYBRI.png" alt="" /></p>

<p>两个精灵(具体几个，看美工给几张图咯):<br/>
草地图片:
<img src="http://i.imgur.com/UCauNT0.png" alt="" /></p>

<hr />

<p>树图片:
<img src="http://i.imgur.com/NtzBfko.png" alt="" /><br/>
这张图上有三棵树，实际上我们不需要全部用到，所以不能简单的把树图片放到草地图片上面。<br/>
而且摆放位置也不同。对于第二种图片，我们可以先读到内存里，形成一个纹理对象，然后从这个纹理对象中截图<br/>
从里面裁剪出来来创建精灵对象。<br/>
裁剪有两种方式，一是通过它的纹理缓存来裁剪。也可以从大图文件直接进行裁剪。</p>

<p>不管是哪种方式，我们都需要去量树的坐标，Rect的参数是一样的！
去画图工具中量坐标:<br/>
我们需要的参数是:左上角坐标，还有宽和高 <br/>
<img src="http://i.imgur.com/TEzpJkp.png" alt="" /></p>

<p>从纹理中创建tree精灵:</p>

<figure class='code'><figcaption><span>tree1精灵</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="k">auto</span> <span class="n">tree1</span> <span class="o">=</span> <span class="n">Sprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;tree1.png&quot;</span><span class="p">,</span> <span class="n">Rect</span><span class="p">(</span><span class="mi">608</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span> <span class="mi">300</span><span class="p">,</span> <span class="mi">298</span><span class="p">));</span><span class="c1">//左上角的坐标，宽，高</span>
</span><span class='line'><span class="c1">//指定大图，指定Rect获取树的截图</span>
</span><span class='line'><span class="n">tree1</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span><span class="mi">230</span><span class="p">));</span>
</span><span class='line'><span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">tree1</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>tree2精灵</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">Texture2D</span><span class="o">*</span> <span class="n">cache</span> <span class="o">=</span> <span class="n">Director</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getTextureCache</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">addImage</span><span class="p">(</span><span class="s">&quot;tree1.png&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">auto</span> <span class="n">tree2</span> <span class="o">=</span> <span class="n">Sprite</span><span class="o">::</span><span class="n">create</span><span class="p">();</span>
</span><span class='line'><span class="n">tree2</span><span class="o">-&gt;</span><span class="n">setTexture</span><span class="p">(</span><span class="n">cache</span><span class="p">);</span>
</span><span class='line'><span class="n">tree2</span><span class="o">-&gt;</span><span class="n">setTextureRect</span><span class="p">(</span><span class="n">Rect</span><span class="p">(</span><span class="mi">70</span><span class="p">,</span><span class="mi">72</span><span class="p">,</span><span class="mi">187</span><span class="p">,</span><span class="mi">267</span><span class="p">));</span>
</span><span class='line'><span class="n">tree2</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="mi">500</span><span class="p">,</span><span class="mi">200</span><span class="p">));</span><span class="c1">//设置精灵位置</span>
</span><span class='line'><span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">tree2</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="c1">//通过纹理缓存截取树</span>
</span></code></pre></td></tr></table></div></figure>


<p>平时我们玩游戏的时候，遇到游戏中loading的画面时，基本上就是在缓存纹理，经过这个步骤后，我们玩游戏会快很多。因为不会去临时加载图片</p>

<h2>实例：</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="kt">bool</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">init</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">Layer</span><span class="o">::</span><span class="n">init</span><span class="p">()</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Size</span> <span class="n">visibleSize</span> <span class="o">=</span> <span class="n">Director</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getVisibleSize</span><span class="p">();</span>
</span><span class='line'>  <span class="n">Vec2</span> <span class="n">origin</span> <span class="o">=</span> <span class="n">Director</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getVisibleOrigin</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//背景精灵</span>
</span><span class='line'>  <span class="k">auto</span> <span class="n">background</span> <span class="o">=</span> <span class="n">Sprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;background.png&quot;</span><span class="p">);</span><span class="c1">//背景图</span>
</span><span class='line'>  <span class="c1">//background-&gt;setAnchorPoint(Vec2::ZERO);//指定锚点(默认坐标为0，0)或者:</span>
</span><span class='line'>  <span class="n">background</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="n">visibleSize</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="n">visibleSize</span><span class="p">.</span><span class="n">height</span><span class="o">/</span><span class="mi">2</span><span class="p">));</span><span class="c1">//指定位置(默认锚点为0.5，0.5)</span>
</span><span class='line'>  <span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">background</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">auto</span> <span class="n">tree1</span> <span class="o">=</span> <span class="n">Sprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;tree1.png&quot;</span><span class="p">,</span> <span class="n">Rect</span><span class="p">(</span><span class="mi">608</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span> <span class="mi">300</span><span class="p">,</span> <span class="mi">298</span><span class="p">));</span><span class="c1">//左上角的坐标，宽，高</span>
</span><span class='line'>  <span class="c1">//指定大图，指定Rect获取树的截图</span>
</span><span class='line'>  <span class="n">tree1</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span><span class="mi">230</span><span class="p">));</span>
</span><span class='line'>  <span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">tree1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">Texture2D</span><span class="o">*</span> <span class="n">cache</span> <span class="o">=</span> <span class="n">Director</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getTextureCache</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">addImage</span><span class="p">(</span><span class="s">&quot;tree1.png&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">auto</span> <span class="n">tree2</span> <span class="o">=</span> <span class="n">Sprite</span><span class="o">::</span><span class="n">create</span><span class="p">();</span>
</span><span class='line'>  <span class="n">tree2</span><span class="o">-&gt;</span><span class="n">setTexture</span><span class="p">(</span><span class="n">cache</span><span class="p">);</span>
</span><span class='line'>  <span class="n">tree2</span><span class="o">-&gt;</span><span class="n">setTextureRect</span><span class="p">(</span><span class="n">Rect</span><span class="p">(</span><span class="mi">70</span><span class="p">,</span> <span class="mi">72</span><span class="p">,</span> <span class="mi">187</span><span class="p">,</span> <span class="mi">267</span><span class="p">));</span>
</span><span class='line'>  <span class="n">tree2</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="mi">500</span><span class="p">,</span> <span class="mi">200</span><span class="p">));</span><span class="c1">//设置精灵位置</span>
</span><span class='line'>  <span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">tree2</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">//通过纹理缓存截取树</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>源代码下载地址：</h1>

<blockquote cite='陈浩翔'>
GITHUB源码下载地址:<strong>【<a href='https://github.com/chenhaoxiang/cocos2d-x/tree/master/20170822/code/Cocos2dxSprite' target='_blank'>点我进行下载</a>】</strong></p>
</blockquote>


<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【问题解决】SSM-@Transactional注解事务无效探讨]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/08/21/Spring-SpringMVC-MyBatis-Transactional-Invalid/"/>
    <updated>2017-08-21T13:38:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/08/21/Spring-SpringMVC-MyBatis-Transactional-Invalid</id>
    <content type="html"><![CDATA[<p>Spring SpringMVC MyBatis框架中-@Transactional注解事务无效解决方法</p>

<!-- more -->


<hr />

<p>SpringMVC-Spring-MyBatis框架<br/>
数据库:SQL SERVER 2008<br/>
以前都是用的MySQL数据库，没有出现这个问题，现在换成sql server了，结果事务没有起作用了。</p>

<p>经过一番测试：<br/>
排除以下几个问题:
1.数据库原因，不存在的。MySQL中只有InnoDB引擎支持事务。SqlServer2008的企业版作为收费数据库，不可能不支持事务操作。<br/>
2.异常类型不是unchecked异常，我写的异常是1/0，为了保险起见，我还抛出RuntimeException试了，结果也是没有回滚。<br/>
3.是不是配置文件的没配置好，比如Bean，比如:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!-- 配置事物管理类 --&gt;
</span><span class='line'>&lt;bean id="transactionManager"
</span><span class='line'>      class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt;
</span><span class='line'>    &lt;property name="dataSource" ref="dynamicDataSource" /&gt;
</span><span class='line'>&lt;/bean&gt;
</span><span class='line'>&lt;!-- 开启注解式事物扫描 --&gt;
</span><span class='line'>&lt;tx:annotation-driven transaction-manager="transactionManager"  /&gt;</span></code></pre></td></tr></table></div></figure>


<p>检查几遍，排除这个原因。
4.还有一种情况，因为我以前写的都是对一个数据库的操作，现在是一个数据源多个数据库操作，当时有点怀疑我是不是少配置了什么，导致多数据库时无法启动事务，于是便还原到一个数据库，结果事务还是无效，排除此问题</p>

<p>经过一番折腾，在网上找到一篇文章，说原因是applicationContext.xml的父容器先于Servlet的子容器生效，将Service提前加载了。</p>

<p>于是验证了一下，首先去掉Service实现类的@Service注解，在spring.xml(也就是applicationContext.xml，我起名是spring.xml)，配置该类的Bean:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;bean id="sysUserServiceImp" class="cn.kx59.user.service.imp.SysUserServiceImp"&gt;&lt;/bean&gt;</span></code></pre></td></tr></table></div></figure>


<p>结果运行之后，事务起作用了。</p>

<p>原因如下:<br/>
Spring容器优先加载由ServletContextListener（对应applicationContext.xml，我这里是spring.xml）产生的父容器，而SpringMVC（对应spring-mvc.xml）产生的是子容器。<br/>
子容器Controller进行扫描装配时装配的@Service注解的实例是没有经过事务加强处理，即没有事务处理能力的Service，而父容器进行初始化的Service是保证事务的增强处理能力的。如果不在子容器中将Service exclude掉，此时得到的将是原样的无事务处理能力的Service。
所以我们要在扫描的时候在子容器中将Service exclude掉就好了。</p>

<p>也就是在spring-mvc.xml中进行如下修改:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!--扫描Controller--&gt;
</span><span class='line'>&lt;context:component-scan base-package="cn.kx59"&gt;
</span><span class='line'>    &lt;context:include-filter type="annotation"
</span><span class='line'>                            expression="org.springframework.stereotype.Controller" /&gt;
</span><span class='line'>    &lt;!--下面这个是防止事务没起作用，spring.xml的父容器先于Servlet的子容器生效，将Service提前加载了。这里不用再进行加载装配--&gt;
</span><span class='line'>    &lt;context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service" /&gt;
</span><span class='line'>&lt;/context:component-scan&gt;</span></code></pre></td></tr></table></div></figure>


<p>注意: 请将@Transactional注解写在实现类的方法或类上！不建议写在接口类中！  <br/>
Spring团队的建议是你在具体的类（或类的方法）上使用 @Transactional 注解，而不要使用在类所要实现的任何接口上。你当然可以在接口上使用 @Transactional 注解，但是这将只能当你设置了基于接口的代理时它才生效。因为注解是不能继承的，这就意味着如果你正在使用基于类的代理时，那么事务的设置将不能被基于类的代理所识别，而且对象也将不会被事务代理所包装（将被确认为严重的）。因此，请接受Spring团队的建议并且在具体的类上使用 @Transactional 注解。</p>

<p>在以上解决方法中，若将@Transactional 注解写在接口上，则无法实现事务。所以请将 @Transactional 注解写在实现类中！</p>

<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【C++】C++运算符重载-基础]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/08/10/operator-overloading-base/"/>
    <updated>2017-08-10T18:40:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/08/10/operator-overloading-base</id>
    <content type="html"><![CDATA[<p>本篇博客讲解:<br/>
运算符重载基础，以及实例</p>

<!-- more -->


<hr />

<h1>运算符重载基础</h1>

<p>运算符重载就是对已有的运算符赋予新的含义，实现新的功能。</p>

<p>运算符重载，如“+”，它可以对int、float、string类型进行加法运算。<br/>
&ldquo;&lt;&lt;"是C++中的左移运算符，但是在输出操作中与cout配合被称为流插入运算符，可以进行输出。<br/>
&rdquo;>>&ldquo;是右移运算符，与cin配合使用被称为流提取运算符。<br/>
它们都被称为运算符重载。</p>

<p>我们也可以根据我们的需要对C++中现有的运算符进行重载，来赋予这些运算符新的含义。<br/>
如CTime类，重载+运算符，实现两个CTime对象的相加。</p>

<p>介绍运算符重载前，我们看下如何来实现两个CTime对象相加。 <br/>
CTime重载+运算符实现两个CTime对象的相加，<br/>
time1 + time2 <br/>
首先需要定义一个重载的运算符函数，此后在执行被重载的运算符时，系统将自动调用该运算符函数。<br/>
<strong>运算符重载实际上是函数的重载</strong>。</p>

<p>运算符重载的格式：返回类型 operator运算符（参数列表）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CTime operator+(CTime& time1, CTime& time2)</span></code></pre></td></tr></table></div></figure>


<p>
 
重载的运算符函数可以作为一般的函数，也可以作为类的成员函数。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CTime operator+(CTime& time) </span></code></pre></td></tr></table></div></figure>


<p>
下面通过代码来看吧
普通的，通过函数来相加:</p>

<figure class='code'><figcaption><span>Time.h中声明友元函数</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="k">friend</span> <span class="n">CTime</span> <span class="nf">addTime</span><span class="p">(</span><span class="n">CTime</span><span class="o">&amp;</span> <span class="n">time1</span><span class="p">,</span> <span class="n">CTime</span><span class="o">&amp;</span> <span class="n">time2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>main.cpp中直接实现</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">CTime</span> <span class="nf">addTime</span><span class="p">(</span><span class="n">CTime</span><span class="o">&amp;</span> <span class="n">time1</span><span class="p">,</span> <span class="n">CTime</span><span class="o">&amp;</span> <span class="n">time2</span><span class="p">)</span><span class="c1">//这里的相加是时分秒进行相加，满60进1</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">hour</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">minute</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">second</span> <span class="o">=</span> <span class="n">time1</span><span class="p">.</span><span class="n">m_nSecond</span> <span class="o">+</span> <span class="n">time2</span><span class="p">.</span><span class="n">m_nSecond</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">second</span> <span class="o">&gt;</span> <span class="mi">60</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">minute</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="n">second</span> <span class="o">-=</span> <span class="mi">60</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">minute</span> <span class="o">+=</span> <span class="p">(</span><span class="n">time1</span><span class="p">.</span><span class="n">m_nMinute</span> <span class="o">+</span> <span class="n">time2</span><span class="p">.</span><span class="n">m_nMinute</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">minute</span> <span class="o">&gt;</span> <span class="mi">60</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">hour</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="n">minute</span> <span class="o">-=</span> <span class="mi">60</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">hour</span> <span class="o">+=</span> <span class="p">(</span><span class="n">time1</span><span class="p">.</span><span class="n">m_nHour</span> <span class="o">+</span> <span class="n">time2</span><span class="p">.</span><span class="n">m_nHour</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">hour</span> <span class="o">&gt;</span> <span class="mi">24</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">hour</span> <span class="o">-=</span> <span class="mi">24</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">CTime</span><span class="p">(</span><span class="n">hour</span><span class="p">,</span><span class="n">minute</span><span class="p">,</span><span class="n">second</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//输出</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">CTime</span> <span class="n">time</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">20</span><span class="p">);</span>
</span><span class='line'>  <span class="n">CTime</span> <span class="n">time2</span><span class="p">(</span><span class="mi">12</span><span class="p">);</span>
</span><span class='line'>  <span class="n">CTime</span> <span class="n">time3</span> <span class="o">=</span> <span class="n">addTime</span><span class="p">(</span><span class="n">time</span><span class="p">,</span> <span class="n">time2</span><span class="p">);</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">time3</span><span class="p">.</span><span class="n">getHour</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">time3</span><span class="p">.</span><span class="n">getMinute</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">time3</span><span class="p">.</span><span class="n">getSecond</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">getchar</span><span class="p">();</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>+号运算重载：</p>

<figure class='code'><figcaption><span>Time.h中声明</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="k">friend</span> <span class="n">CTime</span> <span class="k">operator</span><span class="o">+</span><span class="p">(</span><span class="n">CTime</span><span class="o">&amp;</span> <span class="n">time1</span><span class="p">,</span> <span class="n">CTime</span><span class="o">&amp;</span> <span class="n">time2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>main.cpp中实现</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">CTime</span> <span class="k">operator</span><span class="o">+</span><span class="p">(</span><span class="n">CTime</span><span class="o">&amp;</span> <span class="n">time1</span><span class="p">,</span> <span class="n">CTime</span><span class="o">&amp;</span> <span class="n">time2</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">hour</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">minute</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">second</span> <span class="o">=</span> <span class="n">time1</span><span class="p">.</span><span class="n">m_nSecond</span> <span class="o">+</span> <span class="n">time2</span><span class="p">.</span><span class="n">m_nSecond</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">second</span> <span class="o">&gt;</span> <span class="mi">60</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">minute</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="n">second</span> <span class="o">-=</span> <span class="mi">60</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">minute</span> <span class="o">+=</span> <span class="p">(</span><span class="n">time1</span><span class="p">.</span><span class="n">m_nMinute</span> <span class="o">+</span> <span class="n">time2</span><span class="p">.</span><span class="n">m_nMinute</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">minute</span> <span class="o">&gt;</span> <span class="mi">60</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">hour</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="n">minute</span> <span class="o">-=</span> <span class="mi">60</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">hour</span> <span class="o">+=</span> <span class="p">(</span><span class="n">time1</span><span class="p">.</span><span class="n">m_nHour</span> <span class="o">+</span> <span class="n">time2</span><span class="p">.</span><span class="n">m_nHour</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">hour</span> <span class="o">&gt;</span> <span class="mi">24</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">hour</span> <span class="o">-=</span> <span class="mi">24</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">CTime</span><span class="p">(</span><span class="n">hour</span><span class="p">,</span> <span class="n">minute</span><span class="p">,</span> <span class="n">second</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">CTime</span> <span class="n">time</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">20</span><span class="p">);</span>
</span><span class='line'>  <span class="n">CTime</span> <span class="nf">time2</span><span class="p">(</span><span class="mi">12</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">CTime</span> <span class="n">time4</span> <span class="o">=</span> <span class="n">time</span> <span class="o">+</span> <span class="n">time2</span><span class="p">;</span>    <span class="c1">//使用+号重载对两个CTime对象进行相加</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">time4</span><span class="p">.</span><span class="n">getHour</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">time4</span><span class="p">.</span><span class="n">getMinute</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">time4</span><span class="p">.</span><span class="n">getSecond</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">getchar</span><span class="p">();</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>输出结果:</h2>

<p><img src="http://i.imgur.com/3xtl8kk.png" alt="" /></p>

<p>在CTime类内部定义+号重载运算符</p>

<figure class='code'><figcaption><span>Time.h中声明</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">CTime</span> <span class="k">operator</span><span class="o">+</span><span class="p">(</span><span class="n">CTime</span><span class="o">&amp;</span> <span class="n">time</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Time.cpp中实现</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">CTime</span> <span class="n">CTime</span><span class="o">::</span><span class="k">operator</span><span class="o">+</span><span class="p">(</span><span class="n">CTime</span><span class="o">&amp;</span> <span class="n">time</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">hour</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">minute</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">second</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">m_nSecond</span> <span class="o">+</span> <span class="n">time</span><span class="p">.</span><span class="n">m_nSecond</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">second</span> <span class="o">&gt;</span> <span class="mi">60</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">minute</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="n">second</span> <span class="o">-=</span> <span class="mi">60</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">minute</span> <span class="o">+=</span> <span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">m_nMinute</span> <span class="o">+</span> <span class="n">time</span><span class="p">.</span><span class="n">m_nMinute</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">minute</span> <span class="o">&gt;</span> <span class="mi">60</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">hour</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="n">minute</span> <span class="o">-=</span> <span class="mi">60</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">hour</span> <span class="o">+=</span> <span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">m_nHour</span> <span class="o">+</span> <span class="n">time</span><span class="p">.</span><span class="n">m_nHour</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">hour</span> <span class="o">&gt;</span> <span class="mi">24</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">hour</span> <span class="o">-=</span> <span class="mi">24</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">CTime</span><span class="p">(</span><span class="n">hour</span><span class="p">,</span> <span class="n">minute</span><span class="p">,</span> <span class="n">second</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>main.cpp中调用</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">CTime</span> <span class="n">time</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">20</span><span class="p">);</span>
</span><span class='line'>  <span class="n">CTime</span> <span class="n">time2</span><span class="p">(</span><span class="mi">12</span><span class="p">);</span>
</span><span class='line'>  <span class="n">CTime</span> <span class="n">time4</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="k">operator</span><span class="o">+</span><span class="p">(</span><span class="n">time2</span><span class="p">);</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">time4</span><span class="p">.</span><span class="n">getHour</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">time4</span><span class="p">.</span><span class="n">getMinute</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">time4</span><span class="p">.</span><span class="n">getSecond</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">getchar</span><span class="p">();</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>结果和前面的是一样的。</p>

<h1>源代码下载地址：</h1>

<blockquote cite='陈浩翔'>
GITHUB源码下载地址:<strong>【<a href='https://github.com/chenhaoxiang/C-Study/tree/master/20170810/code/operatorOverloadingBase' target='_blank'>点我进行下载</a>】</strong>
</blockquote>


<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【问题解决】Mybatis一对多/多对多查询时只查出了一条数据]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/08/08/mybatis-multilevel-query-question/"/>
    <updated>2017-08-08T13:38:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/08/08/mybatis-multilevel-query-question</id>
    <content type="html"><![CDATA[<p>问题描述:
如果三表(包括了关系表)级联查询，主表和明细表的主键都是id的话，明细表的多条数据只能查询出来第一条/最后一条数据。</p>

<!-- more -->


<hr />

<p>三个表，权限表(Permission)，权限组表(PermissionGroup)，权限组与权限的关系表(PermissionPermissionGroupKey)</p>

<p>实体类就不写上来了。</p>

<p>原出错映射文件:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;resultMap</span> <span class="na">id=</span><span class="s">&quot;permissionGroupResultMap&quot;</span> <span class="na">type=</span><span class="s">&quot;cn.kx59.admin.entity.PermissionGroup&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;id</span> <span class="na">column=</span><span class="s">&quot;id&quot;</span> <span class="na">property=</span><span class="s">&quot;id&quot;</span> <span class="na">jdbcType=</span><span class="s">&quot;INTEGER&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;result</span> <span class="na">column=</span><span class="s">&quot;name&quot;</span> <span class="na">property=</span><span class="s">&quot;name&quot;</span> <span class="na">jdbcType=</span><span class="s">&quot;VARCHAR&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;result</span> <span class="na">column=</span><span class="s">&quot;decipher&quot;</span> <span class="na">property=</span><span class="s">&quot;decipher&quot;</span> <span class="na">jdbcType=</span><span class="s">&quot;VARCHAR&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;result</span> <span class="na">column=</span><span class="s">&quot;create_time&quot;</span> <span class="na">property=</span><span class="s">&quot;createTime&quot;</span> <span class="na">jdbcType=</span><span class="s">&quot;TIMESTAMP&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- 一个权限组 对应多个权限--&gt;</span>
</span><span class='line'>    <span class="nt">&lt;collection</span> <span class="na">property=</span><span class="s">&quot;permissionArrayList&quot;</span> <span class="na">ofType=</span><span class="s">&quot;cn.kx59.admin.entity.Permission&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;id</span> <span class="na">column=</span><span class="s">&quot;id&quot;</span> <span class="na">property=</span><span class="s">&quot;id&quot;</span> <span class="na">jdbcType=</span><span class="s">&quot;INTEGER&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;result</span> <span class="na">column=</span><span class="s">&quot;url&quot;</span> <span class="na">property=</span><span class="s">&quot;url&quot;</span> <span class="na">jdbcType=</span><span class="s">&quot;VARCHAR&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;result</span> <span class="na">column=</span><span class="s">&quot;name&quot;</span> <span class="na">property=</span><span class="s">&quot;name&quot;</span> <span class="na">jdbcType=</span><span class="s">&quot;VARCHAR&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;result</span> <span class="na">column=</span><span class="s">&quot;explain&quot;</span> <span class="na">property=</span><span class="s">&quot;explain&quot;</span> <span class="na">jdbcType=</span><span class="s">&quot;VARCHAR&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;result</span> <span class="na">column=</span><span class="s">&quot;decipher&quot;</span> <span class="na">property=</span><span class="s">&quot;decipher&quot;</span> <span class="na">jdbcType=</span><span class="s">&quot;VARCHAR&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;result</span> <span class="na">column=</span><span class="s">&quot;create_time&quot;</span> <span class="na">property=</span><span class="s">&quot;createTime&quot;</span> <span class="na">jdbcType=</span><span class="s">&quot;TIMESTAMP&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/collection&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/resultMap&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!--查询所有的权限组以及权限组包含的权限--&gt;</span>
</span><span class='line'>  <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">&quot;selectAllPermissionGroupAndPermission&quot;</span> <span class="na">resultMap=</span><span class="s">&quot;permissionGroupResultMap&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>        SELECT *
</span><span class='line'>  FROM [QPWebDB].[dbo].[permission_group] pg
</span><span class='line'>  left join [QPWebDB].[dbo].[permission_permission_group] ppg on pg.id=ppg.permission_group_id
</span><span class='line'>  left join [QPWebDB].[dbo].[permission] p on p.permission_id=ppg.permission_id
</span><span class='line'>  <span class="nt">&lt;/select&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是因为主表和明细表的id字段名相同造成的。<br/>
问题的关键在于resultMap中如果不定义类似主键之类的能够区分每一条结果集的字段的话，会引起后面一条数据覆盖前面一条数据的现象。</p>

<p>解决方法一：<br/>
修改主表或者明细表的id名，保证不一致就行</p>

<p>解决方法二：<br/>
查询结果起别名 <br/>
修改映射文件如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;resultMap</span> <span class="na">id=</span><span class="s">&quot;permissionGroupResultMap&quot;</span> <span class="na">type=</span><span class="s">&quot;cn.kx59.admin.entity.PermissionGroup&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;id</span> <span class="na">column=</span><span class="s">&quot;id&quot;</span> <span class="na">property=</span><span class="s">&quot;id&quot;</span> <span class="na">jdbcType=</span><span class="s">&quot;INTEGER&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;result</span> <span class="na">column=</span><span class="s">&quot;name&quot;</span> <span class="na">property=</span><span class="s">&quot;name&quot;</span> <span class="na">jdbcType=</span><span class="s">&quot;VARCHAR&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;result</span> <span class="na">column=</span><span class="s">&quot;decipher&quot;</span> <span class="na">property=</span><span class="s">&quot;decipher&quot;</span> <span class="na">jdbcType=</span><span class="s">&quot;VARCHAR&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;result</span> <span class="na">column=</span><span class="s">&quot;create_time&quot;</span> <span class="na">property=</span><span class="s">&quot;createTime&quot;</span> <span class="na">jdbcType=</span><span class="s">&quot;TIMESTAMP&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- 一个权限组 对应多个权限--&gt;</span>
</span><span class='line'>    <span class="nt">&lt;collection</span> <span class="na">property=</span><span class="s">&quot;permissionArrayList&quot;</span> <span class="na">ofType=</span><span class="s">&quot;cn.kx59.admin.entity.Permission&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;id</span> <span class="na">column=</span><span class="s">&quot;p_id&quot;</span> <span class="na">property=</span><span class="s">&quot;id&quot;</span> <span class="na">jdbcType=</span><span class="s">&quot;INTEGER&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;result</span> <span class="na">column=</span><span class="s">&quot;url&quot;</span> <span class="na">property=</span><span class="s">&quot;url&quot;</span> <span class="na">jdbcType=</span><span class="s">&quot;VARCHAR&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;result</span> <span class="na">column=</span><span class="s">&quot;name&quot;</span> <span class="na">property=</span><span class="s">&quot;name&quot;</span> <span class="na">jdbcType=</span><span class="s">&quot;VARCHAR&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;result</span> <span class="na">column=</span><span class="s">&quot;explain&quot;</span> <span class="na">property=</span><span class="s">&quot;explain&quot;</span> <span class="na">jdbcType=</span><span class="s">&quot;VARCHAR&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;result</span> <span class="na">column=</span><span class="s">&quot;decipher&quot;</span> <span class="na">property=</span><span class="s">&quot;decipher&quot;</span> <span class="na">jdbcType=</span><span class="s">&quot;VARCHAR&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;result</span> <span class="na">column=</span><span class="s">&quot;create_time&quot;</span> <span class="na">property=</span><span class="s">&quot;createTime&quot;</span> <span class="na">jdbcType=</span><span class="s">&quot;TIMESTAMP&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/collection&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/resultMap&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!--查询所有的权限组以及权限组包含的权限--&gt;</span>
</span><span class='line'>  <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">&quot;selectAllPermissionGroupAndPermission&quot;</span> <span class="na">resultMap=</span><span class="s">&quot;permissionGroupResultMap&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>        SELECT pg.*,
</span><span class='line'>  p.id p_id,
</span><span class='line'>  p.url,
</span><span class='line'>  p.name,
</span><span class='line'>  p.explain,
</span><span class='line'>  p.decipher,
</span><span class='line'>  p.create_time
</span><span class='line'>  FROM [QPWebDB].[dbo].[permission_group] pg
</span><span class='line'>  left join [QPWebDB].[dbo].[permission_permission_group] ppg on pg.id=ppg.permission_group_id
</span><span class='line'>  left join [QPWebDB].[dbo].[permission] p on p.id=ppg.permission_id
</span><span class='line'>  <span class="nt">&lt;/select&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如上两种方法均能解决这个问题，希望对你有帮助 <br/>
有知道出现这个问题的原理的大佬欢迎在评论区解释下，O(∩_∩)O谢谢</p>

<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【小工具】CSDN博客导出工具-Java集成Maven开发]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/07/28/CSDNBlogExport/"/>
    <updated>2017-07-28T13:38:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/07/28/CSDNBlogExport</id>
    <content type="html"><![CDATA[<p>CSDN博客导出工具<br/>
之前一直想把CSDN的博客导入到自己的网站中，可是由于博客比较多，后面受朋友老郭启发，就找了个时间用Java开发了这款小工具。</p>

<!-- more -->


<hr />

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>


<h1>CSDNBlogExport</h1>

<p>CSDN博客导出工具</p>

<p>之前一直想把CSDN的博客导入到自己的网站中，可是由于博客比较多，后面受朋友老郭启发，就找了个时间用Java开发了这款小工具。<br/>
Had been trying to CSDN blog into their website, but because of the blog is more, inspired by my friend guo behind, will find a time this kind of small tools with Java development.</p>

<h1>only use</h1>

<p>直接下载CSDNBlogExport.7z解压使用即可。 <br/>
Direct download CSDNBlogExport.7z decompression can be used.<br/>
<img src="http://i.imgur.com/H5mMN3E.png" alt="" /></p>

<p><img src="http://i.imgur.com/MBLoPTU.png" alt="" /></p>

<p>经过测试，667篇博客，开50个线程，在54秒左右可以全部导出到文件。<br/>
Tested, 667 blog, open 50 threads, in 54 seconds can all exported to a file.</p>

<p>博客文件导出的存储规则是:<br/>
软件运行目录\blog\年-月\年-月-日 博客标题名.markdown <br/>
Blog file exported storage rule is:<br/>
Software running directory/blog/year-month/year-month-day blog title name.markdown</p>

<p><img src="http://i.imgur.com/tWkpxob.png" alt="" /></p>

<h1>开发</h1>

<p>CSDNBlogExport目录下是完整的程序代码<br/>
使用了WebMagic爬虫框架，本来自己写HttpURLConnection工具类也能实现的，只是比较耗时，偷个小懒，既然别人有更好的工具，为什么不用呢<br/>
技术含量呢，可以说基本没有什么，但是也是花了大半天时间做的。<br/>
中间还遇到部分玩家无法导出博客的情况，因为CSDN对于用户的链接命名分了2种情况，当时写的时候没有发现，是测试别人博客的时候发现的，经过半小时解决了这个问题。</p>

<p>虽然很想把这个程序完善，但是由于时间限制还是不能做太多事。<br/>
不保证本版本一直能使用下去，如果某天本程序不能使用了(肯定是CSDN对返回的数据进行了处理或者进行了权限控制)，请留言或者联系我QQ:619699629或者邮箱:<a href="&#x6d;&#x61;&#x69;&#108;&#x74;&#x6f;&#58;&#117;&#x69;&#102;&#x75;&#x74;&#x75;&#114;&#x65;&#x40;&#117;&#105;&#x66;&#x75;&#116;&#117;&#114;&#x65;&#46;&#99;&#111;&#x6d;">&#117;&#105;&#102;&#x75;&#116;&#x75;&#114;&#x65;&#64;&#x75;&#x69;&#x66;&#117;&#x74;&#x75;&#114;&#x65;&#46;&#x63;&#x6f;&#109;</a><br/>
我会利用空闲时间跟上csdn对博客的升级，以保证能继续使用</p>

<p>此版本为1.0版本，希望用的朋友遇到bug，在这里留言或联系我，我会及时修复。</p>

<p>也欢迎朋友加入进来与我一起完善本程序。</p>

<p>本小程序可导出任意CSDN用户的博客，但是仅供学习使用。
免责声明:如果导出博客侵犯他人权益，引起纠纷的，一概与本人无关。</p>

<h1>development</h1>

<p>CSDNBlogExport directory is a complete program code
Used WebMagic crawler frame, original, write their own HttpURLConnection tools can be achieved only takes time, steal a little lazy, now that people have a better tools, why not
Technical content, it was basically have no what, but also spent most of time to do. <br/>
And in case of some players cannot export blog because CSDN links named points to the user for two kinds of circumstances, then write not found, is to test others while on a blog, solved the problem after half an hour.</p>

<p>Although very want to send this application is perfect, but due to time constraints or can&rsquo;t do too many things. <br/>
Does not guarantee that this version has been able to use, if one day can&rsquo;t use this program (must be CSDN on the returned data processing or access control), please leave a message or contact me QQ: 619699629 or email: <a href="&#x6d;&#97;&#x69;&#x6c;&#116;&#111;&#58;&#x75;&#x69;&#102;&#x75;&#x74;&#x75;&#x72;&#101;&#x40;&#117;&#105;&#102;&#x75;&#x74;&#117;&#x72;&#x65;&#x2e;&#99;&#x6f;&#109;">&#x75;&#105;&#102;&#117;&#x74;&#117;&#x72;&#101;&#x40;&#x75;&#105;&#102;&#x75;&#x74;&#117;&#114;&#x65;&#46;&#x63;&#111;&#x6d;</a></p>

<p>I will use free time keep up with the CSDN on updating the blog, to ensure that can continue to use</p>

<p>This version is 1.0 version, hope to meet with friends bug, leave a message or contact me here, I&rsquo;ll repair in time.<br/>
Also welcome friends to join in with me in perfect this procedure.<br/>
This small program can export any CSDN user&rsquo;s blog, but only for the use of learning.<br/>
Disclaimer: if the export blog infringement of rights and interests of others, cause disputes, all has nothing to do with himself.</p>

<h1>Bug修复记录</h1>

<p>2017.7.31：
修复html编辑器写完博客后导出博客不全的bug<br/>
现在版本 v1.1<br/>
感谢CSDN博主<a href="http://blog.csdn.net/zuochao_2013" target='_blank'>[三名狂客]</a>提出的Bug</p>

<blockquote><p>2017.8.16：<br/>
进行版本升级，因为CSDN把一个分页的bug给堵上了，原来的版本不能使用，请下载最新版本2.0<br/>
现在版本 v2.0  <br/>
感谢CSDN博主<a href="http://blog.csdn.net/u011637069" target='_blank'>[龙腾四海365]</a>提出的Bug</p></blockquote>

<p>本次bug修复后，时间会延长一点，因为我在里面把分页的线程写死了，50个线程，有兴趣的可以自己扩展。<br/>
经过测试，在输入50线程时，668篇博客的爬取时间为92S。<br/>
<img src="http://i.imgur.com/XPP3svY.png" alt="" /></p>

<p>2017.9.6：<br/>
进行版本升级，部分拥有两个id的CSDN用户无法备份博客，已进行修复，请下载最新版本2.1<br/>
现在版本 v2.1  <br/>
感谢CSDN博主<a href="http://blog.csdn.net/a525715275" target='_blank'>[沐雨浩]</a>提示的Bug</p>

<h1>源代码下载地址：</h1>

<blockquote cite='陈浩翔'>
GITHUB项目地址:<strong>【<a href='https://github.com/chenhaoxiang/CSDNBlogExport' target='_blank'>点我进行访问</a>】</strong>
</blockquote>


<p>如果无法访问，请翻墙哦</p>

<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【问题解决】MyBatis分页查询SQL Server2008时出现'@P0' 附近有语法错误]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/07/04/MyBatis-SQL-Server2008-show-p0-error/"/>
    <updated>2017-07-04T13:38:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/07/04/MyBatis-SQL-Server2008-show-p0-error</id>
    <content type="html"><![CDATA[<p>MyBatis分页查询SQL Server2008时出现'@P0' 附近有语法错误"<br/>
Error querying database.  Cause: com.microsoft.sqlserver.jdbc.SQLServerException: &lsquo;@P0&rsquo; 附近有语法错误。</p>

<!-- more -->


<hr />

<p>错误如下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>org.springframework.jdbc.UncategorizedSQLException: 
</span><span class='line'>### Error querying database.  Cause: com.microsoft.sqlserver.jdbc.SQLServerException: '@P0' 附近有语法错误。
</span><span class='line'>### The error may exist in file [E:\Client\KaiXinHuYu\target\classes\cn\kx59\user\mapping\AccountsInfoMapper.xml]
</span><span class='line'>### The error may involve cn.kx59.user.dao.AccountsInfoMapper.selectPageData-Inline
</span><span class='line'>### The error occurred while setting parameters
</span><span class='line'>### SQL: select top ?       UserID, GameID, ProtectID, PasswordID, SpreaderID, Accounts, NickName, RegAccounts,      UnderWrite, PassPortID, Compellation, LogonPass, InsurePass, FaceID, CustomID, Present,      UserMedal, Experience, LoveLiness, UserRight, MasterRight, ServiceRight, MasterOrder,      MemberOrder, MemberOverDate, MemberSwitchDate, CustomFaceVer, Gender, Nullity, NullityOverDate,      StunDown, MoorMachine, IsAndroid, WebLogonTimes, GameLogonTimes, PlayTimeCount, OnLineTimeCount,      LastLogonIP, LastLogonDate, LastLogonMobile, LastLogonMachine, RegisterIP, RegisterDate,      RegisterMobile, RegisterMachine     from AccountsInfo where UserID not in(select top ? UserID from AccountsInfo)
</span><span class='line'>### Cause: com.microsoft.sqlserver.jdbc.SQLServerException: '@P0' 附近有语法错误。
</span><span class='line'>; uncategorized SQLException for SQL []; SQL state [S0001]; error code [102]; '@P0' 附近有语法错误。; nested exception is com.microsoft.sqlserver.jdbc.SQLServerException: '@P0' 附近有语法错误。
</span><span class='line'>
</span><span class='line'>  at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:84)
</span><span class='line'>  at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
</span><span class='line'>  at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
</span><span class='line'>  at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:73)
</span><span class='line'>  at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:371)
</span><span class='line'>  at $Proxy24.selectList(Unknown Source)
</span><span class='line'>  at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:198)
</span><span class='line'>  at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:122)
</span><span class='line'>  at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:64)
</span><span class='line'>  at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:53)
</span><span class='line'>  at $Proxy25.selectPageData(Unknown Source)
</span><span class='line'>  at cn.kx59.user.service.imp.AccountsInfoServiceImp.selectPageData(AccountsInfoServiceImp.java:33)
</span><span class='line'>  at cn.kx59.user.service.imp.AccountsInfoServiceImp$$FastClassBySpringCGLIB$$f0736e8f.invoke(&lt;generated&gt;)
</span><span class='line'>  at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
</span><span class='line'>  at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:718)
</span><span class='line'>  at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)
</span><span class='line'>  at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52)
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>出错代码的MyBatis中查询语句为：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  &lt;!--分页查询--&gt;
</span><span class='line'>  &lt;select id="selectPageData" resultMap="BaseResultMap" parameterType="java.lang.Integer"&gt;
</span><span class='line'>    select top #{pageSize} &lt;include refid="Base_Column_List" /&gt; from AccountsInfo where UserID not in(select top #{startN} UserID from AccountsInfo)
</span><span class='line'>  &lt;/select&gt;</span></code></pre></td></tr></table></div></figure>


<p>其实这是因为top后面不能跟占位符'？'号的原因，可以看调试的sql语句，mybatis为了防止注入，会先使用?号占位符。</p>

<p>错误解释如下：<br/>
在Java中对数据库查询时经常使用“Select Top ？ * From 表名 Where 列名 = ？”的SQL语句，此时的问号是PreparedStatement预编译对象的参数占位符，需要使用setXX()系列方法对其赋值后再执行。但是，Top后面是不允许使用问号占位符的，此处的错误就是由此引起的。</p>

<p>解决方法:<br/>
使用<code>$</code>代替#，使用#传入参数是，sql语句解析是会加上"&ldquo;,当成字符串来解析，会加入占位符?，再使用setXX()方法后赋值再执行，#{}传参能防止sql注入。<br/>
而<code>${}</code>这种方式 是直接传值！在这里无法使用占位符的情况下，可以使用<code>$</code>，但是自己写好防范哦，以免被注入了</p>

<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【Cocos2d-x】开发实战-Cococs2d-x中的菜单]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/07/01/Cococs2d-x-MenuItem/"/>
    <updated>2017-07-01T13:38:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/07/01/Cococs2d-x-MenuItem</id>
    <content type="html"><![CDATA[<p>本篇博客讲解:  <br/>
1.使用菜单<br/>
2.文本菜单<br/>
3.精灵菜单和图片菜单<br/>
4.开关菜单</p>

<!-- more -->


<hr />

<h1>使用菜单</h1>

<p>Menu - 菜单<br/>
MenuItem - 菜单项</p>

<p>菜单分类实际上是按照菜单项分类的<br/>
菜单和菜单项的继承关系图:<br/>
<img src="http://i.imgur.com/OYKnEka.png" alt="" /></p>

<p>文本菜单,精灵菜单，图片菜单和开关菜单其实准确来讲，应该是:<br/>
文本菜单项,精灵菜单项，图片菜单项和开关菜单项</p>

<p>继承MenuItemLabel的菜单其实都是文本菜单  <br/>
精灵菜单:MenuItemSprite的子类是图片菜单MenuItemImage<br/>
开关菜单:MenuItemToggle</p>

<h1>文本菜单</h1>

<p>文本菜单是菜单项只是显示文本<br/>
文本菜单类包括了MenuItemLabel、MenuItemFont和MenuItemAtlasFont。MenuItemLabel是个抽象类，具体使用的时候是使用MenuItemFont和MenuItemAtlasFont两个类。
文本菜单类MenuItemFont，它的其中一个创建函数create定义如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="k">static</span> <span class="n">MenuItemFont</span><span class="o">*</span> <span class="nf">create</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">value</span><span class="p">,</span> <span class="c1">//要显示的文本</span>
</span><span class='line'><span class="k">const</span> <span class="n">ccMenuCallback</span> <span class="o">&amp;</span> <span class="n">callback</span>  <span class="c1">//菜单操作的回调函数指针,菜单项被点击之后回调的函数</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>cocos2d帮我们做了一个宏来帮助我们传递回调函数的参数,CC_CALLBACK_n,n为回调的参数个数<br/>
<img src="http://i.imgur.com/6JjL3zZ.png" alt="" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="c1">// new callbacks based on C++11</span>
</span><span class='line'><span class="cp">#define CC_CALLBACK_0(__selector__,__target__, ...) std::bind(&amp;__selector__,__target__, ##__VA_ARGS__)</span>
</span><span class='line'><span class="cp">#define CC_CALLBACK_1(__selector__,__target__, ...) std::bind(&amp;__selector__,__target__, std::placeholders::_1, ##__VA_ARGS__)</span>
</span><span class='line'><span class="cp">#define CC_CALLBACK_2(__selector__,__target__, ...) std::bind(&amp;__selector__,__target__, std::placeholders::_1, std::placeholders::_2, ##__VA_ARGS__)</span>
</span><span class='line'><span class="cp">#define CC_CALLBACK_3(__selector__,__target__, ...) std::bind(&amp;__selector__,__target__, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3, ##__VA_ARGS__)</span>
</span></code></pre></td></tr></table></div></figure>


<p>文本菜单类MenuItemAtlasFont是基于图片集的文本菜单项，它的其中一个创建函数create定义如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="k">static</span> <span class="n">MenuItemAtlasFont</span><span class="o">*</span> <span class="nf">create</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">value</span><span class="p">,</span><span class="c1">//要显示的文本</span>
</span><span class='line'> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">charMapFile</span><span class="p">,</span> <span class="c1">//图片集文件</span>
</span><span class='line'><span class="kt">int</span> <span class="n">itemWidth</span><span class="p">,</span> <span class="c1">//要截取的文字在图片中的宽度</span>
</span><span class='line'><span class="kt">int</span> <span class="n">itemHeight</span><span class="p">,</span> <span class="c1">//要截取的文字在图片中的高度</span>
</span><span class='line'><span class="kt">char</span> <span class="n">startCharMap</span><span class="p">,</span><span class="c1">//文字之间的间隔符</span>
</span><span class='line'> <span class="k">const</span> <span class="n">ccMenuCallback</span><span class="o">&amp;</span> <span class="n">callback</span><span class="c1">//菜单操作的回调函数指针</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>实例:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="kt">bool</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">init</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">Layer</span><span class="o">::</span><span class="n">init</span><span class="p">())</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Size</span> <span class="n">visibleSize</span> <span class="o">=</span> <span class="n">Director</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getVisibleSize</span><span class="p">();</span>
</span><span class='line'><span class="n">Vec2</span> <span class="n">origin</span> <span class="o">=</span> <span class="n">Director</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getVisibleOrigin</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">Sprite</span> <span class="o">*</span><span class="n">bg</span> <span class="o">=</span> <span class="n">Sprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;menu/background.png&quot;</span><span class="p">);</span> <span class="c1">//背景图片精灵</span>
</span><span class='line'><span class="n">bg</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">visibleSize</span><span class="p">.</span><span class="n">width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'><span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">visibleSize</span><span class="p">.</span><span class="n">height</span> <span class="o">/</span> <span class="mi">2</span><span class="p">));</span>
</span><span class='line'><span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">bg</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">MenuItemFont</span><span class="o">::</span><span class="n">setFontName</span><span class="p">(</span><span class="s">&quot;Times New Roman&quot;</span><span class="p">);</span><span class="c1">//使用系统字体，设置系统字体的名字</span>
</span><span class='line'><span class="n">MenuItemFont</span><span class="o">::</span><span class="n">setFontSize</span><span class="p">(</span><span class="mi">86</span><span class="p">);</span><span class="c1">//设置系统字体的大小</span>
</span><span class='line'><span class="n">MenuItemFont</span> <span class="o">*</span><span class="n">item1</span> <span class="o">=</span> <span class="n">MenuItemFont</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;Start&quot;</span><span class="p">,</span>
</span><span class='line'><span class="n">CC_CALLBACK_1</span><span class="p">(</span><span class="n">HelloWorld</span><span class="o">::</span><span class="n">menuItem1Callback</span><span class="p">,</span> <span class="k">this</span><span class="p">));</span> <span class="c1">//创建基于系统字体的MenuItemFont</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">MenuItemAtlasFont</span> <span class="o">*</span><span class="n">item2</span> <span class="o">=</span> <span class="n">MenuItemAtlasFont</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;Help&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s">&quot;menu/tuffy_bold_italic-charmap.png&quot;</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">65</span><span class="p">,</span> <span class="sc">&#39; &#39;</span><span class="p">,</span>
</span><span class='line'><span class="n">CC_CALLBACK_1</span><span class="p">(</span><span class="n">HelloWorld</span><span class="o">::</span><span class="n">menuItem2Callback</span><span class="p">,</span> <span class="k">this</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="n">Menu</span><span class="o">*</span> <span class="n">mn</span> <span class="o">=</span> <span class="n">Menu</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">item1</span><span class="p">,</span> <span class="n">item2</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span><span class="c1">//把MenuItem放到Menu里，不能直接把MenuItem放到层里</span>
</span><span class='line'><span class="n">mn</span><span class="o">-&gt;</span><span class="n">alignItemsVertically</span><span class="p">();</span><span class="c1">//设置菜单位置，垂直对齐</span>
</span><span class='line'><span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">mn</span><span class="p">);</span><span class="c1">//把菜单放到层里</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">menuItem1Callback</span><span class="p">(</span><span class="n">Ref</span><span class="o">*</span> <span class="n">pSender</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="c1">//实际上这里传进来的参数是MenuItem类型，所以在这里可以强转，也可以直接把形参类型写成MenuItem，不写成Ref</span>
</span><span class='line'><span class="n">MenuItem</span><span class="o">*</span> <span class="n">item</span> <span class="o">=</span> <span class="p">(</span><span class="n">MenuItem</span><span class="o">*</span><span class="p">)</span><span class="n">pSender</span><span class="p">;</span>
</span><span class='line'><span class="c1">//一般情况下，我们不需要这个参数，只有在需要一些特定的信息的情况下，我们才需要进行转换拿值</span>
</span><span class='line'><span class="n">log</span><span class="p">(</span><span class="s">&quot;Touch Start Menu Item %p&quot;</span><span class="p">,</span> <span class="n">item</span><span class="p">);</span> <span class="c1">//这个输出是输出指针的地址，没有意义,在这里只是掩饰回调函数起作用了！且对象传过来了</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">menuItem2Callback</span><span class="p">(</span><span class="n">Ref</span><span class="o">*</span> <span class="n">pSender</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="n">MenuItem</span><span class="o">*</span> <span class="n">item</span> <span class="o">=</span> <span class="p">(</span><span class="n">MenuItem</span><span class="o">*</span><span class="p">)</span><span class="n">pSender</span><span class="p">;</span>
</span><span class='line'><span class="n">log</span><span class="p">(</span><span class="s">&quot;Touch Help Menu Item %p&quot;</span><span class="p">,</span> <span class="n">item</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>显示效果:</h2>

<p><img src="http://i.imgur.com/LyozJx3.gif" alt="" /></p>

<h2>源代码下载地址：</h2>

<p>GITHUB源码下载地址:<strong>【<a href="https://github.com/chenhaoxiang/cocos2d-x/tree/master/20170701/code/Cocos2dTextMenu">点我进行下载</a>】</strong></p>

<h1>精灵菜单和图片菜单</h1>

<h2>精灵菜单项类MenuItemSprite</h2>

<p>创建函数create定义:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="k">static</span> <span class="n">MenuItemSprite</span> <span class="o">*</span> <span class="nf">create</span><span class="p">(</span><span class="n">Node</span><span class="o">*</span> <span class="n">normalSprite</span><span class="p">,</span> <span class="n">Node</span><span class="o">*</span> <span class="n">selectedSprite</span><span class="p">,</span> <span class="n">Node</span><span class="o">*</span> <span class="n">disabledSprite</span> <span class="o">=</span> <span class="k">nullptr</span><span class="p">);</span>
</span><span class='line'><span class="k">static</span> <span class="n">MenuItemSprite</span><span class="o">*</span> <span class="nf">create</span><span class="p">(</span><span class="n">Node</span><span class="o">*</span> <span class="n">normalSprite</span><span class="p">,</span><span class="c1">//菜单项正常显示时候的精灵</span>
</span><span class='line'><span class="n">Node</span><span class="o">*</span> <span class="n">selectedSprite</span><span class="p">,</span><span class="c1">//选择菜单项时候的精灵</span>
</span><span class='line'><span class="n">Node</span><span class="o">*</span> <span class="n">disableSprite</span><span class="p">,</span><span class="c1">//菜单项禁用时候的精灵</span>
</span><span class='line'><span class="k">const</span> <span class="n">ccMenuCallback</span><span class="o">&amp;</span> <span class="n">callback</span> <span class="c1">//菜单操作的回调函数指针</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="k">static</span> <span class="n">MenuItemSprite</span> <span class="o">*</span> <span class="n">create</span><span class="p">(</span><span class="n">Node</span><span class="o">*</span> <span class="n">normalSprite</span><span class="p">,</span> <span class="n">Node</span><span class="o">*</span> <span class="n">selectedSprite</span><span class="p">,</span> <span class="k">const</span> <span class="n">ccMenuCallback</span><span class="o">&amp;</span> <span class="n">callback</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>图片菜单项类MenuIemImage</h2>

<p>创建函数create定义:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="k">static</span> <span class="n">MenuItemImage</span><span class="o">*</span> <span class="n">create</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">normallmage</span><span class="p">,</span><span class="c1">//菜单项正常显示时候的图片</span>
</span><span class='line'><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">selectedImage</span><span class="p">,</span><span class="c1">//选择菜单项时候的图片</span>
</span><span class='line'><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">disabledImage</span><span class="p">,</span><span class="c1">//菜单项禁用时候的图片</span>
</span><span class='line'><span class="k">const</span> <span class="n">ccMenuCallback</span><span class="o">&amp;</span> <span class="n">callback</span><span class="c1">//菜单操作的回调函数指针</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>精灵菜单和图片菜单都有三种状态，也就是正常状态，选中状态，还有禁用状态。</p>

<h2>实例</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="kt">bool</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">init</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">Layer</span><span class="o">::</span><span class="n">init</span><span class="p">()</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Size</span> <span class="n">visibleSize</span> <span class="o">=</span> <span class="n">Director</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getVisibleSize</span><span class="p">();</span>
</span><span class='line'><span class="n">Vec2</span> <span class="n">origin</span> <span class="o">=</span> <span class="n">Director</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getVisibleOrigin</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">Sprite</span> <span class="o">*</span><span class="n">bg</span> <span class="o">=</span> <span class="n">Sprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;menu/background.png&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">bg</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">visibleSize</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
</span><span class='line'>                         <span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">visibleSize</span><span class="p">.</span><span class="n">height</span> <span class="o">/</span><span class="mi">2</span><span class="p">));</span>
</span><span class='line'><span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">bg</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//开始精灵</span>
</span><span class='line'><span class="n">Sprite</span> <span class="o">*</span><span class="n">startSpriteNormal</span> <span class="o">=</span> <span class="n">Sprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;menu/start-up.png&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">Sprite</span> <span class="o">*</span><span class="n">startSpriteSelected</span> <span class="o">=</span> <span class="n">Sprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;menu/start-down.png&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//创建精灵菜单  添加精灵以及回调函数</span>
</span><span class='line'><span class="n">MenuItemSprite</span> <span class="o">*</span><span class="n">startMenuItem</span> <span class="o">=</span> <span class="n">MenuItemSprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">startSpriteNormal</span><span class="p">,</span>
</span><span class='line'>                                              <span class="n">startSpriteSelected</span><span class="p">,</span>
</span><span class='line'>                                             <span class="n">CC_CALLBACK_1</span><span class="p">(</span><span class="n">HelloWorld</span><span class="o">::</span><span class="n">menuItemStartCallback</span><span class="p">,</span> <span class="k">this</span><span class="p">));</span>
</span><span class='line'><span class="n">startMenuItem</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Director</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">convertToGL</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="mi">700</span><span class="p">,</span> <span class="mi">170</span><span class="p">)));</span>
</span><span class='line'><span class="c1">//指定坐标    convertToGL转换-将左上角为原点的UI坐标转换为OpenGL坐标，cocos2d默认坐标为OpenGL坐标</span>
</span><span class='line'><span class="c1">//700, 170为UI坐标</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 设置 图片菜单 图片菜单的好处就是直接使用图片就好了</span>
</span><span class='line'><span class="n">MenuItemImage</span> <span class="o">*</span><span class="n">settingMenuItem</span> <span class="o">=</span> <span class="n">MenuItemImage</span><span class="o">::</span><span class="n">create</span><span class="p">(</span>
</span><span class='line'>                         <span class="s">&quot;menu/setting-up.png&quot;</span><span class="p">,</span>
</span><span class='line'>                         <span class="s">&quot;menu/setting-down.png&quot;</span><span class="p">,</span>
</span><span class='line'>                       <span class="n">CC_CALLBACK_1</span><span class="p">(</span><span class="n">HelloWorld</span><span class="o">::</span><span class="n">menuItemSettingCallback</span><span class="p">,</span> <span class="k">this</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="n">settingMenuItem</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Director</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">convertToGL</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="mi">480</span><span class="p">,</span> <span class="mi">400</span><span class="p">)));</span>    
</span><span class='line'>
</span><span class='line'><span class="c1">// 帮助 图片菜单</span>
</span><span class='line'><span class="n">MenuItemImage</span> <span class="o">*</span><span class="n">helpMenuItem</span> <span class="o">=</span> <span class="n">MenuItemImage</span><span class="o">::</span><span class="n">create</span><span class="p">(</span>
</span><span class='line'>                         <span class="s">&quot;menu/help-up.png&quot;</span><span class="p">,</span>
</span><span class='line'>                         <span class="s">&quot;menu/help-down.png&quot;</span><span class="p">,</span>
</span><span class='line'>                       <span class="n">CC_CALLBACK_1</span><span class="p">(</span><span class="n">HelloWorld</span><span class="o">::</span><span class="n">menuItemHelpCallback</span><span class="p">,</span> <span class="k">this</span><span class="p">));</span>    
</span><span class='line'>
</span><span class='line'><span class="n">helpMenuItem</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Director</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">convertToGL</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="mi">860</span><span class="p">,</span> <span class="mi">480</span><span class="p">)));</span>
</span><span class='line'><span class="c1">//在这里，精灵菜单和图片菜单没什么区别，视觉效果一样，也一样有回调函数</span>
</span><span class='line'>
</span><span class='line'><span class="n">Menu</span><span class="o">*</span> <span class="n">mu</span> <span class="o">=</span> <span class="n">Menu</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">startMenuItem</span><span class="p">,</span> <span class="n">settingMenuItem</span><span class="p">,</span> <span class="n">helpMenuItem</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span><span class="c1">//指定菜单  NULL指定菜单列表的结束</span>
</span><span class='line'><span class="n">mu</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="o">::</span><span class="n">ZERO</span><span class="p">);</span><span class="c1">//菜单处于坐标原点 - 因为菜单项已经都指定位置了</span>
</span><span class='line'><span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">mu</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//回调函数</span>
</span><span class='line'><span class="kt">void</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">menuItemHelpCallback</span><span class="p">(</span><span class="n">Ref</span><span class="o">*</span> <span class="n">pSender</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="n">MenuItem</span><span class="o">*</span> <span class="n">item</span> <span class="o">=</span> <span class="p">(</span><span class="n">MenuItem</span><span class="o">*</span><span class="p">)</span><span class="n">pSender</span><span class="p">;</span>
</span><span class='line'><span class="n">log</span><span class="p">(</span><span class="s">&quot;Touch Help %p&quot;</span><span class="p">,</span> <span class="n">item</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">menuItemStartCallback</span><span class="p">(</span><span class="n">Ref</span><span class="o">*</span> <span class="n">pSender</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="n">MenuItem</span><span class="o">*</span> <span class="n">item</span> <span class="o">=</span> <span class="p">(</span><span class="n">MenuItem</span><span class="o">*</span><span class="p">)</span><span class="n">pSender</span><span class="p">;</span>
</span><span class='line'><span class="n">log</span><span class="p">(</span><span class="s">&quot;Touch Start %p&quot;</span><span class="p">,</span> <span class="n">item</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">menuItemSettingCallback</span><span class="p">(</span><span class="n">Ref</span><span class="o">*</span> <span class="n">pSender</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="n">MenuItem</span><span class="o">*</span> <span class="n">item</span> <span class="o">=</span> <span class="p">(</span><span class="n">MenuItem</span><span class="o">*</span><span class="p">)</span><span class="n">pSender</span><span class="p">;</span>
</span><span class='line'><span class="n">log</span><span class="p">(</span><span class="s">&quot;Touch Setting %p&quot;</span><span class="p">,</span> <span class="n">item</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>小提示:这里图片的UI坐标可以通过画图工具或者PhotoShop获得坐标</p>

<h2>显示效果</h2>

<p><img src="http://i.imgur.com/cAgqpC1.gif" alt="" /></p>

<h2>源代码下载地址：</h2>

<blockquote cite='陈浩翔'>
GITHUB源码下载地址:<strong>【<a href='https://github.com/chenhaoxiang/cocos2d-x/tree/master/20170701/code/Cocos2dSpiritMenu' target='_blank'>点我进行下载</a>】</strong>
</blockquote>


<h1>开关菜单MenulItemToggle</h1>

<p>开关菜单有两种状态，这两种状态可以用任何的图片来替代(比如精灵-只要是菜单项就可以)<br/>
函数创建:(也是菜单项)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="k">static</span> <span class="n">MenulItemToggle</span><span class="o">*</span> <span class="n">createWithCallback</span><span class="p">(</span>
</span><span class='line'><span class="k">const</span> <span class="n">ccMenuCallback</span><span class="o">&amp;</span> <span class="n">callback</span><span class="p">,</span><span class="c1">//菜单操作的回调函数指针 - 状态切换时调用的函数,菜单的事件处理</span>
</span><span class='line'><span class="n">MenuItem</span><span class="o">*</span> <span class="n">item</span><span class="p">,</span><span class="c1">//进行切换的菜单项 MenuItem的集合，将其他菜单项放在开关菜单中</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>简单形式的文本类型的开关菜单:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="k">auto</span> <span class="n">toggleMenuItem</span> <span class="o">=</span> <span class="n">MenuItemToggle</span><span class="o">::</span><span class="n">createWithCallback</span><span class="p">(</span>
</span><span class='line'><span class="n">CC_CALLBACK_1</span><span class="p">(</span><span class="n">HelloWorld</span><span class="o">::</span><span class="n">menuItem1Callback</span><span class="p">,</span><span class="k">this</span><span class="p">),</span>
</span><span class='line'><span class="n">MenuItemFont</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;On&quot;</span><span class="p">),</span>
</span><span class='line'><span class="n">MenuItemFont</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;Off&quot;</span><span class="p">),</span>
</span><span class='line'><span class="nb">NULL</span><span class="p">);</span><span class="c1">//最后记得加NULL(Object-c中区分元素集合的结束)，在开关菜单中，其实只能放两个子菜单项，多菜单项没意义，因为只是两个状态的切换  </span>
</span><span class='line'>
</span><span class='line'><span class="n">Menu</span><span class="o">*</span> <span class="n">mn</span><span class="o">=</span><span class="n">Menu</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">toggleMenuItem</span><span class="p">,</span><span class="nb">NULL</span><span class="p">);</span><span class="c1">//把菜单项放入菜单中</span>
</span><span class='line'><span class="k">this</span><span class="o">-&gt;</span><span class="n">addChhild</span><span class="p">(</span><span class="n">mn</span><span class="p">);</span><span class="c1">//把菜单放入层中</span>
</span></code></pre></td></tr></table></div></figure>


<p>
这里只是简单的文本菜单，当然也可以是精灵菜单，也可以是图片菜单&hellip;</p>

<h2>实例</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="kt">bool</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">init</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">Layer</span><span class="o">::</span><span class="n">init</span><span class="p">()){</span>
</span><span class='line'><span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Size</span> <span class="n">visibleSize</span> <span class="o">=</span> <span class="n">Director</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getVisibleSize</span><span class="p">();</span><span class="c1">//大小</span>
</span><span class='line'><span class="n">Vec2</span> <span class="n">origin</span> <span class="o">=</span> <span class="n">Director</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getVisibleOrigin</span><span class="p">();</span><span class="c1">//锚点 默认为0.5  0.5</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Sprite* bg = Sprite::create(&quot;menu/setting-back.png&quot;);</span>
</span><span class='line'><span class="k">auto</span> <span class="n">bg</span> <span class="o">=</span> <span class="n">Sprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;menu/setting-back.png&quot;</span><span class="p">);</span><span class="c1">// auto-自动推断类型</span>
</span><span class='line'><span class="n">bg</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span><span class="o">+</span><span class="n">visibleSize</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span><span class="o">+</span><span class="n">visibleSize</span><span class="p">.</span><span class="n">height</span><span class="o">/</span><span class="mi">2</span><span class="p">));</span>
</span><span class='line'><span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">bg</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//音效菜单项</span>
</span><span class='line'><span class="k">auto</span> <span class="n">soundOnMenuItem</span> <span class="o">=</span> <span class="n">MenuItemImage</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;menu/on.png&quot;</span><span class="p">,</span> <span class="s">&quot;menu/on.png&quot;</span><span class="p">);</span><span class="c1">//正常和按下是同一张图片 - 开</span>
</span><span class='line'><span class="k">auto</span> <span class="n">soundOffMenuItem</span> <span class="o">=</span> <span class="n">MenuItemImage</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;menu/off.png&quot;</span><span class="p">,</span> <span class="s">&quot;menu/off.png&quot;</span><span class="p">);</span><span class="c1">//关</span>
</span><span class='line'><span class="c1">//音效开关菜单项</span>
</span><span class='line'><span class="k">auto</span> <span class="n">soundToggleMenuItem</span> <span class="o">=</span> <span class="n">MenuItemToggle</span><span class="o">::</span><span class="n">createWithCallback</span><span class="p">(</span><span class="n">CC_CALLBACK_1</span><span class="p">(</span><span class="n">HelloWorld</span><span class="o">::</span><span class="n">menuSoundToggleCallback</span><span class="p">,</span><span class="k">this</span><span class="p">),</span><span class="c1">//函数指针</span>
</span><span class='line'>  <span class="n">soundOnMenuItem</span><span class="p">,</span><span class="n">soundOffMenuItem</span><span class="p">,</span><span class="c1">//菜单项集合</span>
</span><span class='line'>  <span class="nb">NULL</span><span class="c1">//集合结束</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'><span class="c1">//设置坐标 - UI坐标(原点为左上角)转换为OpenGL坐标(原点为左下角)</span>
</span><span class='line'><span class="n">soundToggleMenuItem</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Director</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">convertToGL</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="mi">818</span><span class="p">,</span> <span class="mi">220</span><span class="p">)));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//音乐菜单项 </span>
</span><span class='line'><span class="k">auto</span> <span class="n">musicOnMenuItem</span> <span class="o">=</span> <span class="n">MenuItemImage</span><span class="o">::</span><span class="n">create</span><span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;menu/on.png&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;menu/on.png&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">auto</span> <span class="n">musicOffMenuItem</span> <span class="o">=</span> <span class="n">MenuItemImage</span><span class="o">::</span><span class="n">create</span><span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;menu/off.png&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;menu/off.png&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//音乐开关菜单项</span>
</span><span class='line'><span class="k">auto</span> <span class="n">musicToggleMenuItem</span> <span class="o">=</span> <span class="n">MenuItemToggle</span><span class="o">::</span><span class="n">createWithCallback</span><span class="p">(</span><span class="n">CC_CALLBACK_1</span><span class="p">(</span><span class="n">HelloWorld</span><span class="o">::</span><span class="n">menuMusicToggleCallback</span><span class="p">,</span> <span class="k">this</span><span class="p">),</span>
</span><span class='line'>  <span class="n">musicOnMenuItem</span><span class="p">,</span>
</span><span class='line'>  <span class="n">musicOffMenuItem</span><span class="p">,</span>
</span><span class='line'>  <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'><span class="n">musicToggleMenuItem</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Director</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">convertToGL</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="mi">818</span><span class="p">,</span> <span class="mi">362</span><span class="p">)));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//OK按钮</span>
</span><span class='line'><span class="k">auto</span> <span class="n">okMenuItem</span> <span class="o">=</span> <span class="n">MenuItemImage</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;menu/ok-up.png&quot;</span><span class="p">,</span> <span class="s">&quot;menu/ok-down.png&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">okMenuItem</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Director</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">convertToGL</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="mi">600</span><span class="p">,</span> <span class="mi">510</span><span class="p">)));</span>
</span><span class='line'>
</span><span class='line'><span class="n">Menu</span><span class="o">*</span> <span class="n">mn</span> <span class="o">=</span> <span class="n">Menu</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">soundToggleMenuItem</span><span class="p">,</span> <span class="n">musicToggleMenuItem</span><span class="p">,</span> <span class="n">okMenuItem</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'><span class="n">mn</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="o">::</span><span class="n">ZERO</span><span class="p">);</span>
</span><span class='line'><span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">mn</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">menuSoundToggleCallback</span><span class="p">(</span><span class="n">Ref</span><span class="o">*</span> <span class="n">pSender</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="n">log</span><span class="p">(</span><span class="s">&quot;menuSoundToggleCallback&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">menuMusicToggleCallback</span><span class="p">(</span><span class="n">Ref</span><span class="o">*</span> <span class="n">pSender</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="n">log</span><span class="p">(</span><span class="s">&quot;menuMusicToggleCallback&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>先是创建On和Off图片惨淡项->创建开关菜单->Menu<br/>
Menu 放入 Layer</p>

<h2>显示效果</h2>

<p><img src="http://i.imgur.com/lWaN1iT.gif" alt="" /></p>

<h1>源代码下载地址：</h1>

<blockquote cite='陈浩翔'>
GITHUB源码下载地址:<strong>【<a href='https://github.com/chenhaoxiang/cocos2d-x/tree/master/20170701/code/Cocos2dToggleMenuItem' target='_blank'>点我进行下载</a>】</strong>
</blockquote>


<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【Cocos2d-x】开发实战-Cocos中的字符串、标签和中文乱码]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/06/27/cocos2d-string-label-mojibake/"/>
    <updated>2017-06-27T13:38:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/06/27/cocos2d-string-label-mojibake</id>
    <content type="html"><![CDATA[<p>本篇博客讲解:<br/>
1.Ccocos2d-x中的字符串
2.使用标签
3.中文乱码问题</p>

<!-- more -->


<hr />

<p>[TOC]</p>

<h1>Ccocos2d-x中的字符串</h1>

<h2>使用const char*和std::string</h2>

<p>const char<em>是C风格的字符串<br/>
std::string是C++风格的字符串，它封装了const char</em><br/>
初始化std::string对象:</p>

<figure class='code'><figcaption><span>初始化std::string对象</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;jack&quot;</span><span class="p">;</span><span class="c1">//直接赋值</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="s">&quot;jack&quot;</span><span class="p">);</span><span class="c1">//通过构造函数初始化</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//创建对象通过静态方法创建，也就是在程序结束的时候，或者超过作用域的时候，自动释放，这就不需要我们来关心对象的释放</span>
</span></code></pre></td></tr></table></div></figure>


<p>std::string 指针类型</p>

<figure class='code'><figcaption><span>std::string 指针类型</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">*</span> <span class="n">namep</span> <span class="o">=</span> <span class="k">new</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="s">&quot;jack&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//new 代表创建这个对象是动态创建的，是在程序运行过程中创建的，使用完成之后需要delete删除。</span>
</span><span class='line'><span class="c1">//返回值不是对象本身，而是指向对象的指针</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="k">delete</span> <span class="n">namep</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>把std::string 转化为const char*类型</p>

<figure class='code'><figcaption><span>把std::string 转化为const char*类型</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">cstring</span> <span class="o">=</span> <span class="n">name</span><span class="p">.</span><span class="n">c_str</span><span class="p">();</span><span class="c1">//静态方法创建</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">cstring</span> <span class="o">=</span> <span class="n">namep</span><span class="o">-&gt;</span><span class="n">c_str</span><span class="p">();</span><span class="c1">//namep为指针</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;jack&quot;</span><span class="p">;</span><span class="c1">//直接赋值</span>
</span><span class='line'>
</span><span class='line'><span class="n">log</span><span class="p">(</span><span class="s">&quot;name = %s&quot;</span><span class="p">,</span><span class="n">name</span><span class="p">);</span><span class="c1">//直接这样会出现乱码问题，因为log用的不对</span>
</span><span class='line'><span class="c1">//我们可以去看log函数:void CC_DLL log(const char * format, ...) CC_FORMAT_PRINTF(1, 2);类型是const char*</span>
</span><span class='line'>
</span><span class='line'><span class="n">log</span><span class="p">(</span><span class="s">&quot;name = %s&quot;</span><span class="p">,</span> <span class="n">name</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">*</span><span class="n">name1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="s">&quot;jack&quot;</span><span class="p">);</span><span class="c1">//直接赋值    </span>
</span><span class='line'><span class="n">log</span><span class="p">(</span><span class="s">&quot;name1 = %s&quot;</span><span class="p">,</span> <span class="n">name1</span><span class="o">-&gt;</span><span class="n">c_str</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<h2>使用cocos2d::__String</h2>

<p>(注意是两个英文下划线)
源自于Objective-C的NSString<br/>
在coco2d-x里面，凡是有两个下划线开头的，都是过渡Objective-C过来的(内存管理采用引用计数管理)<br/>
现在Cocos2d-x在慢慢去除Objective-C化</p>

<p><img src="http://i.imgur.com/3wvkHJl.png" alt="" /></p>

<p>创建它的主要的静态create函数如下(工厂设计模式)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="k">static</span> <span class="n">__String</span> <span class="o">*</span><span class="n">create</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'><span class="k">static</span> <span class="n">__String</span> <span class="o">*</span><span class="n">createWithFormat</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">format</span><span class="p">,...)</span>
</span><span class='line'><span class="c1">//createWithFormat-通过创建模板来创建字符串，所以可以通过这个方法把其他类型的转换为字符串</span>
</span></code></pre></td></tr></table></div></figure>


<h3>数据类型之间的转换</h3>

<p>cocos2d::__String 转换为const cahr*类型，这种转换还是用的比较多的</p>

<figure class='code'><figcaption><span>cocos2d::__String 转换为const cahr*类型</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">__String</span> <span class="o">*</span><span class="n">name</span> <span class="o">=</span> <span class="n">__String</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;Hi,Tony&quot;</span><span class="p">);</span><span class="c1">//得到对象指针，因为是通过静态create函数获取的，不需要我们delete</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">cstring</span> <span class="o">=</span> <span class="n">name</span><span class="o">-&gt;</span><span class="n">getCString</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>const cahr* 转换为cocos2d::__Stirng类型</p>

<figure class='code'><figcaption><span>const cahr* 转换为cocos2d::__Stirng类型</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">cstring</span> <span class="o">=</span><span class="s">&quot;Hi,Tonny&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">__String</span> <span class="o">*</span><span class="n">ns</span> <span class="o">=</span> <span class="n">__String</span><span class="o">::</span><span class="n">createWithFormat</span><span class="p">(</span><span class="s">&quot;%s&quot;</span><span class="p">,</span><span class="n">cstring</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>std::string转换为cocos2d::__String类型</p>

<figure class='code'><figcaption><span>std::string转换为cocos2d::__String类型</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">string</span> <span class="o">=</span> <span class="s">&quot;Hi,Tonny&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">__String</span> <span class="o">*</span><span class="n">name4</span> <span class="o">=</span> <span class="n">__String</span><span class="o">::</span><span class="n">createWithFormat</span><span class="p">(</span><span class="s">&quot;%s&quot;</span><span class="p">,</span> <span class="n">string</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span><span class="c1">//将std::string转换为__String</span>
</span></code></pre></td></tr></table></div></figure>


<p>cocos2d::__String转换为int类型</p>

<figure class='code'><figcaption><span>cocos2d::__String转换为int类型</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">123</span><span class="p">;</span>
</span><span class='line'><span class="n">__String</span> <span class="o">*</span><span class="n">ns</span> <span class="o">=</span> <span class="n">__String</span><span class="o">::</span><span class="n">createWithFormat</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="n">num</span><span class="p">);</span><span class="c1">//这种方式可以转换很多其他类型</span>
</span><span class='line'><span class="kt">int</span> <span class="n">num2</span> <span class="o">=</span> <span class="n">ns</span><span class="o">-&gt;</span><span class="n">intValue</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Win32平台下中文乱码问题</h2>

<p>默认情况下Windows中文环境是采用GBK编码，源程序文件HelloWorldScene.cpp编码默认也是GBK，如果源程序代码中有中文，它的字符集是GBK，我们需要将中文符GBK编码转换为UTF-8编码。</p>

<h3>解决方法一</h3>

<p>源文件保存为UTF-8(不带签名的)<br/>
文件->高级保存选项<br/>
<img src="http://i.imgur.com/qS3JBYL.png" alt="" /></p>

<p>存储完之后编译，会出现这样的问题<br/>
<img src="http://i.imgur.com/D7akxGK.png" alt="" /><br/>
这是由于Visual Studio对于Unicode(UTF-8无签名)识别有误，我们一般在后面添加一些英文字符，或者“啊”等特殊的中文字符。</p>

<p>建议不要用这种解决方式</p>

<h3>解决方法二</h3>

<p>转码GBK->UTF-8</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">__String</span> <span class="o">*</span><span class="n">cns</span> <span class="o">=</span> <span class="n">__String</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;大家好啊&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">nsc</span><span class="p">;</span>
</span><span class='line'><span class="cp">#if (CC_TARGET_PLATFORM == CC_PLATFORM_WIN32)</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">sns</span> <span class="o">=</span> <span class="n">MyUtility</span><span class="o">::</span><span class="n">gbk_2_utf8</span><span class="p">(</span><span class="n">ns</span><span class="o">-&gt;</span><span class="n">getCString</span><span class="p">());</span>
</span><span class='line'><span class="n">cns</span> <span class="o">=</span> <span class="n">sns</span><span class="p">.</span><span class="n">c_str</span><span class="p">();</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'><span class="n">cns</span> <span class="o">=</span> <span class="n">ns</span><span class="o">-&gt;</span><span class="n">getCString</span><span class="p">();</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="n">log</span><span class="p">(</span><span class="s">&quot;%s&quot;</span><span class="p">,</span> <span class="n">cns</span><span class="p">);</span>
</span><span class='line'><span class="k">auto</span> <span class="n">label</span> <span class="o">=</span> <span class="n">LabelTTF</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">cns</span><span class="p">,</span> <span class="s">&quot;Arial&quot;</span><span class="p">,</span> <span class="mi">24</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="c1">//在Win32平台下，将GBK编码转换为UTF-8</span>
</span><span class='line'><span class="n">string</span> <span class="n">MyUtility</span><span class="o">::</span><span class="n">gbk_2_utf8</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span> <span class="n">text</span><span class="p">){</span>
</span><span class='line'><span class="cp">#if (CC_TARGET_PLATFORM == CC_PLATFORM_WIN32) </span><span class="c1">//条件编译</span>
</span><span class='line'>  <span class="c1">//这里面用的一些库只有win32平台才有的一些类库</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//采用Lambda表达式，将string转换成wstring</span>
</span><span class='line'>  <span class="n">wstring</span> <span class="n">tes</span> <span class="o">=</span> <span class="p">[</span><span class="o">=</span><span class="p">](){</span>
</span><span class='line'>      <span class="n">setlocale</span><span class="p">(</span><span class="n">LC_ALL</span><span class="p">,</span> <span class="s">&quot;chs&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">_Source</span> <span class="o">=</span> <span class="n">text</span><span class="p">.</span><span class="n">c_str</span><span class="p">();</span>
</span><span class='line'>      <span class="kt">size_t</span> <span class="n">_Dsize</span> <span class="o">=</span> <span class="n">text</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">wchar_t</span> <span class="o">*</span><span class="n">_Dest</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">wchar_t</span><span class="p">[</span><span class="n">_Dsize</span><span class="p">];</span>
</span><span class='line'>      <span class="n">mbstowcs</span><span class="p">(</span><span class="n">_Dest</span><span class="p">,</span> <span class="n">_Source</span><span class="p">,</span> <span class="n">_Dsize</span><span class="p">);</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">wstring</span> <span class="n">result</span> <span class="o">=</span> <span class="n">_Dest</span><span class="p">;</span>
</span><span class='line'>      <span class="k">delete</span><span class="p">[]</span><span class="n">_Dest</span><span class="p">;</span>
</span><span class='line'>      <span class="n">setlocale</span><span class="p">(</span><span class="n">LC_ALL</span><span class="p">,</span> <span class="s">&quot;C&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}();</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">asciSize</span> <span class="o">=</span> <span class="n">WideCharToMultiByte</span><span class="p">(</span><span class="n">CP_UTF8</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">tes</span><span class="p">.</span><span class="n">c_str</span><span class="p">(),</span> <span class="n">tes</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">asciSize</span> <span class="o">==</span> <span class="n">ERROR_NO_UNICODE_TRANSLATION</span> <span class="o">||</span> <span class="n">asciSize</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">string</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">resultString</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="p">[</span><span class="n">asciSize</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">conveResult</span> <span class="o">=</span> <span class="n">WideCharToMultiByte</span><span class="p">(</span><span class="n">CP_UTF8</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">tes</span><span class="p">.</span><span class="n">c_str</span><span class="p">(),</span> <span class="n">tes</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="n">resultString</span><span class="p">,</span> <span class="n">asciSize</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">conveResult</span> <span class="o">!=</span> <span class="n">asciSize</span><span class="p">){</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">string</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">string</span> <span class="n">buffer</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">buffer</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">resultString</span><span class="p">,</span><span class="n">asciSize</span><span class="p">);</span>
</span><span class='line'>  <span class="k">delete</span><span class="p">[]</span> <span class="n">resultString</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">buffer</span><span class="p">;</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">text</span><span class="p">;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>解决方法三</h3>

<p>其实还可以用文本文件来解决中文乱码，就是字符串从xml文件或者json中读取(注意，文本需要是UTF-8编码)，然后传值，这样不会出现乱码问题</p>

<h1>使用标签</h1>

<p>可以把标签理解为一个控件</p>

<p><img src="http://i.imgur.com/nDlGfb0.png" alt="" /></p>

<p>此处的大家好和中间的COCOS2DX图片就是标签</p>

<p>一种是COCOS2DX这样的，可以叫美工做张图片然后放上去就可以了，静态的<br/>
另外一种是"大家好"这样的动态文字</p>

<h2>LabelTTF</h2>

<p>TTF基于系统字库</p>

<p><img src="http://i.imgur.com/khRSKgT.png" alt="" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="c1">//静态create函数创建</span>
</span><span class='line'><span class="k">auto</span> <span class="n">label</span> <span class="o">=</span> <span class="n">LabelTTF</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;大家好&quot;</span><span class="p">,</span> <span class="s">&quot;Arial&quot;</span><span class="p">,</span> <span class="mi">24</span><span class="p">);</span><span class="c1">//如乱码请参照前面的解决</span>
</span><span class='line'><span class="c1">//在不同的平台中都是去找Arial这个系统库，然后去显示出来,24为字号</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//指定标签的位置</span>
</span><span class='line'><span class="n">label</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">visibleSize</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">visibleSize</span><span class="p">.</span><span class="n">height</span> <span class="o">-</span> <span class="n">label</span><span class="o">-&gt;</span><span class="n">getContentSize</span><span class="p">().</span><span class="n">height</span><span class="p">));</span>
</span><span class='line'><span class="c1">//记住设置位置和锚点，锚点没写就是默认的0.5,0.5</span>
</span><span class='line'><span class="c1">//把标签加入到层中</span>
</span><span class='line'><span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">label</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span><span class="mi">123</span><span class="p">);</span><span class="c1">//设置tag为123，方便后面获取</span>
</span></code></pre></td></tr></table></div></figure>


<p>create函数的完整定义:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cm">/** creates a Label from a fontname, alignment, dimension in points and font size in points</span>
</span><span class='line'><span class="cm">     @since v2.0.1</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="k">static</span> <span class="n">LabelTTF</span> <span class="o">*</span> <span class="nf">create</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">string</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">fontName</span><span class="p">,</span> <span class="kt">float</span> <span class="n">fontSize</span><span class="p">,</span>
</span><span class='line'>                  <span class="k">const</span> <span class="n">Size</span><span class="o">&amp;</span> <span class="n">dimensions</span> <span class="o">=</span> <span class="n">Size</span><span class="o">::</span><span class="n">ZERO</span><span class="p">,</span> <span class="n">TextHAlignment</span> <span class="n">hAlignment</span> <span class="o">=</span> <span class="n">TextHAlignment</span><span class="o">::</span><span class="n">CENTER</span><span class="p">,</span>
</span><span class='line'>                  <span class="n">TextVAlignment</span> <span class="n">vAlignment</span> <span class="o">=</span> <span class="n">TextVAlignment</span><span class="o">::</span><span class="n">TOP</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>const std::string&amp; string   要显示的字符串<br/>
const std::string&amp; fontName   字体的名字<br/>
 float fontSize   字体的大小<br/>
const Size&amp; dimensions = Size::ZERO  尺寸-放在这个所定义的矩形的大小里面
TextHAlignment hAlignment = TextHAlignment::CENTER  水平方向的中心对齐<br/>
TextVAlignment vAlignment = TextVAlignment::TOP  垂直方向的顶对齐<br/>
后面三个参数可省略，都会有默认值</p>

<p>在cocos2d X3.01时，认为create已经过时了，但是这种用法还是能用,可能以后会去掉</p>

<h2>LabelAtlas</h2>

<p>基于图集的标签<br/>
<img src="http://i.imgur.com/3q7Fl2d.png" alt="" /></p>

<p>继承了：LabelProtocol-纯虚函数，相当于Java中的接口</p>

<p>显示的abcd的那些字母，放在一张图中了<br/>
<img src="http://i.imgur.com/UVGSL4n.png" alt="" /></p>

<figure class='code'><figcaption><span>创建并初始化标签</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="k">auto</span> <span class="n">label1</span> <span class="o">=</span> <span class="n">LabelAtlas</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;HelloWorld&quot;</span><span class="p">,</span> <span class="s">&quot;fonts/tuffy_bold_italic-charmap.png&quot;</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="sc">&#39; &#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//(字符串，字体文件图集，宽，高，) 路径是 Resources/下  宽高不能随便设置！需要和图片对应的</span>
</span><span class='line'><span class="n">label1</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="n">visibleSize</span><span class="p">.</span><span class="n">width</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">-</span> <span class="n">label1</span><span class="o">-&gt;</span><span class="n">getContentSize</span><span class="p">().</span><span class="n">width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="n">visibleSize</span><span class="p">.</span><span class="n">height</span> <span class="o">-</span> <span class="n">label1</span><span class="o">-</span><span class="n">getContentSize</span><span class="p">().</span><span class="n">height</span><span class="p">));</span>
</span><span class='line'><span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">label1</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>LabelBMFont</h2>

<p>位图字体标签，需要添加字体文件：包括一个图片集(.png)和一个字体坐标文件(.fnt)<br/>
LabelBMFont比LabelTTF快很多。LabelBMFont中的每个字符的宽度是可变的</p>

<p><img src="http://i.imgur.com/FHkqIqZ.png" alt="" /><br/>
.png很容易，叫美工做好图片就行<br/>
.fnt:<br/>
<img src="http://i.imgur.com/XtY5Ixb.png" alt="" /><br/>
这个就不是自己能手写出来的了~~ 那么我们就需要借助工具了<br/>
(大家可以简单的学习一下工具)</p>

<p>创建并初始化标签</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="k">auto</span> <span class="n">label2</span> <span class="o">=</span> <span class="n">LabelBMFont</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;HelloWord&quot;</span><span class="p">,</span><span class="s">&quot;fonts/BMFont.fnt&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">label2</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="n">visibleSize</span><span class="p">.</span><span class="n">width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="n">visibleSize</span><span class="p">.</span><span class="n">height</span> <span class="o">-</span> <span class="n">label2</span><span class="o">-&gt;</span><span class="n">getContentSize</span><span class="p">().</span><span class="n">height</span><span class="p">));</span>
</span><span class='line'><span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">label2</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>效果：<br/>
<img src="http://i.imgur.com/Sf2epLr.png" alt="" /></p>

<h2>Cocos2d-x 3.x标签类Label</h2>

<p>Cocos2d-x 3.x后推出了新的标签类Label，这种标签通过使用FreeType(开源字体引擎)来使它在不同的平台上有相同的视觉效果。<br/>
由于使用更快的缓存代理，它的渲染也将更加快速。Label还提供了描边和阴影等特效。<br/>
<img src="http://i.imgur.com/HKQ3iDb.png" alt="" /></p>

<p>前面三个标签在3.0或者说3.1之后已经过时了，但是还可以用(不推荐使用了)。<br/>
推荐使用该标签类Label，该类替换了前面的三个标签类</p>

<p>创建Label类静态create函数常用的有如下几个：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="k">static</span> <span class="n">Label</span><span class="o">*</span> <span class="n">createWithSystemFont</span><span class="p">(</span><span class="n">conststd</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">text</span><span class="p">,</span>   <span class="c1">//是要显示的文字                             </span>
</span><span class='line'><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">font</span><span class="p">,</span>                                     <span class="c1">//系统字体名  </span>
</span><span class='line'><span class="kt">float</span> <span class="n">fontSize</span><span class="p">,</span>                                             <span class="c1">//字体的大小  </span>
</span><span class='line'><span class="k">const</span> <span class="n">Size</span><span class="o">&amp;</span> <span class="n">dimensions</span> <span class="o">=</span> <span class="n">Size</span><span class="o">::</span><span class="n">ZERO</span><span class="p">,</span>                        <span class="c1">//在屏幕上占用的区域大小,可省略  </span>
</span><span class='line'><span class="n">TextHAlignment</span>  <span class="n">hAlignment</span> <span class="o">=</span> <span class="n">TextHAlignment</span><span class="o">::</span><span class="n">LEFT</span><span class="p">,</span>          <span class="c1">//文字横向对齐方式,可省略  </span>
</span><span class='line'><span class="n">TextVAlignment</span>  <span class="n">vAlignment</span> <span class="o">=</span> <span class="n">TextVAlignment</span><span class="o">::</span><span class="n">TOP</span><span class="p">)</span>           <span class="c1">//文字纵向对齐方式,可省略  </span>
</span><span class='line'><span class="err">显示的是系统字体，指的是运行环境下的系统，而不是编译系统，相当于原来的</span><span class="n">LabelTTF</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">Label</span><span class="o">*</span> <span class="n">createWithTTF</span><span class="p">(</span><span class="n">conststd</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span> <span class="n">text</span><span class="p">,</span>
</span><span class='line'><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span>  <span class="n">fontFile</span><span class="p">,</span>                <span class="c1">//字体文件  </span>
</span><span class='line'><span class="kt">float</span> <span class="n">fontSize</span><span class="p">,</span>                                  <span class="c1">//字体的大小  </span>
</span><span class='line'><span class="k">const</span> <span class="n">Size</span> <span class="o">&amp;</span>  <span class="n">dimensions</span> <span class="o">=</span> <span class="n">Size</span><span class="o">::</span><span class="n">ZERO</span><span class="p">,</span>                 <span class="c1">//可省略  </span>
</span><span class='line'><span class="n">TextHAlignment</span>          <span class="n">hAlignment</span> <span class="o">=</span> <span class="n">TextHAlignment</span><span class="o">::</span><span class="n">LEFT</span><span class="p">,</span>    <span class="c1">//可省略  </span>
</span><span class='line'><span class="n">TextVAlignment</span>           <span class="n">vAlignment</span> <span class="o">=</span> <span class="n">TextVAlignment</span><span class="o">::</span><span class="n">TOP</span><span class="p">)</span>      <span class="c1">//可省略  </span>
</span><span class='line'><span class="n">createWithTTF</span><span class="err">和</span><span class="n">LabelTTF</span><span class="err">不一样了，也就是</span><span class="n">fontFile</span><span class="err">指定的不是系统字体，而是字体文件，也就是字体文件路径</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">Label</span><span class="o">*</span> <span class="n">createWithTTF</span><span class="p">(</span><span class="n">constTTFConfig</span><span class="o">&amp;</span> <span class="n">ttfConfig</span><span class="p">,</span> <span class="c1">//配置参数 constTTFConfig-结构体</span>
</span><span class='line'><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">text</span><span class="p">,</span>
</span><span class='line'><span class="n">TextHAlignment</span> <span class="n">alignment</span> <span class="o">=</span> <span class="n">TextHAlignment</span><span class="o">::</span><span class="n">LEFT</span><span class="p">,</span>
</span><span class='line'><span class="kt">int</span> <span class="n">maxLineWidth</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">Label</span><span class="o">*</span> <span class="n">createWithBMFont</span><span class="p">(</span><span class="n">conststd</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">bmfontFilePath</span><span class="p">,</span>      <span class="c1">//位图字体文件  </span>
</span><span class='line'><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span>  <span class="n">text</span><span class="p">,</span>                                         <span class="c1">//是要显示的文字        </span>
</span><span class='line'><span class="k">const</span> <span class="n">TextHAlignment</span><span class="o">&amp;</span> <span class="n">alignment</span> <span class="o">=</span> <span class="n">TextHAlignment</span><span class="o">::</span><span class="n">LEFT</span><span class="p">,</span>          <span class="c1">//可省略  </span>
</span><span class='line'><span class="kt">int</span> <span class="n">maxLineWidth</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>                                              <span class="c1">//可省略  </span>
</span><span class='line'><span class="k">const</span> <span class="n">Point</span><span class="o">&amp;</span>  <span class="n">imageOffset</span> <span class="o">=</span> <span class="n">Point</span><span class="o">::</span><span class="n">ZERO</span> <span class="p">)</span>                               <span class="c1">//可省略  </span>
</span></code></pre></td></tr></table></div></figure>


<p>使用实例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="k">auto</span> <span class="n">label1</span> <span class="o">=</span> <span class="n">Label</span><span class="o">::</span><span class="n">createWithSystemFont</span><span class="p">(</span><span class="s">&quot;Hello World1&quot;</span><span class="p">,</span> <span class="s">&quot;Arial&quot;</span><span class="p">,</span> <span class="mi">36</span><span class="p">);</span>
</span><span class='line'><span class="n">label1</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">visibleSize</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">visibleSize</span><span class="p">.</span><span class="n">height</span> <span class="o">-</span> <span class="mi">100</span><span class="p">));</span>
</span><span class='line'><span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">label1</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span><span class="c1">//Win32的字体库可以在控制面板中找到</span>
</span><span class='line'>
</span><span class='line'><span class="k">auto</span> <span class="n">label2</span> <span class="o">=</span> <span class="n">Label</span><span class="o">::</span><span class="n">createWithTTF</span><span class="p">(</span><span class="s">&quot;Hello World2&quot;</span><span class="p">,</span> <span class="s">&quot;fonts/Marker Felt.ttf&quot;</span><span class="p">,</span> <span class="mi">36</span><span class="p">);</span>
</span><span class='line'><span class="n">label2</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">visibleSize</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">visibleSize</span><span class="p">.</span><span class="n">height</span> <span class="o">-</span> <span class="mi">200</span><span class="p">));</span>
</span><span class='line'><span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">label2</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">auto</span> <span class="n">label3</span> <span class="o">=</span> <span class="n">Label</span><span class="o">::</span><span class="n">createWithBMFont</span><span class="p">(</span><span class="s">&quot;fonts/BMFont.fnt&quot;</span><span class="p">,</span> <span class="s">&quot;Hello World3&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">label3</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">visibleSize</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">visibleSize</span><span class="p">.</span><span class="n">height</span> <span class="o">-</span> <span class="mi">300</span><span class="p">));</span>
</span><span class='line'><span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">label3</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">TTFConfig</span> <span class="nf">ttfConfig</span><span class="p">(</span><span class="s">&quot;fonts/Marker Felt.ttf&quot;</span><span class="p">,</span><span class="mi">36</span><span class="p">,</span><span class="n">GlyphCollection</span><span class="o">::</span><span class="n">DYNAMIC</span><span class="p">);</span>
</span><span class='line'><span class="k">auto</span> <span class="n">label4</span> <span class="o">=</span> <span class="n">Label</span><span class="o">::</span><span class="n">createWithTTF</span><span class="p">(</span><span class="n">ttfConfig</span><span class="p">,</span> <span class="s">&quot;Hello World4&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">label4</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">visibleSize</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">visibleSize</span><span class="p">.</span><span class="n">height</span> <span class="o">-</span> <span class="mi">400</span><span class="p">));</span>
</span><span class='line'><span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">label4</span> <span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">ttfConfig</span><span class="p">.</span><span class="n">outlineSize</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'><span class="k">auto</span> <span class="n">label5</span> <span class="o">=</span> <span class="n">Label</span><span class="o">::</span><span class="n">createWithTTF</span><span class="p">(</span><span class="n">ttfConfig</span><span class="p">,</span> <span class="s">&quot;Hello World5&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//ttfConfig-结构体配置，能配置更多的特效，比如描边，阴影，闪烁的文字等</span>
</span><span class='line'><span class="c1">//只能是TTF文件的，才能使用这些特效</span>
</span><span class='line'><span class="n">label5</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">visibleSize</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">visibleSize</span><span class="p">.</span><span class="n">height</span> <span class="o">-</span> <span class="mi">500</span><span class="p">));</span>
</span><span class='line'><span class="n">label5</span><span class="o">-&gt;</span><span class="n">enableShadow</span><span class="p">(</span><span class="n">Color4B</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span><span class="mi">255</span><span class="p">,</span><span class="mi">255</span><span class="p">,</span><span class="mi">128</span><span class="p">),</span> <span class="n">Size</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="o">-</span><span class="mi">4</span><span class="p">));</span><span class="c1">//设置阴影，阴影的颜色，阴影的大小 </span>
</span><span class='line'><span class="n">label5</span><span class="o">-&gt;</span><span class="n">setColor</span><span class="p">(</span><span class="n">Color3B</span><span class="o">::</span><span class="n">RED</span><span class="p">);</span><span class="c1">//设置颜色</span>
</span><span class='line'><span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">label5</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>标签中文乱码问题</h2>

<p>解决方法一:保存文件为Unicode(UTF-8无签名)<br/>
(不推荐使用)</p>

<p>解决方法二:写工具类，将字符串编码转换为UTF-8<br/>
参考前面的Win32平台下中文乱码问题 <br/>
<img src="http://i.imgur.com/fGs4T2L.png" alt="" /></p>

<h1>源代码下载地址：</h1>

<blockquote cite='陈浩翔'>
GITHUB源码下载地址:<strong>【<a href='https://github.com/chenhaoxiang/cocos2d-x/tree/master/20170627/code' target='_blank'>点我进行下载</a>】</strong>
</blockquote>


<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【C++】C++友元]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/06/20/c-plus-plus-friendFunction/"/>
    <updated>2017-06-20T13:38:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/06/20/c-plus-plus-friendFunction</id>
    <content type="html"><![CDATA[<p>C++中可以使用friend关键字来将函数、类声明为某个类的友元<br/>
友元包括友元函数和友元类<br/>
友元具有一些特权，可以访问private的成员<br/>
友元只能授予，不能索取，单向，不能传递(比如a是b的友元，b是c的友元，但a不是c的友元)</p>

<!-- more -->


<hr />

<h1>友元函数</h1>

<p>在类体中使用friend关键字对友元函数进行声明：<br/>
将非成员函数/一般函数声明为友元：<br/>
friend void func();  //func为非成员函数，不属于任何类<br/>
将其他类的成员函数声明为友元：<br/>
friend void CTime::getNum();//getNum为CTime类的成员。</p>

<h1>友元类</h1>

<p>在类体中使用friend关键字将某类声明为自己的友元类。<br/>
friend CTime;</p>

<p>好处就是方便，可以在其他类或方法直接访问私有成员</p>

<p>缺点：<br/>
面向对象的基本原则包括封装性和信息隐藏，而由于友元可以访问其他类的私有成员，这是对封装原则的一个破坏。因此使用友元的时候要特别慎重。</p>

<h1>实例</h1>

<figure class='code'><figcaption><span>Time.h</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cp">#ifndef TIME_H</span>
</span><span class='line'><span class="cp">#define TIME_H </span>
</span><span class='line'><span class="cp">#include &quot;Date.h&quot;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">CTime</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="n">CTime</span><span class="p">();</span>
</span><span class='line'>  <span class="n">CTime</span><span class="p">(</span><span class="kt">int</span> <span class="n">hour</span><span class="p">,</span> <span class="kt">int</span> <span class="n">minute</span><span class="p">,</span> <span class="kt">int</span> <span class="n">second</span> <span class="o">=</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="n">CTime</span><span class="p">(</span><span class="kt">int</span> <span class="n">value</span><span class="p">);</span>
</span><span class='line'>  <span class="n">CTime</span><span class="p">(</span><span class="n">CTime</span><span class="o">&amp;</span> <span class="n">time</span><span class="p">);</span>
</span><span class='line'>  <span class="o">~</span><span class="n">CTime</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">setHour</span><span class="p">(</span><span class="kt">int</span> <span class="n">hour</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">setMinute</span><span class="p">(</span><span class="kt">int</span> <span class="n">minute</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">setSecond</span><span class="p">(</span><span class="kt">int</span> <span class="n">second</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="nf">getHour</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">int</span> <span class="nf">getMinute</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">int</span> <span class="nf">getSecond</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">getNum</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//friend CDate;//声明友元类,需要声明class CDate;    这样整个类都可以访问CTime的私有成员的了,由于我们只在disPlay函数中访问，所以可以用下面的方法</span>
</span><span class='line'>  <span class="k">friend</span> <span class="kt">void</span> <span class="n">CDate</span><span class="o">::</span><span class="n">disPlay</span><span class="p">(</span><span class="k">const</span> <span class="n">CTime</span><span class="o">&amp;</span> <span class="n">time</span><span class="p">);</span>
</span><span class='line'>  <span class="k">friend</span> <span class="kt">void</span> <span class="nf">func</span><span class="p">();</span><span class="c1">//告诉编译器，CTime这个类，已经将func()这个函数声明为自己的友元函数，这个声明可以放在本CTime类中任何地方</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">m_nHour</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">m_nMinute</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">m_nSecond</span><span class="p">;</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">int</span> <span class="n">m_nNum</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>Date.h</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cp">#ifndef DATA_H</span>
</span><span class='line'><span class="cp">#define DATA_H</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">CTime</span><span class="p">;</span><span class="c1">//类的前置声明，一般情况下，是需要声明之后才可以使用的</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">CDate</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="n">CDate</span><span class="p">(</span><span class="kt">int</span> <span class="n">year</span><span class="p">,</span> <span class="kt">int</span> <span class="n">month</span><span class="p">,</span> <span class="kt">int</span> <span class="n">day</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//friend CTime;//在这里声明友元没用，因为友元只能授予，不能索取！</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">disPlay</span><span class="p">(</span><span class="k">const</span> <span class="n">CTime</span><span class="o">&amp;</span> <span class="n">time</span><span class="p">);</span><span class="c1">//使用的是类的引用(引用也是使用指针来实现的),这里不声明是可以的</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">m_nYear</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">m_nMonth</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">m_nDay</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>


<p>main.cpp</p>

<figure class='code'><figcaption><span>main.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="cp">#include&lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include&quot;Time.h&quot; </span>
</span><span class='line'><span class="cp">#include &quot;Date.h&quot;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">func</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">CTime</span> <span class="n">time</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">time</span><span class="p">.</span><span class="n">m_nHour</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">time</span><span class="p">.</span><span class="n">m_nHour</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">const</span> <span class="n">CTime</span> <span class="n">time</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">50</span><span class="p">,</span><span class="mi">20</span><span class="p">);</span>
</span><span class='line'>  <span class="n">CTime</span> <span class="k">const</span> <span class="n">time2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">time</span><span class="p">.</span><span class="n">getNum</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">func</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">CDate</span> <span class="n">date</span><span class="p">(</span><span class="mi">2015</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">26</span><span class="p">);</span>
</span><span class='line'>  <span class="n">date</span><span class="p">.</span><span class="n">disPlay</span><span class="p">(</span><span class="n">time</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">getchar</span><span class="p">();</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>演示结果</h2>

<p><img src="http://i.imgur.com/3zb3loZ.png" alt="" /></p>

<h1>源代码下载地址：</h1>

<blockquote cite='陈浩翔'>
GITHUB源码下载地址:<strong>【<a href='https://github.com/chenhaoxiang/C-Study/tree/master/20170620/code/friendFunction' target='_blank'>点我进行下载</a>】</strong></p>
</blockquote>


<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【Cocos2d-x】开发基础-Cocos2d-x坐标系]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/06/14/cocos2dx-coordinate-system/"/>
    <updated>2017-06-14T13:38:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/06/14/cocos2dx-coordinate-system</id>
    <content type="html"><![CDATA[<p>本篇博客讲解:<br/>
1.UI坐标<br/>
2.OpenGL坐标<br/>
3.世界坐标和模型坐标<br/>
4.实例：世界坐标转换为模型坐标<br/>
5.实例：模型坐标转换为世界坐标</p>

<!-- more -->


<hr />

<h1>UI坐标和OpenGL坐标</h1>

<p><img src="http://i.imgur.com/tXyhhzQ.png" alt="" /><br/>
UI坐标就是Android和iOS等应用开发的时候使用的二维坐标系。它的坐标原点是在左上角的。<br/>
UI坐标也叫视图坐标，它是和我们的OpenGL坐标是不一样的。OpenGL坐标是基于左下角的
<img src="http://i.imgur.com/698Z9ws.png" alt="" /> <br/>
OpenGL坐标是一种3D坐标，OpenGL是一个渲染的标准，渲染标准的坐标系是一种3D坐标系。<br/>
所以OpenGL主要是给3D世界来做渲染，但是cocos2d觉得OpenGL速度快，所以就把OpenGL拿过来了做为一个引擎，这样的话，cocos2d就使用OpenGL坐标作为默认坐标<br/>
OpenGL坐标在二维世界里，并没有什么太大的问题，不过就是Z轴基本不用。但是有时候也会用到，就是在绘制的顺序的时候，就需要Z轴了。</p>

<p>比如绘制两个精灵在一个位置，精灵之间会有遮挡的问题，这个就和z轴的绘制顺序有关了。</p>

<h2>从UI坐标到OpenGL坐标的转换</h2>

<p>其实就是左上角，左下角之间的转换。<br/>
屏幕的高度 - OpenGL坐标 = UI坐标<br/>
屏幕的高度 - UI坐标 = OpenGL坐标</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Vec2 touchLocation = touch-&gt;getLocationInView(); //获取触摸点的位置，UI坐标系里的坐标
</span><span class='line'>Vec2 touchLocation2 = Director::getInstance()-&gt;convertToGL(touchLocation);</span></code></pre></td></tr></table></div></figure>


<p>touch是触摸点(Touch)对象</p>

<h2>右手坐标系和左手坐标系</h2>

<p><img src="http://i.imgur.com/kCbPAIl.png" alt="" /><br/>
在3D坐标系里，有两种坐标。一种是Z轴指向外面的坐标，一种是Z轴指向内部的坐标，如上图</p>

<p><img src="http://i.imgur.com/GQ9rtZL.png" alt="" /><br/>
指向外面的坐标称为右手坐标系<br/>
指向内部的坐标称为左手坐标系<br/>
大家用左右手演示一下就明白了。
注意大拇指指向X轴正方向，食指向上，中指弯曲<br/>
OpenGL属于右手坐标！<br/>
微软平台的Direct3D是左手坐标！<br/>
这两个是类似的技术</p>

<h1>世界坐标和模型坐标</h1>

<p>由于OpenGL坐标有可以分为：世界坐标和模型坐标，所以Cocos2d-x的坐标也有世界坐标和模型坐标。</p>

<p>举一个例子：<br/>
比如你去问路，可能有人会告诉你先向南走1000米，再向东走500米、<br/>
也可能会有人告诉你，先向右走1000米，再向左走500米、</p>

<p>世界坐标:<br/>
先向南走1000米，再向东走500米、也就是说以地球为参照物<br/>
模型坐标(也叫本地坐标):<br/>
先向右走1000米，再向左走500米、这里是以自身为参照物</p>

<p>所谓模型是什么，就是这个物体，这个精灵，也就是称为模型。<br/>
虽然cocos2d画的是2D对象，但是实际上是以3D技术来绘制的，因此还是叫模型坐标</p>

<p>世界坐标的整个坐标的参考系在第三方！也就是不是本身</p>

<p>比如：<br/>
<img src="http://i.imgur.com/5q7jsI6.png" alt="" /><br/>
看上图，坐标系上有ABC三个点，C是坐标原点，A参考C，B也参考C，那么，C的坐标就是A和B坐标的坐标系<br/>
所以我们把以C为参考的坐标(也就是以第三方为参考系的坐标)称为世界坐标<br/>
所以A的坐标是(5,5),B的坐标是(6,4)</p>

<p>采用A的模型坐标来描述B的位置:<br/>
我们也可以这么说，B相对于A的坐标是(1,-1),这样B就把A作为它的参考系，A就是模型坐标了！<br/>
也就是B在A这个模型坐标里所在的位置是(1,-1)</p>

<h2>世界坐标与模型坐标互相转换</h2>

<p>通过Node对象如下函数实现：</p>

<figure class='code'><figcaption><span>世界坐标与模型坐标互相转换</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">Vec2</span> <span class="n">convertToNodeSpace</span> <span class="p">(</span> <span class="k">const</span> <span class="n">Vec2</span> <span class="o">&amp;</span> <span class="n">worldPoint</span> <span class="p">)</span> <span class="c1">//将世界坐标转换为模型坐标。坐标原点看成模型(对象，精灵)的左下角所在</span>
</span><span class='line'><span class="n">Vec2</span> <span class="n">convertToNodeSpaceAR</span> <span class="p">(</span> <span class="k">const</span> <span class="n">Vec2</span> <span class="o">&amp;</span> <span class="n">worldPoint</span> <span class="p">)</span> <span class="c1">//将世界坐标转换为模型坐标。AR表示相对于锚点。</span>
</span><span class='line'>
</span><span class='line'><span class="n">Vec2</span> <span class="n">convertTouchToNodeSpace</span> <span class="p">(</span> <span class="n">Touch</span> <span class="o">*</span> <span class="n">touch</span> <span class="p">)</span> <span class="c1">//将世界坐标中触摸点转换为模型坐标。</span>
</span><span class='line'><span class="n">Vec2</span> <span class="n">convertTouchToNodeSpaceAR</span> <span class="p">(</span> <span class="n">Touch</span> <span class="o">*</span> <span class="n">touch</span> <span class="p">)</span> <span class="c1">//将世界坐标中触摸点转换为模型坐标。AR表示相对于锚点。</span>
</span><span class='line'><span class="c1">//凡是后面是ToNodeSpace的这个函数，是从世界坐标到模型坐标的转换  Node就是节点，也就是我们说的模型</span>
</span><span class='line'><span class="c1">//所有带有AR的，表示相对于锚点，也就是坐标原点看成模型(对象，精灵)的锚点所在</span>
</span><span class='line'>
</span><span class='line'><span class="n">Vec2</span> <span class="n">convertToWorldSpace</span> <span class="p">(</span> <span class="k">const</span> <span class="n">Vec2</span> <span class="o">&amp;</span> <span class="n">nodePoint</span> <span class="p">)</span> <span class="c1">//将模型坐标中触摸点转换为世界坐标。</span>
</span><span class='line'><span class="n">Vec2</span> <span class="n">convertToWorldSpaceAR</span> <span class="p">(</span> <span class="k">const</span> <span class="n">Vec2</span> <span class="o">&amp;</span> <span class="n">nodePoint</span> <span class="p">)</span> <span class="c1">//将模型坐标中触摸点转换为世界坐标。AR表示相对于锚点。</span>
</span></code></pre></td></tr></table></div></figure>


<h1>实例：世界坐标转换为模型坐标</h1>

<p><img src="http://i.imgur.com/3yIjKwO.png" alt="" />  <br/>
Node1和Node2的像素是(300,100)<br/>
所以很容易得出:<br/>
A(100,400)<br/>
C(200,300)
C相对于A:(100,-100)</p>

<p>B(400,500)
C相对于B:(-200,-200)</p>

<p>Node2的世界坐标转换为相对于Node1的模型坐标:</p>

<figure class='code'><figcaption><span>世界坐标与模型坐标互相转换</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="c1">//将Node2的位置转换为相对于Node1的模型坐标，不带AR的，表示相对于Node1的坐标原点,也就是A点</span>
</span><span class='line'><span class="n">Vec2</span> <span class="n">point1</span> <span class="o">=</span> <span class="n">node1</span><span class="o">-&gt;</span><span class="n">convertToNodeSpace</span><span class="p">(</span><span class="n">node2</span><span class="o">-&gt;</span><span class="n">getPosition</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//将Node2的位置转换为相对于Node1的模型坐标，不带AR的，表示相对于Node1的锚点,也就是B点</span>
</span><span class='line'><span class="n">Vec2</span> <span class="n">point2</span> <span class="o">=</span> <span class="n">node1</span><span class="o">-&gt;</span><span class="n">convertToNodeSpaceAR</span><span class="p">(</span><span class="n">node2</span><span class="o">-&gt;</span><span class="n">getPosition</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以得出的结果就是:</p>

<figure class='code'><figcaption><span>世界坐标与模型坐标互相转换</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">log</span><span class="p">(</span><span class="s">&quot;Node2 NodeSpace = (%f,%f)&quot;</span><span class="p">,</span><span class="n">point1</span><span class="p">.</span><span class="n">x</span><span class="p">,</span><span class="n">point1</span><span class="p">.</span><span class="n">y</span><span class="p">);</span>
</span><span class='line'><span class="c1">//Node2 NodeSpace = (100.000000,-100.000000)</span>
</span><span class='line'>
</span><span class='line'><span class="n">log</span><span class="p">(</span><span class="s">&quot;Node2 NodeSpaceAR = (%f,%f)&quot;</span><span class="p">,</span> <span class="n">point2</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">point2</span><span class="p">.</span><span class="n">y</span><span class="p">);</span>
</span><span class='line'><span class="c1">//Node2 NodeSpaceAR = (-200.000000,-200.000000)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>世界坐标与模型坐标互相转换</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="kt">bool</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">init</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// 1. super init first</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">Layer</span><span class="o">::</span><span class="n">init</span><span class="p">()</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">auto</span> <span class="n">node1</span> <span class="o">=</span> <span class="n">Sprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;Node1.png&quot;</span><span class="p">);</span><span class="c1">//Sprite是精灵</span>
</span><span class='line'>  <span class="n">node1</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="mi">400</span><span class="p">,</span><span class="mi">500</span><span class="p">));</span><span class="c1">//设置位置</span>
</span><span class='line'>  <span class="n">node1</span><span class="o">-&gt;</span><span class="n">setAnchorPoint</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">));</span><span class="c1">//设置锚点</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">node1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="c1">//层添加精灵</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">auto</span> <span class="n">node2</span> <span class="o">=</span> <span class="n">Sprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;Node2.png&quot;</span><span class="p">);</span><span class="c1">//Sprite是精灵</span>
</span><span class='line'>  <span class="n">node2</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="mi">300</span><span class="p">));</span><span class="c1">//设置位置</span>
</span><span class='line'>  <span class="n">node2</span><span class="o">-&gt;</span><span class="n">setAnchorPoint</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">));</span><span class="c1">//设置锚点</span>
</span><span class='line'>  <span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">node2</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Vec2</span> <span class="n">point1</span> <span class="o">=</span> <span class="n">node1</span><span class="o">-&gt;</span><span class="n">convertToNodeSpace</span><span class="p">(</span><span class="n">node2</span><span class="o">-&gt;</span><span class="n">getPosition</span><span class="p">());</span><span class="c1">//将Node2的位置转换为相对于Node1的模型坐标，不带AR的，表示相对于Node1的坐标原点</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">Vec2</span> <span class="n">point2</span> <span class="o">=</span> <span class="n">node1</span><span class="o">-&gt;</span><span class="n">convertToNodeSpaceAR</span><span class="p">(</span><span class="n">node2</span><span class="o">-&gt;</span><span class="n">getPosition</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">log</span><span class="p">(</span><span class="s">&quot;Node2 NodeSpace = (%f,%f)&quot;</span><span class="p">,</span><span class="n">point1</span><span class="p">.</span><span class="n">x</span><span class="p">,</span><span class="n">point1</span><span class="p">.</span><span class="n">y</span><span class="p">);</span><span class="c1">//Node2 NodeSpace = (100.000000,-100.000000)</span>
</span><span class='line'>  <span class="n">log</span><span class="p">(</span><span class="s">&quot;Node2 NodeSpaceAR = (%f,%f)&quot;</span><span class="p">,</span> <span class="n">point2</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">point2</span><span class="p">.</span><span class="n">y</span><span class="p">);</span><span class="c1">//Node2 NodeSpaceAR = (-200.000000,-200.000000)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://i.imgur.com/IDhDV2w.png" alt="" /></p>

<h1>源代码下载地址：</h1>

<blockquote cite='陈浩翔'>
GITHUB源码下载地址:<strong>【<a href='https://github.com/chenhaoxiang/cocos2d-x/tree/master/20170614/code/OpenGLcoordinates' target='_blank'>点我进行下载</a>】</strong></p>
</blockquote>


<h1>实例：模型坐标转换为世界坐标</h1>

<p><img src="http://i.imgur.com/SOqOMNO.png" alt="" /></p>

<p>在游戏场景中有两个Node对象，其中Node1的坐标是(400,500),大小是300<em>100像素<br/>
Node2是放置在Node1中的，它对于Node1的模型坐标是(0,0),大小是150</em>150像素</p>

<p>Node2相对于Node1的模型坐标转换的世界坐标:</p>

<figure class='code'><figcaption><span>世界坐标与模型坐标互相转换</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">Vec2</span> <span class="n">point1</span> <span class="o">=</span> <span class="n">node1</span><span class="o">-&gt;</span><span class="n">convertToWorldSpace</span><span class="p">(</span><span class="n">node2</span><span class="o">-&gt;</span><span class="n">getPosition</span><span class="p">());</span>
</span><span class='line'><span class="o">&gt;</span><span class="c1">//node2-&gt;getPosition()为Node2在Node1中的模型坐标(相对于Node1的坐标原点得到的坐标) -&gt;(convertToWorldSpace)-&gt;转换为世界坐标，Node2在Node1中的坐标实际上是(0,0),在世界坐标中，Node2的坐标其实就是A点的坐标</span>
</span></code></pre></td></tr></table></div></figure>


<p>(150,50)为Node2的宽高<br/>
A点的坐标 = (400,500) - (150,50) = (250,450)</p>

<p>上面的是没加上锚点的，如果加上锚点，是相对于锚点的坐标<br/>
加上锚点之后，Node1的锚点是B点，所以Node2相对于Node1的锚点的坐标是:</p>

<figure class='code'><figcaption><span>世界坐标与模型坐标互相转换</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">Vec2</span> <span class="n">point2</span> <span class="o">=</span> <span class="n">node1</span><span class="o">-&gt;</span><span class="n">convertToWorldSpaceAR</span><span class="p">(</span><span class="n">node2</span><span class="o">-&gt;</span><span class="n">getPosition</span><span class="p">());</span>
</span><span class='line'><span class="o">&gt;</span><span class="c1">//node2-&gt;getPosition()为Node2在Node1中的模型坐标(相对于再加上Node1的锚点的坐标得到的坐标) -&gt;(convertToWorldSpaceAR)-&gt;转换为世界坐标</span>
</span></code></pre></td></tr></table></div></figure>


<p>Vec2 point2 得到的其实就是B点的坐标，也就是A点坐标，加上Node1锚点的坐标相对于A点的坐标。也就是(250,450)+(150,50) = (400,500)<br/>
也就是我们说的Node2的世界坐标！</p>

<figure class='code'><figcaption><span>世界坐标与模型坐标互相转换</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="kt">bool</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">init</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// 1. super init first</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">Layer</span><span class="o">::</span><span class="n">init</span><span class="p">())</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">auto</span> <span class="n">node1</span> <span class="o">=</span> <span class="n">Sprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;Node1.png&quot;</span><span class="p">);</span><span class="c1">//Sprite是精灵</span>
</span><span class='line'>  <span class="n">node1</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="mi">400</span><span class="p">,</span> <span class="mi">500</span><span class="p">));</span><span class="c1">//设置位置</span>
</span><span class='line'>  <span class="n">node1</span><span class="o">-&gt;</span><span class="n">setAnchorPoint</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">));</span><span class="c1">//设置锚点</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">node1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span><span class="c1">//层添加精灵</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">auto</span> <span class="n">node2</span> <span class="o">=</span> <span class="n">Sprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;Node2.png&quot;</span><span class="p">);</span><span class="c1">//Sprite是精灵</span>
</span><span class='line'>  <span class="n">node2</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">));</span><span class="c1">//设置位置</span>
</span><span class='line'>  <span class="n">node2</span><span class="o">-&gt;</span><span class="n">setAnchorPoint</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">));</span><span class="c1">//设置锚点</span>
</span><span class='line'>  <span class="n">node1</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">node2</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span><span class="c1">//把Node2放到Node1</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//将Node2的位置转换为相对于Node1的模型坐标，不带AR的，表示相对于Node1的坐标原点</span>
</span><span class='line'>  <span class="n">Vec2</span> <span class="n">point1</span> <span class="o">=</span> <span class="n">node1</span><span class="o">-&gt;</span><span class="n">convertToWorldSpace</span><span class="p">(</span><span class="n">node2</span><span class="o">-&gt;</span><span class="n">getPosition</span><span class="p">());</span>
</span><span class='line'>  <span class="n">Vec2</span> <span class="n">point2</span> <span class="o">=</span> <span class="n">node1</span><span class="o">-&gt;</span><span class="n">convertToWorldSpaceAR</span><span class="p">(</span><span class="n">node2</span><span class="o">-&gt;</span><span class="n">getPosition</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">log</span><span class="p">(</span><span class="s">&quot;Node2 WorldSpace = (%f,%f)&quot;</span><span class="p">,</span> <span class="n">point1</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">point1</span><span class="p">.</span><span class="n">y</span><span class="p">);</span><span class="c1">//Node2 WorldSpace = (250.000000,450.000000)</span>
</span><span class='line'>  <span class="n">log</span><span class="p">(</span><span class="s">&quot;Node2 WorldSpaceAR = (%f,%f)&quot;</span><span class="p">,</span> <span class="n">point2</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">point2</span><span class="p">.</span><span class="n">y</span><span class="p">);</span><span class="c1">//Node2 WorldSpaceAR = (400.000000,500.000000)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>node1模型坐标来设置位置</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">node2</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">));</span><span class="c1">//设置位置</span>
</span><span class='line'><span class="n">node2</span><span class="o">-&gt;</span><span class="n">setAnchorPoint</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">));</span><span class="c1">//设置锚点</span>
</span><span class='line'><span class="n">node1</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">node2</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span><span class="c1">//把Node2放到Node1</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面代码是使用node1模型坐标来设置位置的<br/>
也可以用世界坐标描述</p>

<figure class='code'><figcaption><span>世界坐标描述</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="n">node2</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="mi">250</span><span class="p">,</span> <span class="mi">450</span><span class="p">));</span>
</span><span class='line'><span class="n">node2</span><span class="o">-&gt;</span><span class="n">setAnchorPoint</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">));</span>
</span><span class='line'><span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">node2</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h1>源代码下载地址：</h1>

<blockquote cite='陈浩翔'>
GITHUB源码下载地址:<strong>【<a href='https://github.com/chenhaoxiang/cocos2d-x/tree/master/20170614/code/OpenGLcoordinates2' target='_blank'>点我进行下载</a>】</strong></p>
</blockquote>


<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【Cocos2d-x】开发基础-Node与Node层级架构]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/06/11/node-hierarchical-structure/"/>
    <updated>2017-06-11T13:38:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/06/11/node-hierarchical-structure</id>
    <content type="html"><![CDATA[<p>本篇博客讲解:<br/>
1.Node与Node层级架构<br/>
2.Node中重要的操作<br/>
3.Node中重要的属性<br/>
4.游戏循环与调度</p>

<!-- more -->


<hr />

<h1>Node与Node层级架构</h1>

<p>首先来看一张图<br/>
<img src="http://i.imgur.com/kGQ1oxN.png" alt="" /><br/>
这个图反应了Node与Node的层级架构<br/>
所谓层级架构其实就是树形结构/层次结构，从图上可以看出来，树的根是Scene(场景)，然后是层，层里面又包含了精灵，菜单，粒子系统，瓦片地图<br/>
所有这些元素，都有一个共同的父类，就是Node</p>

<p>这个树形结构，其实就是一种包含关系<br/>
<img src="http://i.imgur.com/wFK51kL.png" alt="" /><br/>
这2个文件共同定义了一个HelloWorld的层<br/>
class HelloWorld : public cocos2d::Layer<br/>
我们自己自定义了一个类HelloWorld继承了Layer，层最后要放到场景里去</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">Scene</span><span class="o">*</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">createScene</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// 创建场景对象</span>
</span><span class='line'>    <span class="k">auto</span> <span class="n">scene</span> <span class="o">=</span> <span class="n">Scene</span><span class="o">::</span><span class="n">create</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">// 创建层对象</span>
</span><span class='line'>    <span class="k">auto</span> <span class="n">layer</span> <span class="o">=</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">create</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">// 把层放到场景里</span>
</span><span class='line'>    <span class="n">scene</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">layer</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// 返回这个场景</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">scene</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>创建场景以及HelloWord这个层，然后把层放到场景里<br/>
通过addChild这个方法，把子节点加到父节点里面去<br/>
以此类推，可以把Layer添加到Scene里，也可以这样把精灵，菜单等添加到层里</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">menu</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span><span class="c1">//把菜单放到当前层</span>
</span><span class='line'><span class="c1">//把标签加入到层中</span>
</span><span class='line'><span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">label</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="c1">//把图片精灵加入到层中</span>
</span><span class='line'><span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">sprite</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码在HelloWord.cpp中可以看到<br/>
所以，最开始的图上的层次结构，是通过add的这个方法添加上来的<br/>
既然有添加，那么就有移除方法，后面再介绍。<br/>
主要是树形结构，需要注意的就是添加的顺序和个数<br/>
一般来说，一个场景会有多个层，我们建立的HelloWord实例中，场景和层是一对一的关系<br/>
也就是场景中只放了一个层。实际上场景与层是一对多的关系<br/>
为了减少绘制的次数，不要建立太多的层，那样很消耗cpu</p>

<p>层与精灵也是一对多的关系，然后层与菜单，粒子系统，瓦片地图都是一对多的关系<br/>
菜单与菜单项是一对多的关系，一个菜单里会有多个菜单项<br/>
当cocos2d启动一个场景的时候，场景就会加载层，层会加载菜单等等，菜单会加载菜单项。就是这样一种树形结构</p>

<h1>Node中重要的操作</h1>

<p>由于场景、层、菜单、精灵&hellip;都是继承的Node，所以它们有一些共同的属性和方法</p>

<h2>创建节点</h2>

<figure class='code'><figcaption><span>创建节点</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">Node</span><span class="o">*</span> <span class="n">childNode</span> <span class="o">=</span> <span class="n">Node</span><span class="o">::</span><span class="n">create</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h2>增加新的子节点</h2>

<figure class='code'><figcaption><span>增加新的子节点</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">node</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">childNode</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">123</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>第一个参数是添加的节点；第二个参数是添加的Node的z轴的顺序(添加节点的时候会有顺序的，相当于绘制的时候的先后顺序)；第三个参数是Tag/标签，可以理解成id，通过这个tag来操作node对象    <br/>
<img src="http://i.imgur.com/eae63yS.png" alt="" /><br/>
附带第二个参数的英文介绍：</p>

<figure class='code'><figcaption><span>增加新的子节点</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">LocalZOrder</span> <span class="n">is</span> <span class="n">the</span> <span class="err">&#39;</span><span class="n">key</span><span class="err">&#39;</span> <span class="n">used</span> <span class="n">to</span> <span class="n">sort</span> <span class="n">the</span> <span class="n">node</span> <span class="n">relative</span> <span class="n">to</span> <span class="n">its</span> <span class="n">siblings</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">The</span> <span class="n">Node</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">parent</span> <span class="n">will</span> <span class="n">sort</span> <span class="n">all</span> <span class="n">its</span> <span class="n">children</span> <span class="n">based</span> <span class="n">on</span> <span class="n">the</span> <span class="n">LocalZOrder</span> <span class="n">value</span><span class="p">.</span> <span class="n">If</span> <span class="n">two</span> <span class="n">nodes</span> <span class="n">have</span> <span class="n">the</span> <span class="n">same</span> <span class="n">LocalZOrder</span><span class="p">,</span> <span class="n">then</span> <span class="n">the</span> <span class="n">node</span> <span class="n">that</span> <span class="n">was</span> <span class="n">added</span> <span class="n">first</span> <span class="n">to</span> <span class="n">the</span> <span class="n">children</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">array</span> <span class="n">will</span> <span class="n">be</span> <span class="n">in</span> <span class="n">front</span> <span class="n">of</span> <span class="n">the</span> <span class="n">other</span> <span class="n">node</span> <span class="n">in</span> <span class="n">the</span> <span class="n">array</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">Also</span><span class="p">,</span> <span class="n">the</span> <span class="n">Scene</span> <span class="n">Graph</span> <span class="n">is</span> <span class="n">traversed</span> <span class="k">using</span> <span class="n">the</span> <span class="s">&quot;In-Order&quot;</span> <span class="n">tree</span> <span class="n">traversal</span> <span class="n">algorithm</span> <span class="p">(</span> <span class="nl">http</span><span class="p">:</span><span class="c1">//en.wikipedia.org/wiki/Tree_traversal#In-order ) And Nodes that have LocalZOrder values &lt; 0 are the &quot;left&quot; subtree While Nodes with LocalZOrder &gt;=0 are the &quot;right&quot; subtree.</span>
</span></code></pre></td></tr></table></div></figure>


<p>addChild有4个方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">virtual</span> <span class="kt">void</span> <span class="n">addChild</span>   <span class="p">(</span> <span class="n">Node</span> <span class="o">*</span> <span class="n">child</span><span class="p">)</span>  
</span><span class='line'><span class="k">virtual</span> <span class="kt">void</span> <span class="n">addChild</span>   <span class="p">(</span> <span class="n">Node</span> <span class="o">*</span> <span class="n">child</span><span class="p">,</span><span class="kt">int</span> <span class="n">localZOrder</span><span class="p">)</span>    
</span><span class='line'><span class="k">virtual</span> <span class="kt">void</span> <span class="n">addChild</span>   <span class="p">(</span> <span class="n">Node</span> <span class="o">*</span> <span class="n">child</span><span class="p">,</span><span class="kt">int</span> <span class="n">localZOrder</span><span class="p">,</span><span class="kt">int</span> <span class="n">tag</span><span class="p">)</span>
</span><span class='line'><span class="k">virtual</span> <span class="kt">void</span> <span class="n">addChild</span>   <span class="p">(</span> <span class="n">Node</span> <span class="o">*</span> <span class="n">child</span><span class="p">,</span><span class="kt">int</span> <span class="n">localZOrder</span><span class="p">,</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span> <span class="n">name</span><span class="p">)</span>  
</span></code></pre></td></tr></table></div></figure>


<h2>查找子节点</h2>

<figure class='code'><figcaption><span>通过Tag查找子节点</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">Node</span><span class="o">*</span> <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">getChildByTag</span><span class="p">(</span><span class="mi">123</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>删除子节点</h2>

<figure class='code'><figcaption><span>删除子节点，并停止所有该节点上的一切动作</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">node</span><span class="o">-&gt;</span><span class="n">removeChildByTag</span><span class="p">(</span><span class="mi">123</span><span class="p">,</span><span class="nb">true</span><span class="p">)</span><span class="c1">//第二个参数表示是否在内存中清除这个对象</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>通过Node指针删除节点</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">node</span><span class="o">-&gt;</span><span class="n">removeChild</span><span class="p">(</span><span class="n">childNode</span><span class="p">)</span><span class="c1">//直接删除节点</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>删除所有子节点，并停止这些子节点上的一切动作</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">node</span><span class="o">-&gt;</span><span class="n">removeAllChildrenWithCleanup</span><span class="p">(</span><span class="nb">true</span><span class="p">)</span> <span class="c1">//true-清除内存</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>从父节点Node中删除当前的节点对象，并停止所有该节点上的一切动作</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">node</span><span class="o">-&gt;</span><span class="n">removeFromParentAndCleanup</span><span class="p">(</span><span class="nb">true</span><span class="p">)</span> <span class="c1">//true-清除内存</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Node中重要的属性</h1>

<p>Node两个非常重要的属性:<br/>
position和anchorPoint<br/>
position是指的位置，anchorPoint是指的锚点<br/>
位置(坐标)很好理解，就是比如放在(5,5),x=5,y=5.但是精灵图片是有大小的，这个时候就需要锚点了。  <br/>
我们用图来理解吧
1.anchorPoint为(0.5,0.5)，这个是默认值<br/>
<img src="http://i.imgur.com/P68puku.png" alt="" /><br/>
第一个参数0.5，是锚点距离左边边线的距离和图片整个的宽度的比例，也就是1/2<br/>
第二个参数0.5，是锚点距离底边高度和整个高度的比值，也就是1/2</p>

<p>2.anchorPoint为(0,0)，也就是精灵图片的左下角<br/>
<img src="http://i.imgur.com/DqOBDal.png" alt="" /></p>

<p>3.anchorPoint为(1.0,1.0)，也就是精灵图片的右上角  <br/>
<img src="http://i.imgur.com/hHux4IT.png" alt="" /></p>

<p>4.anchorPoint为(0.66,0.5)，这个具有普遍性<br/>
<img src="http://i.imgur.com/4ZzjNcC.png" alt="" /></p>

<h1>游戏循环与调度</h1>

<p>每一个游戏程序都有一个循环在不断运行，它是有导演对象来管理和维护。<br/>
如果需要场景中的精灵运动起来，我们可以在游戏循环中使用定时器（Scheduler）对精灵等对象的运行进行调度。<br/>
因为Node类封装了Scheduler类，所以我们也可以直接使用Node中调用函数。<br/>
Node中调用函数主要有：</p>

<figure class='code'><figcaption><span>从父节点Node中删除当前的节点对象，并停止所有该节点上的一切动作</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="n">scheduleUpdate</span> <span class="p">(</span> <span class="kt">void</span> <span class="p">)</span><span class="c1">//开始游戏调度，每个Node对象只要调用该函数，那么这个Node对象就会定时地每帧回调用一次自己的update(float dt)函数，每帧调用一次update函数！这是固定的时间和函数  </span>
</span><span class='line'><span class="c1">//下面这个函数更加个性化，可以自定义回调函数和时间</span>
</span><span class='line'><span class="kt">void</span> <span class="n">schedule</span> <span class="p">(</span> <span class="n">SEL_SCHEDULE</span> <span class="n">selector</span><span class="p">,</span>  <span class="kt">float</span>  <span class="n">interval</span> <span class="p">)</span><span class="c1">//与scheduleUpdate函数功能一样，不同的是我们可以指定回调函数（通过selector指定），也可以根据需要指定回调时间间隔</span>
</span><span class='line'><span class="c1">//一旦调度开始，就会不断循环</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">unscheduleUpdate</span> <span class="p">(</span> <span class="kt">void</span> <span class="p">)</span><span class="c1">//停止update(float dt)函数调度  和scheduleUpdate对应</span>
</span><span class='line'><span class="kt">void</span> <span class="n">unschedule</span> <span class="p">(</span> <span class="n">SEL_SCHEDULE</span> <span class="n">selector</span> <span class="p">)</span><span class="c1">//可以指定具体函数停止调度  和schedule对应</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">unscheduleAllSelectors</span> <span class="p">(</span> <span class="kt">void</span> <span class="p">)</span><span class="c1">//可以停止所有调度</span>
</span></code></pre></td></tr></table></div></figure>


<h1>源代码下载地址：</h1>

<blockquote cite='陈浩翔'>
GITHUB源码下载地址:<strong>【<a href='https://github.com/chenhaoxiang/cocos2d-x/tree/master/20170611/HelloWorld' target='_blank'>点我进行下载</a>】</strong></p>
</blockquote>


<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【Cocos2d-x】开发基础-Cocos2d-x核心概念]]></title>
    <link href="http://chenhaoxiang.github.io/blog/2017/06/10/core-concept/"/>
    <updated>2017-06-10T13:38:54+08:00</updated>
    <id>http://chenhaoxiang.github.io/blog/2017/06/10/core-concept</id>
    <content type="html"><![CDATA[<p>本篇博客讲解:<br/>
1.Cocos2d-x的核心概念</p>

<!-- more -->


<hr />

<h1>导演</h1>

<p>导演类Director(v3.0之前是CCDirector)用于管理场景对象。<br/>
(所以3.0版本和以前的最大区别(我们看到的最大区别)就是类前面的CC，3.0版本是把所以的类前缀CC都去掉了)</p>

<p>采用单例设计模式！(不多解释啦，不知道的朋友请搜索)</p>

<figure class='code'><figcaption><span>获得导演类Director实例语句</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">auto</span> <span class="n">director</span> <span class="o">=</span> <span class="n">Director</span><span class="o">::</span><span class="n">getInstance</span><span class="p">();</span><span class="c1">//获取唯一的导演  单例模式</span>
</span></code></pre></td></tr></table></div></figure>


<h2>导演对象的职责/作用</h2>

<p>访问和改变场景<br/>
访问Cocos2d-x的配置信息<br/>
暂停、继续和停止游戏<br/>
转换坐标</p>

<p>上面只是导演对象的职责其中一部分，还有其他很多，但我们不需要让导演做很多事情(其他的事被隐藏了)，我们用的最多的应该就是访问和改变场景、暂停、继续和停止游戏和转换坐标</p>

<h1>场景</h1>

<p>场景类Scene(v3.0之前是CCScene)是构成游戏的界面，类似于电影中的场景。</p>

<p>像导演、场景、包括层，精灵等这些游戏的概念，其实都是从电影行业中过渡过来的。<br/>
那么，电影行业，我们知道有场景，有导演。<br/>
场景就是我们拍这场戏，我们布置的景  比如打斗的场景等<br/>
场景中会有男主角，女主角，那么男女主角就相当于我们这里的精灵了，包括道具什么的(精灵)，这些东西在一起，就构成了层</p>

<p>所以场景里面也会放一些层</p>

<h2>场景大致可以分为以下几类</h2>

<p>展示类场景。播放视频或简单的在图像上输出文字，来实现游戏的开场介绍、胜利和失败提示、帮助介绍<br/>
选项类场景。主菜单，设置游戏参数等(比如开始，暂停，继续菜单)<br/>
游戏场景。这是游戏的主要内容</p>

<p>Scene类图:继承图
<img src="http://i.imgur.com/2S6h9PZ.png" alt="" /></p>

<h1>层</h1>

<p>层是我们写游戏的重点，我们大约99%以上的时间是在层上实现我们游戏内容。<br/>
层的管理类似于Photoshop中的图层，它也是一层一层叠在一起</p>

<p>我们一般写的很多类都是层，然后在层上面添加精灵等.然后把层放到场景里<br/>
场景包含层，层包含精灵,菜单等对象</p>

<p>理论上来说，层的层数越多(层与层之间有覆盖的问题，后面的层会覆盖先绘制的层)，需要绘制的深度越深，越耗CPU<br/>
大家可以打开Photoshop，用里面的图层来理解，这样更加直观<br/>
<img src="http://i.imgur.com/4XUGFsE.png" alt="" /></p>

<h1>精灵</h1>

<p>精灵类Sprite(v3.0之前是CCSprite)是游戏中非常重要的概念，它包括了敌人、玩家控制的对象、静态物体、地图和背景等<br/>
通常情况它会进行运动，运动方式包括了：移动、旋转、放大、缩小和动画等</p>

<h1>菜单</h1>

<p>菜单在游戏中时非常重要的概念，它提供操作的集合，在Cococ2d-x中菜单类是Menu</p>

<p>Menu中包含菜单项<br/>
MenuItem，它有三个子类：<br/>
MenuItemLabel、MenuItemSprite和MenuItemToggle</p>

<p>之前的HelloWord中的关闭按钮其实就是一个菜单项<br/>
我们也可以用精灵来实现，但是菜单项封装了一些触摸事件，你不需要关心它事件处理的细节问题</p>

<p>本文章由<a href="http://chenhaoxiang.cn/">[谙忆]</a>编写， 所有权利保留。
欢迎转载，分享是进步的源泉。</p>

<blockquote cite='陈浩翔'>
<p background-color='#D3D3D3'>转载请注明出处：<a href='http://chenhaoxiang.cn'><font color="green">http://chenhaoxiang.cn</font></a><br><br>
本文源自<strong>【<a href='http://chenhaoxiang.cn' target='_blank'>人生之旅_谙忆的博客</a>】</strong></p>
</blockquote>

]]></content>
  </entry>
  
</feed>
